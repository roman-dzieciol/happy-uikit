void * -[UICollectionView initWithFrame:](void * self, void * _cmd, struct CGRect arg2) {
    rax = [self initWithFrame:0x0 collectionViewLayout:rcx];
    return rax;
}

void * -[UICollectionView initWithFrame:collectionViewLayout:](void * self, void * _cmd, struct CGRect arg2, void * arg3) {
    rcx = arg3;
    r15 = self;
    rbx = arg_0;
    r14 = [arg2 retain];
    if (r14 == 0x0) {
            rdx = *_NSInvalidArgumentException;
            rcx = @"UICollectionView must be initialized with a non-nil layout parameter";
            [NSException raise:rdx format:rcx];
    }
    rbx = [[r15 super] initWithFrame:rdx, rcx];
    if (rbx != 0x0) {
            rbx->_layout = [r14 retain];
            [rbx->_layout release];
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = 0x200000000000 | rbx->_collectionViewFlags;
            _UICollectionViewCommonSetup();
    }
    [r14 release];
    rax = rbx;
    return rax;
}

int _UICollectionViewCommonSetup() {
    rbx = [rdi retain];
    [rbx->_layout _setCollectionView:rbx];
    rbx->_indexPathsForSelectedItems = [[NSMutableSet alloc] init];
    [rbx->_indexPathsForSelectedItems release];
    rbx->_indexPathsForHighlightedItems = [[NSMutableSet alloc] init];
    [rbx->_indexPathsForHighlightedItems release];
    rbx->_collectionViewData = [[UICollectionViewData alloc] initWithCollectionView:rbx layout:rbx->_layout];
    [rbx->_collectionViewData release];
    rdx = 0x80000000000 | rbx->_collectionViewFlags;
    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    rbx->_collectionViewFlags = rdx;
    rbx->_visibleCellsDict = [[NSMutableDictionary alloc] init];
    [rbx->_visibleCellsDict release];
    rbx->_visibleSupplementaryViewsDict = [[NSMutableDictionary alloc] init];
    [rbx->_visibleSupplementaryViewsDict release];
    rbx->_visibleDecorationViewsDict = [[NSMutableDictionary alloc] init];
    [rbx->_visibleDecorationViewsDict release];
    rbx->_cellReuseQueues = [[NSMutableDictionary alloc] init];
    [rbx->_cellReuseQueues release];
    rbx->_supplementaryViewReuseQueues = [[NSMutableDictionary alloc] init];
    [rbx->_supplementaryViewReuseQueues release];
    rbx->_prefetchCacheItems = [[NSMutableDictionary alloc] init];
    [rbx->_prefetchCacheItems release];
    r14 = [[rbx backgroundColor] retain];
    if (r14 == 0x0) goto loc_95ca32;

loc_95ca2a:
    rdi = r14;
    goto loc_95cab9;

loc_95cab9:
    [rdi release];
    goto loc_95cabf;

loc_95cabf:
    r15 = [[_UIFeedbackDragSnappingBehaviorConfiguration defaultConfiguration] retain];
    r14 = [[r15 tweakedConfigurationForClass:[UICollectionView class] usage:@"reorder"] retain];
    [r15 release];
    rsi = @selector(behaviorWithConfiguration:coordinateSpace:);
    rdx = r14;
    rbx->_reorderFeedbackBehavior = [_objc_msgSend(@class(_UIFeedbackDragSnappingBehavior), rsi, rdx, rbx) retain];
    [rbx->_reorderFeedbackBehavior release];
    r15 = [rbx->_layout retain];
    rbx = [rbx retain];
    if ((r15 != 0x0) && (!(BIT_TEST(*(rbx + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r15 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    rdx = 0x1;
            }
            else {
                    rdx = 0x0;
            }
            rsi = @selector(_setHasMirrorTransform:);
            _objc_msgSend(rbx, rsi);
    }
    [rbx release];
    [r15 release];
    rbx->_prefetchingEnabled = [rbx _prefetchingEnabledDefault];
    [r14 release];
    rax = [rbx release];
    return rax;

loc_95ca32:
    r15 = [[rbx backgroundView] retain];
    [r15 release];
    [r14 release];
    if (r15 != 0x0) goto loc_95cabf;

loc_95ca5e:
    var_30 = [rbx retain];
    [UIView _performSystemAppearanceModifications:__NSConcreteStackBlock];
    rdi = var_30;
    goto loc_95cab9;
}

void -[UICollectionView encodeWithCoder:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    rdx = r14;
    [[rbx super] encodeWithCoder:rdx];
    if (rbx->_layout != 0x0) {
            [r14 encodeObject:rdx forKey:@"UICollectionLayout"];
    }
    if (rbx->_backgroundView != 0x0) {
            [r14 encodeObject:rdx forKey:@"UIBackgroundView"];
    }
    rax = rbx->_collectionViewFlags;
    if (!(BIT_TEST(rax, 0x2d))) {
            [r14 encodeBool:0x0 forKey:@"UIAllowsSelection"];
            rax = rbx->_collectionViewFlags;
    }
    if (!(BIT_TEST(rax, 0x2e))) {
            [r14 encodeBool:0x1 forKey:@"UIAllowsMultipleSelection"];
            rax = rbx->_collectionViewFlags;
    }
    if (!(BIT_TEST(rax, 0x2f))) {
            [r14 encodeBool:0x1 forKey:@"UIAllowsSelectionDuringEditing"];
            rax = rbx->_collectionViewFlags;
    }
    if (!(BIT_TEST(rax, 0x30))) {
            [r14 encodeBool:0x1 forKey:@"UIAllowsMultipleSelectionDuringEditing"];
    }
    if ([rbx->_cellNibExternalObjectsTables count] != 0x0) {
            [r14 encodeObject:rbx->_cellNibExternalObjectsTables forKey:@"UICollectionViewCellPrototypeNibExternalObjects"];
    }
    if ([rbx->_supplementaryViewNibExternalObjectsTables count] != 0x0) {
            [r14 encodeObject:rbx->_supplementaryViewNibExternalObjectsTables forKey:@"UICollectionViewSupplementaryViewPrototypeNibExternalObjects"];
    }
    if ([rbx->_cellNibDict count] != 0x0) {
            [r14 encodeObject:rbx->_cellNibDict forKey:@"UICollectionViewCellNibDict"];
    }
    if ([rbx->_supplementaryViewNibDict count] != 0x0) {
            [r14 encodeObject:rbx->_supplementaryViewNibDict forKey:@"UICollectionViewSupplementaryViewNibDict"];
    }
    rax = [rbx isPrefetchingEnabled];
    [r14 encodeBool:rax & 0xff forKey:@"UICollectionViewPrefetchingEnabled"];
    [r14 release];
    return;
}

void -[UICollectionView dealloc](void * self, void * _cmd) {
    var_138 = _cmd;
    rbx = self;
    r14 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + rbx);
    if (r14 != 0x0) {
            objc_setAssociatedObject(r14, rbx + 0x2, 0x0, 0x1);
    }
    [r14 release];
    [rbx _stopAutoscrollTimer];
    [rbx _unregisterForGeometryChanges];
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    var_130 = rbx;
    rax = [rbx subviews];
    rax = [rax retain];
    var_118 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_108 = rax;
    if (rax != 0x0) {
            var_110 = *var_E0;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_E0 != var_110) {
                                    objc_enumerationMutation(var_118);
                            }
                            r13 = *(var_E8 + r12 * 0x8);
                            if ([r13 isKindOfClass:[UICollectionReusableView class]] != 0x0) {
                                    [r13 _setCollectionView:0x0];
                            }
                            r12 = r12 + 0x1;
                    } while (r12 < var_108);
                    rax = [var_118 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_108 = rax;
            } while (rax != 0x0);
    }
    [var_118 release];
    r12 = var_130;
    r13 = [[r12->_layout collectionView] retain];
    [r13 release];
    if (r13 == r12) {
            [r12->_layout _setCollectionView:0x0];
    }
    if (r12->_updateCompletionHandler != 0x0) {
            r13 = _objc_msgSend;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r14 = [rdi retain];
            [rbx release];
            rbx = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
            (r13)(rbx, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_138, r12, r14, 0x2e4, @"UICollectionView (%@) was deallocated while an update was in flight", r12);
            [r14 release];
            [rbx release];
    }
    [[r12 super] dealloc];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void * -[UICollectionView description](void * self, void * _cmd) {
    r14 = [[[self super] description] retain];
    rbx = [[r14 stringByAppendingFormat:@" collection view layout: %@"] retain];
    [r14 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

bool -[UICollectionView canBeEdited](void * self, void * _cmd) {
    rbx = [[self collectionViewLayout] retain];
    r14 = [rbx canBeEdited];
    [rbx release];
    rax = r14;
    return rax;
}

void -[UICollectionView setEditing:](void * self, void * _cmd, bool arg2) {
    r15 = arg2;
    r14 = self;
    var_30 = *___stack_chk_guard;
    if ((([self _isEditing] ^ r15) & 0xff) == 0x1) {
            r14->_collectionViewFlags = r14->_collectionViewFlags;
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 << 0x2 & 0xff | *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0xfb;
            [r14 _deselectAllAnimated:0x0 notifyDelegate:0x0];
            r12 = [[r14 collectionViewLayout] retain];
            r13 = [r12 canBeEdited];
            rdi = r12;
            [rdi release];
            if (r13 != 0x0) {
                    rbx = [[r14 collectionViewLayout] retain];
                    [rbx setEditing:r15 & 0xff, 0x0];
                    [rbx release];
            }
            r14 = [r14 retain];
            var_140 = r14;
            rbx = objc_retainBlock(__NSConcreteStackBlock);
            (*(rbx + 0x10))(rbx, r14->_visibleCellsDict, 0x1);
            intrinsic_movaps(var_170, 0x0);
            intrinsic_movaps(var_180, 0x0);
            var_190 = intrinsic_movaps(var_190, 0x0);
            var_1A0 = intrinsic_movaps(var_1A0, 0x0);
            r13 = [[r14->_visibleSupplementaryViewsDict objectEnumerator] retain];
            r12 = [r13 countByEnumeratingWithState:var_1A0 objects:var_B0 count:0x10];
            if (r12 != 0x0) {
                    var_1F0 = r14;
                    r14 = *var_190;
                    do {
                            r15 = 0x0;
                            do {
                                    if (*var_190 != r14) {
                                            objc_enumerationMutation(r13);
                                    }
                                    (*(rbx + 0x10))(rbx, *(var_198 + r15 * 0x8), 0x0);
                                    r15 = r15 + 0x1;
                            } while (r15 < r12);
                            var_1E8 = @selector(countByEnumeratingWithState:objects:count:);
                            r12 = _objc_msgSend(r13, var_1E8);
                    } while (r12 != 0x0);
                    r14 = var_1F0;
            }
            else {
                    var_1E8 = @selector(countByEnumeratingWithState:objects:count:);
            }
            [r13 release];
            intrinsic_movaps(var_1B0, 0x0);
            intrinsic_movaps(var_1C0, 0x0);
            var_1D0 = intrinsic_movaps(var_1D0, 0x0);
            var_1E0 = intrinsic_movaps(var_1E0, 0x0);
            r14 = [[r14->_visibleDecorationViewsDict objectEnumerator] retain];
            r12 = _objc_msgSend(r14, var_1E8);
            if (r12 != 0x0) {
                    r13 = *var_1D0;
                    do {
                            r15 = 0x0;
                            do {
                                    if (*var_1D0 != r13) {
                                            objc_enumerationMutation(r14);
                                    }
                                    (*(rbx + 0x10))(rbx, *(var_1D8 + r15 * 0x8), 0x0);
                                    r15 = r15 + 0x1;
                            } while (r15 < r12);
                            r12 = [r14 countByEnumeratingWithState:var_1E0 objects:var_130 count:0x10];
                    } while (r12 != 0x0);
            }
            [r14 release];
            [rbx release];
            [var_140 release];
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

int ___31-[UICollectionView setEditing:]_block_invoke(int arg0, int arg1, int arg2) {
    r13 = [arg1 retain];
    var_38 = [*(arg0 + 0x20) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [r13 release];
    rax = [var_38 release];
    return rax;
}

void ___31-[UICollectionView setEditing:]_block_invoke_2(int arg0, int arg1, int arg2) {
    r15 = arg2;
    r14 = arg1;
    rbx = arg0;
    if ([r15 conformsToProtocol:__objc_proto_UIEditable_protocol] != 0x0) {
            rdi = *(rbx + 0x20);
            rax = *(int16_t *)(rbx + 0x28) & 0xffff;
            rcx = rax != 0x0 ? 0x1 : 0x0;
            CMP(rax, 0xff);
            asm { cmova      r8, r14 };
            rdx = rcx & 0xff;
            rcx = r15;
            [rdi _updateEditing:rdx forView:rcx atIndexPath:r8];
    }
    return;
}

bool -[UICollectionView _isEditing](void * self, void * _cmd) {
    rax = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rax = (rax & 0x4) >> 0x2;
    return rax;
}

bool -[UICollectionView isEditing](void * self, void * _cmd) {
    rax = [self _isEditing];
    return rax;
}

bool -[UICollectionView _canEditItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    r15 = [arg2 retain];
    if (r15 != 0x0) {
            r12 = [[r14 dataSource] retain];
            rbx = 0x1;
            if ([r12 respondsToSelector:@selector(_collectionView:canEditItemAtIndexPath:)] != 0x0) {
                    rbx = [r12 _collectionView:r14 canEditItemAtIndexPath:r15];
            }
            [r12 release];
    }
    else {
            rbx = 0x0;
    }
    [r15 release];
    rax = rbx;
    return rax;
}

void -[UICollectionView _updateEditing:forView:atIndexPath:](void * self, void * _cmd, bool arg2, void * arg3, void * arg4) {
    r15 = arg2;
    r12 = self;
    r13 = [arg3 retain];
    r14 = [arg4 retain];
    if ([r13 canBeEdited] != 0x0) {
            if ((r14 != 0x0) && ([r12 _canEditItemAtIndexPath:r14] == 0x0)) {
                    rdx = 0x0;
            }
            else {
                    if (r15 != 0x0) {
                            rdx = 0x1;
                    }
                    else {
                            rdx = 0x0;
                    }
            }
            [r13 setEditing:rdx];
    }
    [r14 release];
    rdi = r13;
    [rdi release];
    return;
}

void * -[UICollectionView _objectInDictionary:forKind:indexPath:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r12 = [arg2 retain];
    rbx = [arg2 objectForKey:arg3];
    [r12 release];
    rbx = [rbx retain];
    r14 = [[rbx objectForKey:arg4] retain];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void -[UICollectionView _setObject:inDictionary:forKind:indexPath:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, void * arg5) {
    var_38 = arg5;
    r13 = [arg2 retain];
    rbx = [arg3 retain];
    var_30 = rbx;
    rax = [arg4 retain];
    var_40 = rax;
    r15 = [[rbx objectForKey:rax] retain];
    if (r15 == 0x0) goto loc_95dd21;

loc_95dcfe:
    r14 = r13;
    if (r13 == 0x0) goto loc_95dd8d;

loc_95dd0a:
    rbx = r14;
    r12 = r15;
    r15 = var_30;
    r13 = var_40;
    goto loc_95dd75;

loc_95dd75:
    r14 = rbx;
    [r12 setObject:r14 forKey:var_38];
    goto loc_95ddac;

loc_95ddac:
    [r12 release];
    [r13 release];
    [r15 release];
    rdi = r14;
    [rdi release];
    return;

loc_95dd8d:
    r12 = r15;
    goto loc_95dd90;

loc_95dd90:
    r13 = var_40;
    [r12 removeObjectForKey:var_38];
    r15 = var_30;
    goto loc_95ddac;

loc_95dd21:
    r12 = [[NSMutableDictionary dictionary] retain];
    [r15 release];
    r14 = r13;
    if (r13 == 0x0) goto loc_95dd90;

loc_95dd51:
    rbx = r14;
    r15 = var_30;
    r13 = var_40;
    [r15 setObject:r12 forKey:r13];
    goto loc_95dd75;
}

void -[UICollectionView _addEntriesFromDictionary:inDictionary:andSet:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    var_68 = [arg2 retain];
    rbx = [arg3 retain];
    r14 = [arg4 retain];
    var_40 = [self retain];
    var_38 = rbx;
    r15 = [rbx retain];
    var_30 = r14;
    r14 = [r14 retain];
    [arg2 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_68 release];
    [var_30 release];
    [var_38 release];
    [var_40 release];
    [r14 release];
    [r15 release];
    return;
}

int ___66-[UICollectionView _addEntriesFromDictionary:inDictionary:andSet:]_block_invoke(int arg0, int arg1, int arg2) {
    var_40 = [*(arg0 + 0x20) retain];
    var_38 = [*(arg0 + 0x28) retain];
    var_30 = [*(arg0 + 0x30) retain];
    [arg2 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_30 release];
    [var_38 release];
    rax = [var_40 release];
    return rax;
}

int ___66-[UICollectionView _addEntriesFromDictionary:inDictionary:andSet:]_block_invoke_2(int arg0, int arg1, int arg2) {
    [*(arg0 + 0x20) _setObject:rdx inDictionary:*(arg0 + 0x28) forKind:*(arg0 + 0x38) indexPath:arg1];
    rax = [*(arg0 + 0x30) addObject:arg2];
    return rax;
}

void -[UICollectionView _addEntriesFromDictionary:inDictionary:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    [self _addEntriesFromDictionary:rbx inDictionary:arg3 andSet:0x0];
    rdi = rbx;
    [rdi release];
    return;
}

void * -[UICollectionView _keysForObject:inDictionary:](void * self, void * _cmd, void * arg2, void * arg3) {
    r15 = [arg2 retain];
    r14 = [arg3 retain];
    intrinsic_movdqu(var_40, intrinsic_punpcklqdq(zero_extend_64(___Block_byref_object_copy_), zero_extend_64(___Block_byref_object_dispose_)));
    r12 = [r15 retain];
    [r14 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    r15 = [*0x28 retain];
    [r12 release];
    _Block_object_dispose(0x0, 0x8);
    [0x0 release];
    [r14 release];
    [r12 release];
    rdi = r15;
    rax = [rdi autorelease];
    return rax;
}

int ___48-[UICollectionView _keysForObject:inDictionary:]_block_invoke(int arg0, int arg1, int arg2, int arg3) {
    var_40 = [*(arg0 + 0x20) retain];
    [arg2 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    rax = [var_40 release];
    return rax;
}

void ___48-[UICollectionView _keysForObject:inDictionary:]_block_invoke_2(int arg0, int arg1, int arg2, int arg3) {
    r14 = arg3;
    r15 = arg1;
    rbx = arg0;
    if (*(rbx + 0x20) == arg2) {
            *(*(*(rbx + 0x28) + 0x8) + 0x28) = [[NSArray alloc] initWithObjects:*(rbx + 0x30)];
            [*(*(*(rbx + 0x28) + 0x8) + 0x28) release];
            *(int8_t *)*(rbx + 0x38) = 0x1;
            *(int8_t *)r14 = 0x1;
    }
    return;
}

void * -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:isDecorationView:](void * self, void * _cmd, void * arg2, void * arg3, bool arg4) {
    r14 = arg3;
    r15 = self;
    rbx = [arg2 retain];
    if (arg4 != 0x0) {
            rsi = @selector(_visibleDecorationViewOfKind:atIndexPath:);
    }
    else {
            rsi = @selector(_visibleSupplementaryViewOfKind:atIndexPath:);
    }
    r14 = _objc_msgSend(r15, rsi);
    [rbx release];
    rax = [r14 retain];
    rax = [rax autorelease];
    return rax;
}

bool -[UICollectionView _hasRegisteredClassOrNibForSupplementaryViewOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self->_supplementaryViewRegisteredKinds containsObject:arg2];
    return rax;
}

void * -[UICollectionView _visibleSupplementaryViewOfKind:atIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    r13 = [arg3 retain];
    r15 = [self->_visibleSupplementaryViewsDict valueForKey:rbx];
    [rbx release];
    rbx = [r15 retain];
    r14 = [rbx objectForKey:arg3];
    [r13 release];
    r14 = [r14 retain];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView _visibleDecorationViewOfKind:atIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    r13 = [arg3 retain];
    r15 = [self->_visibleDecorationViewsDict valueForKey:rbx];
    [rbx release];
    rbx = [r15 retain];
    r14 = [rbx objectForKey:arg3];
    [r13 release];
    r14 = [r14 retain];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void -[UICollectionView setDelegate:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    rdi = 0x0;
    if (r14 != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                    rdi = r14;
                    if (*(int32_t *)__UIApplicationLinkedOnVersion <= 0x8ffff) {
                            rdi = r14;
                            if ([r14 allowsWeakReference] == 0x0) {
                                    var_38 = [r14 retain];
                                    rax = [rbx retain];
                                    var_30 = rax;
                                    if (*_setDelegate:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setDelegate:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
            else {
                    rdi = r14;
                    if (__UIApplicationLinkedOnOrAfter(0x90000) == 0x0) {
                            rdi = r14;
                            if ([r14 allowsWeakReference] == 0x0) {
                                    var_38 = [r14 retain];
                                    rax = [rbx retain];
                                    var_30 = rax;
                                    if (*_setDelegate:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setDelegate:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
    }
    r12 = [rdi retain];
    [r14 release];
    rax = [rbx delegate];
    rax = [rax retain];
    if (r12 != rax) {
            var_70 = rax;
            [[rbx super] setDelegate:r12];
            r15 = [[rbx delegate] retain];
            [r12 release];
            rdx = 0xffffffff7fffffff & rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | ((r15 != 0x0 ? 0x1 : 0x0) & 0xff) << 0x1f;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldHighlightItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffe;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | rax & 0xff;
            rax = [r15 respondsToSelector:@selector(collectionView:didHighlightItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffd;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x2;
            rax = [r15 respondsToSelector:@selector(collectionView:didUnhighlightItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffb;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x4;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldSelectItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xfffffffffffffff7;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x8;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldDeselectItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xffffffffffffffef;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x4;
            rax = [r15 respondsToSelector:@selector(collectionView:didSelectItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xffffffffffffffdf;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x5;
            rax = [r15 respondsToSelector:@selector(collectionView:didDeselectItemAtIndexPath:), rcx];
            rdx = rbx->_collectionViewFlags & 0xffffffffffffffbf;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x6;
            rax = [r15 respondsToSelector:@selector(collectionView:willDisplayCell:forItemAtIndexPath:), rcx, r8];
            rdx = 0xfffffffffffffeff & rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x8;
            rax = [r15 respondsToSelector:@selector(collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:), rcx, r8, r9];
            rdx = 0xfffffffffffffdff & rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x9;
            rax = [r15 respondsToSelector:@selector(collectionView:didEndDisplayingCell:forItemAtIndexPath:), rcx, r8];
            rdx = 0xfffffffffffffbff & rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0xa;
            rax = [r15 respondsToSelector:@selector(collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:), rcx, r8, r9];
            rdx = 0xfffffffffffff7ff & rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0xb;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldShowMenuForItemAtIndexPath:), rcx];
            rcx = 0x0;
            COND = rax == 0x0;
            rax = 0x0;
            if (!COND) {
                    rax = [r15 respondsToSelector:@selector(collectionView:canPerformAction:forItemAtIndexPath:withSender:), rcx, r8, r9];
                    rcx = 0x0;
                    COND = rax == 0x0;
                    rax = 0x0;
                    if (!COND) {
                            rcx = ([r15 respondsToSelector:@selector(collectionView:performAction:forItemAtIndexPath:withSender:), rcx, r8, r9] & 0xff) << 0x7;
                            rax = 0x0;
                    }
            }
            r13 = *_OBJC_IVAR_$_UICollectionView._collectionViewFlags;
            rdx = 0xffffffffffffff7f & *(rbx + r13);
            rax = rax | *(int32_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | rcx;
            *(int8_t *)(rbx + r13 + 0x8) = rax;
            rax = [r15 respondsToSelector:@selector(_indexPathOfReferenceItemForLayoutTransitionInCollectionView:), rcx];
            rdx = 0xffffffffffffefff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0xc;
            rax = [r15 respondsToSelector:@selector(_collectionView:shouldApplyTransitionContentOffset:contentSize:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffffdfff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0xd;
            rax = [r15 respondsToSelector:@selector(_collectionView:targetContentOffsetForProposedContentOffset:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffffbfff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0xe;
            rax = [r15 respondsToSelector:@selector(collectionView:targetContentOffsetForProposedContentOffset:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffff7fff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0xf;
            rax = [r15 respondsToSelector:@selector(_collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffffeffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x10;
            rax = [r15 respondsToSelector:@selector(collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffffdffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x11;
            rax = [r15 respondsToSelector:@selector(_collectionView:canFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffffbffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x12;
            rax = [r15 respondsToSelector:@selector(_collectionView:didFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffff7ffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x13;
            rax = [r15 respondsToSelector:@selector(collectionView:canFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffefffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x14;
            rax = [r15 respondsToSelector:@selector(collectionView:didFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffdfffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x15;
            rax = [r15 respondsToSelector:@selector(collectionView:didUnfocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffffbfffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x16;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldChangeFocusedItem:fromItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffff7fffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x17;
            rax = [r15 respondsToSelector:@selector(indexPathForPreferredFocusedItemForCollectionView:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffeffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x18;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldUpdateFocusFromItemAtIndexPath:toView:heading:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffdffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x19;
            rax = [r15 respondsToSelector:@selector(indexPathForPreferredFocusedViewInCollectionView:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffffbffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x1a;
            rax = [r15 respondsToSelector:@selector(collectionView:shouldUpdateFocusInContext:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xfffffffff7ffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x1b;
            rax = [r15 respondsToSelector:@selector(collectionView:didUpdateFocusInContext:withAnimationCoordinator:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffefffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x1c;
            rax = [r15 respondsToSelector:@selector(_collectionView:templateLayoutCellForCellsWithReuseIdentifier:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffdfffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x1d;
            rax = [r15 respondsToSelector:@selector(_collectionView:willLayoutCell:usingTemplateLayoutCell:forItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
            rdx = 0xffffffffbfffffff & *(rbx + r13);
            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
            *(rbx + r13) = rdx | (rax & 0xff) << 0x1e;
            rax = var_70;
    }
    else {
            if (r12 != 0x0) {
                    r15 = r12;
            }
            else {
                    r15 = 0x0;
                    if (rbx->_collectionViewFlags < 0x0) {
                            var_70 = rax;
                            [[rbx super] setDelegate:r12];
                            r15 = [[rbx delegate] retain];
                            [r12 release];
                            rdx = 0xffffffff7fffffff & rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | ((r15 != 0x0 ? 0x1 : 0x0) & 0xff) << 0x1f;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldHighlightItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffe;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | rax & 0xff;
                            rax = [r15 respondsToSelector:@selector(collectionView:didHighlightItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffd;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x2;
                            rax = [r15 respondsToSelector:@selector(collectionView:didUnhighlightItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xfffffffffffffffb;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x4;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldSelectItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xfffffffffffffff7;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx + (rax & 0xff) * 0x8;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldDeselectItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xffffffffffffffef;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x4;
                            rax = [r15 respondsToSelector:@selector(collectionView:didSelectItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xffffffffffffffdf;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x5;
                            rax = [r15 respondsToSelector:@selector(collectionView:didDeselectItemAtIndexPath:), rcx];
                            rdx = rbx->_collectionViewFlags & 0xffffffffffffffbf;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x6;
                            rax = [r15 respondsToSelector:@selector(collectionView:willDisplayCell:forItemAtIndexPath:), rcx, r8];
                            rdx = 0xfffffffffffffeff & rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x8;
                            rax = [r15 respondsToSelector:@selector(collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:), rcx, r8, r9];
                            rdx = 0xfffffffffffffdff & rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0x9;
                            rax = [r15 respondsToSelector:@selector(collectionView:didEndDisplayingCell:forItemAtIndexPath:), rcx, r8];
                            rdx = 0xfffffffffffffbff & rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0xa;
                            rax = [r15 respondsToSelector:@selector(collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:), rcx, r8, r9];
                            rdx = 0xfffffffffffff7ff & rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx | (rax & 0xff) << 0xb;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldShowMenuForItemAtIndexPath:), rcx];
                            rcx = 0x0;
                            COND = rax == 0x0;
                            rax = 0x0;
                            if (!COND) {
                                    rax = [r15 respondsToSelector:@selector(collectionView:canPerformAction:forItemAtIndexPath:withSender:), rcx, r8, r9];
                                    rcx = 0x0;
                                    COND = rax == 0x0;
                                    rax = 0x0;
                                    if (!COND) {
                                            rcx = ([r15 respondsToSelector:@selector(collectionView:performAction:forItemAtIndexPath:withSender:), rcx, r8, r9] & 0xff) << 0x7;
                                            rax = 0x0;
                                    }
                            }
                            r13 = *_OBJC_IVAR_$_UICollectionView._collectionViewFlags;
                            rdx = 0xffffffffffffff7f & *(rbx + r13);
                            rax = rax | *(int32_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | rcx;
                            *(int8_t *)(rbx + r13 + 0x8) = rax;
                            rax = [r15 respondsToSelector:@selector(_indexPathOfReferenceItemForLayoutTransitionInCollectionView:), rcx];
                            rdx = 0xffffffffffffefff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0xc;
                            rax = [r15 respondsToSelector:@selector(_collectionView:shouldApplyTransitionContentOffset:contentSize:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffffdfff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0xd;
                            rax = [r15 respondsToSelector:@selector(_collectionView:targetContentOffsetForProposedContentOffset:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffffbfff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0xe;
                            rax = [r15 respondsToSelector:@selector(collectionView:targetContentOffsetForProposedContentOffset:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffff7fff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0xf;
                            rax = [r15 respondsToSelector:@selector(_collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffffeffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x10;
                            rax = [r15 respondsToSelector:@selector(collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffffdffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x11;
                            rax = [r15 respondsToSelector:@selector(_collectionView:canFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffffbffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x12;
                            rax = [r15 respondsToSelector:@selector(_collectionView:didFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffff7ffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x13;
                            rax = [r15 respondsToSelector:@selector(collectionView:canFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffefffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x14;
                            rax = [r15 respondsToSelector:@selector(collectionView:didFocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffdfffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x15;
                            rax = [r15 respondsToSelector:@selector(collectionView:didUnfocusItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffffbfffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x16;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldChangeFocusedItem:fromItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffff7fffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x17;
                            rax = [r15 respondsToSelector:@selector(indexPathForPreferredFocusedItemForCollectionView:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffeffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x18;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldUpdateFocusFromItemAtIndexPath:toView:heading:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffdffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x19;
                            rax = [r15 respondsToSelector:@selector(indexPathForPreferredFocusedViewInCollectionView:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffffbffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x1a;
                            rax = [r15 respondsToSelector:@selector(collectionView:shouldUpdateFocusInContext:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xfffffffff7ffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x1b;
                            rax = [r15 respondsToSelector:@selector(collectionView:didUpdateFocusInContext:withAnimationCoordinator:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffefffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x1c;
                            rax = [r15 respondsToSelector:@selector(_collectionView:templateLayoutCellForCellsWithReuseIdentifier:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffdfffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x1d;
                            rax = [r15 respondsToSelector:@selector(_collectionView:willLayoutCell:usingTemplateLayoutCell:forItemAtIndexPath:), *(int8_t *)(rbx + r13 + 0x8)];
                            rdx = 0xffffffffbfffffff & *(rbx + r13);
                            *(int8_t *)(rbx + r13 + 0x8) = *(int8_t *)(rbx + r13 + 0x8);
                            *(rbx + r13) = rdx | (rax & 0xff) << 0x1e;
                            rax = var_70;
                    }
            }
    }
    [rax release];
    [r15 release];
    return;
}

void ___32-[UICollectionView setDelegate:]_block_invoke(int arg0) {
    r14 = arg0;
    var_28 = *___stack_chk_guard;
    rbx = ___UILogGetCategoryCachedImpl("Warning", _UICollectionElementKindCell_block_invoke.__s_category);
    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
            r12 = rsp;
            rax = rsp;
            *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe1) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
            *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
            *(rax + 0xffffffffffffffe4) = *(r14 + 0x20);
            *(int16_t *)(rax + 0xffffffffffffffec) = 0x840;
            *(rax + 0xffffffffffffffee) = *(r14 + 0x28);
            _os_log_impl(0xffffffffff6a117e, *(rbx + 0x8), 0x10, "You are trying to set a deallocating object as a delegate. This will be a hard crash in the future. Offending object: %@ hostObject: %@", rax + 0xffffffffffffffe0, 0x16);
    }
    if (*___stack_chk_guard != var_28) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView setDataSource:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    r15 = [arg2 retain];
    rdi = 0x0;
    if (r15 != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                    rdi = r15;
                    if (*(int32_t *)__UIApplicationLinkedOnVersion <= 0x8ffff) {
                            rdi = r15;
                            if ([r15 allowsWeakReference] == 0x0) {
                                    var_38 = [r15 retain];
                                    rax = [r14 retain];
                                    var_30 = rax;
                                    if (*_setDataSource:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setDataSource:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
            else {
                    rdi = r15;
                    if (__UIApplicationLinkedOnOrAfter(0x90000) == 0x0) {
                            rdi = r15;
                            if ([r15 allowsWeakReference] == 0x0) {
                                    var_38 = [r15 retain];
                                    rax = [r14 retain];
                                    var_30 = rax;
                                    if (*_setDataSource:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setDataSource:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
    }
    r12 = [rdi retain];
    [r15 release];
    r15 = *_OBJC_IVAR_$_UICollectionView._dataSource + r14;
    rbx = objc_loadWeakRetained(r15);
    if ((rbx != r12) || ((r12 == 0x0) && (!(BIT_TEST(r14->_collectionViewFlags, 0x26))))) {
            if (rbx != 0x0) {
                    objc_setAssociatedObject(rbx, r14 + 0x2, 0x0, 0x1);
            }
            var_98 = rbx;
            objc_storeWeak(r15, r12);
            var_90 = r12;
            r12 = [r12 retain];
            r13 = [[r14 dataSource] retain];
            rbx = 0x1;
            if (r12 == r13) {
                    rbx = [r14 allowsWeakReference] ^ 0x1;
            }
            [r13 release];
            rax = r12 == 0x0 ? 0x1 : 0x0;
            if ((rbx == 0x0) && (rax == 0x0)) {
                    objc_initWeak(var_60, r14);
                    rbx = [_UIWeakHelper alloc];
                    objc_copyWeak(var_68, var_60);
                    rbx = [rbx initWithDeallocationBlock:__NSConcreteStackBlock];
                    objc_setAssociatedObject(r12, r14 + 0x2, rbx, 0x1);
                    [rbx release];
                    objc_destroyWeak(var_68);
                    objc_destroyWeak(var_60);
            }
            [r12 release];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xffffffbfffffffff & r14->_collectionViewFlags | ((r12 != 0x0 ? 0x1 : 0x0) & 0xff) << 0x26;
            rax = [r12 respondsToSelector:@selector(numberOfSectionsInCollectionView:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xfffffffeffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x20;
            rax = [r12 respondsToSelector:@selector(collectionView:viewForSupplementaryElementOfKind:atIndexPath:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xfffffffdffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x21;
            rax = [r12 respondsToSelector:@selector(_collectionView:canMoveItemAtIndexPath:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xfffffffbffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x22;
            rax = [r12 respondsToSelector:@selector(_collectionView:moveItemAtIndexPath:toIndexPath:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xfffffff7ffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x23;
            rax = [r12 respondsToSelector:@selector(collectionView:canMoveItemAtIndexPath:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0xffffffefffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x24;
            rax = [r12 respondsToSelector:@selector(collectionView:moveItemAtIndexPath:toIndexPath:)];
            *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r14->_collectionViewFlags = 0x8000000000000 | 0xfff7ffdfffffffff & r14->_collectionViewFlags | (rax & 0xff) << 0x25;
            [r14 _invalidateLayoutIfNecessaryForReload];
            r12 = var_90;
            rbx = var_98;
    }
    [rbx release];
    [r12 release];
    return;
}

void ___34-[UICollectionView setDataSource:]_block_invoke(int arg0) {
    r14 = arg0;
    var_28 = *___stack_chk_guard;
    rbx = ___UILogGetCategoryCachedImpl("Warning", _UICollectionElementKindCell_block_invoke_2.__s_category);
    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
            r12 = rsp;
            rax = rsp;
            *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe1) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
            *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
            *(rax + 0xffffffffffffffe4) = *(r14 + 0x20);
            *(int16_t *)(rax + 0xffffffffffffffec) = 0x840;
            *(rax + 0xffffffffffffffee) = *(r14 + 0x28);
            _os_log_impl(0xffffffffff6a0c02, *(rbx + 0x8), 0x10, "You are trying to set a deallocating object as dataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", rax + 0xffffffffffffffe0, 0x16);
    }
    if (*___stack_chk_guard != var_28) {
            __stack_chk_fail();
    }
    return;
}

void ___34-[UICollectionView setDataSource:]_block_invoke.597(int arg0) {
    rbx = objc_loadWeakRetained(arg0 + 0x20);
    if (rbx != 0x0) {
            r14 = [[rbx dataSource] retain];
            if (r14 == 0x0) {
                    [rbx setDataSource:0x0];
            }
            [r14 release];
    }
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView setPrefetchDataSource:](void * self, void * _cmd, void * arg2) {
    r13 = self;
    r15 = [arg2 retain];
    rdi = 0x0;
    if (r15 != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                    rdi = r15;
                    if (*(int32_t *)__UIApplicationLinkedOnVersion <= 0x8ffff) {
                            rdi = r15;
                            if ([r15 allowsWeakReference] == 0x0) {
                                    var_38 = [r15 retain];
                                    rax = [r13 retain];
                                    var_30 = rax;
                                    if (*_setPrefetchDataSource:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setPrefetchDataSource:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
            else {
                    rdi = r15;
                    if (__UIApplicationLinkedOnOrAfter(0x90000) == 0x0) {
                            rdi = r15;
                            if ([r15 allowsWeakReference] == 0x0) {
                                    var_38 = [r15 retain];
                                    rax = [r13 retain];
                                    var_30 = rax;
                                    if (*_setPrefetchDataSource:.once != 0xffffffffffffffff) {
                                            dispatch_once(_setPrefetchDataSource:.once, __NSConcreteStackBlock);
                                            rax = var_30;
                                    }
                                    [rax release];
                                    [var_38 release];
                                    rdi = 0x0;
                            }
                    }
            }
    }
    r14 = [rdi retain];
    [r15 release];
    r15 = *_OBJC_IVAR_$_UICollectionView._prefetchDataSource + r13;
    rbx = objc_loadWeakRetained(r15);
    if ((rbx != r14) || ((r14 == 0x0) && (!(BIT_TEST(r13->_collectionViewFlags, 0x29))))) {
            if (rbx != 0x0) {
                    objc_setAssociatedObject(rbx, r13 + 0x2, 0x0, 0x1);
            }
            var_98 = rbx;
            objc_storeWeak(r15, r14);
            r12 = [r14 retain];
            rbx = [[r13 prefetchDataSource] retain];
            r15 = 0x1;
            if (r12 == rbx) {
                    r15 = [r13 allowsWeakReference] ^ 0x1;
            }
            var_90 = r14;
            [rbx release];
            rax = r12 == 0x0 ? 0x1 : 0x0;
            if ((r15 == 0x0) && (rax == 0x0)) {
                    objc_initWeak(var_60, r13);
                    rbx = [_UIWeakHelper alloc];
                    objc_copyWeak(var_68, var_60);
                    rbx = [rbx initWithDeallocationBlock:__NSConcreteStackBlock];
                    objc_setAssociatedObject(r12, r13 + 0x2, rbx, 0x1);
                    [rbx release];
                    objc_destroyWeak(var_68);
                    objc_destroyWeak(var_60);
            }
            [r12 release];
            *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r13->_collectionViewFlags = 0xfffffdffffffffff & r13->_collectionViewFlags | ((r12 != 0x0 ? 0x1 : 0x0) & 0xff) << 0x29;
            rax = [r12 respondsToSelector:@selector(collectionView:prefetchItemsAtIndexPaths:)];
            *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r13->_collectionViewFlags = 0xffffff7fffffffff & r13->_collectionViewFlags | (rax & 0xff) << 0x27;
            rax = [r12 respondsToSelector:@selector(collectionView:cancelPrefetchingForItemsAtIndexPaths:)];
            *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r13->_collectionViewFlags = 0xfffffeffffffffff & r13->_collectionViewFlags | (rax & 0xff) << 0x28;
            r14 = var_90;
            rbx = var_98;
    }
    [rbx release];
    [r14 release];
    return;
}

void ___42-[UICollectionView setPrefetchDataSource:]_block_invoke(int arg0) {
    r14 = arg0;
    var_28 = *___stack_chk_guard;
    rbx = ___UILogGetCategoryCachedImpl("Warning", _UICollectionElementKindCell_block_invoke_3.__s_category);
    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
            r12 = rsp;
            rax = rsp;
            *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe1) = 0x2;
            *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
            *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
            *(rax + 0xffffffffffffffe4) = *(r14 + 0x20);
            *(int16_t *)(rax + 0xffffffffffffffec) = 0x840;
            *(rax + 0xffffffffffffffee) = *(r14 + 0x28);
            _os_log_impl(0xffffffffff6a06ed, *(rbx + 0x8), 0x10, "You are trying to set a deallocating object as prefetchDataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", rax + 0xffffffffffffffe0, 0x16);
    }
    if (*___stack_chk_guard != var_28) {
            __stack_chk_fail();
    }
    return;
}

void ___42-[UICollectionView setPrefetchDataSource:]_block_invoke.624(int arg0) {
    rbx = objc_loadWeakRetained(arg0 + 0x20);
    if (rbx != 0x0) {
            r14 = [[rbx prefetchDataSource] retain];
            if (r14 == 0x0) {
                    [rbx setPrefetchDataSource:0x0];
            }
            [r14 release];
    }
    rdi = rbx;
    [rdi release];
    return;
}

void * -[UICollectionView prefetchDataSource](void * self, void * _cmd) {
    rax = objc_loadWeakRetained(self + *_OBJC_IVAR_$_UICollectionView._prefetchDataSource);
    rax = [rax autorelease];
    return rax;
}

void -[UICollectionView _reloadDataIfNeeded](void * self, void * _cmd) {
    rdi = self;
    rax = rdi->_collectionViewFlags;
    if ((!(BIT_TEST(rax, 0x33))) && (!(BIT_TEST(rax, 0x34)))) {
            if (rdi->_reloadingSuspendedCount == 0x0) {
                    [rdi reloadData];
            }
    }
    return;
}

bool -[UICollectionView _dataSourceImplementsNumberOfSections](void * self, void * _cmd) {
    rax = (0x100000000 & self->_collectionViewFlags) >> 0x20;
    return rax;
}

void * -[UICollectionView indexPathsForSelectedItems](void * self, void * _cmd) {
    [self _reloadDataIfNeeded];
    rax = [self->_indexPathsForSelectedItems allObjects];
    return rax;
}

void * -[UICollectionView _collectionViewData](void * self, void * _cmd) {
    rax = objc_retainAutoreleaseReturnValue(self->_collectionViewData);
    return rax;
}

void * -[UICollectionView _visibleViews](void * self, void * _cmd) {
    r12 = self;
    r14 = [NSMutableArray alloc];
    rbx = [[r12->_visibleCellsDict allValues] retain];
    var_1B8 = [r14 initWithArray:rbx];
    [rbx release];
    intrinsic_movaps(var_140, 0x0);
    intrinsic_movaps(var_150, 0x0);
    var_160 = intrinsic_movaps(var_160, 0x0);
    var_170 = intrinsic_movaps(var_170, 0x0);
    rax = [r12->_visibleSupplementaryViewsDict objectEnumerator];
    rax = [rax retain];
    var_1D0 = rax;
    r14 = @selector(countByEnumeratingWithState:objects:count:);
    rdx = var_170;
    rcx = var_B0;
    rax = _objc_msgSend(rax, r14);
    var_1C0 = rax;
    if (rax != 0x0) {
            var_1E0 = r12;
            var_1C8 = *var_160;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_160 != var_1C8) {
                                    objc_enumerationMutation(var_1D0);
                            }
                            r13 = [[*(var_168 + r12 * 0x8) allValues] retain];
                            [var_1B8 addObjectsFromArray:r13];
                            [r13 release];
                            r12 = r12 + 0x1;
                    } while (r12 < var_1C0);
                    r14 = @selector(countByEnumeratingWithState:objects:count:);
                    rdx = var_170;
                    rcx = var_B0;
                    rax = _objc_msgSend(var_1D0, r14);
                    var_1C0 = rax;
            } while (rax != 0x0);
            r12 = var_1E0;
    }
    [var_1D0 release];
    intrinsic_movaps(var_180, 0x0);
    intrinsic_movaps(var_190, 0x0);
    var_1A0 = intrinsic_movaps(var_1A0, 0x0);
    var_1B0 = intrinsic_movaps(var_1B0, 0x0);
    rax = [r12->_visibleDecorationViewsDict objectEnumerator];
    rax = [rax retain];
    var_1D0 = rax;
    rax = _objc_msgSend(rax, r14, var_1B0, var_130, 0x10);
    var_1C0 = rax;
    if (rax != 0x0) {
            var_1C8 = *var_1A0;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_1A0 != var_1C8) {
                                    objc_enumerationMutation(var_1D0);
                            }
                            r14 = [[*(var_1A8 + r12 * 0x8) allValues] retain];
                            [var_1B8 addObjectsFromArray:r14];
                            [r14 release];
                            r12 = r12 + 0x1;
                    } while (r12 < var_1C0);
                    rax = [var_1D0 countByEnumeratingWithState:var_1B0 objects:var_130 count:0x10];
                    var_1C0 = rax;
            } while (rax != 0x0);
    }
    [var_1D0 release];
    r15 = objc_retainAutoreleaseReturnValue(var_1B8);
    [var_1B8 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = r15;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void * -[UICollectionView _managedViews](void * self, void * _cmd) {
    var_1E0 = self;
    r15 = [[NSMutableSet alloc] init];
    var_1B8 = r15;
    rbx = [[self _visibleViews] retain];
    [r15 addObjectsFromArray:rbx];
    [rbx release];
    intrinsic_movaps(var_140, 0x0);
    intrinsic_movaps(var_150, 0x0);
    var_160 = intrinsic_movaps(var_160, 0x0);
    var_170 = intrinsic_movaps(var_170, 0x0);
    rax = [self->_prefetchCacheItems objectEnumerator];
    rax = [rax retain];
    var_1D0 = rax;
    rbx = @selector(countByEnumeratingWithState:objects:count:);
    r12 = _objc_msgSend(rax, rbx);
    if (r12 != 0x0) {
            var_1C0 = *var_160;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_160 != var_1C0) {
                                    objc_enumerationMutation(var_1D0);
                            }
                            rbx = *(var_168 + r15 * 0x8);
                            r13 = [[rbx view] retain];
                            [r13 release];
                            if (r13 != 0x0) {
                                    rdi = rbx;
                                    r13 = [[rdi view] retain];
                                    [var_1B8 addObject:r13];
                                    [r13 release];
                            }
                            r15 = r15 + 0x1;
                    } while (r15 < r12);
                    rbx = @selector(countByEnumeratingWithState:objects:count:);
                    r12 = _objc_msgSend(var_1D0, rbx);
            } while (r12 != 0x0);
    }
    [var_1D0 release];
    intrinsic_movaps(var_180, 0x0);
    intrinsic_movaps(var_190, 0x0);
    var_1A0 = intrinsic_movaps(var_1A0, 0x0);
    var_1B0 = intrinsic_movaps(var_1B0, 0x0);
    r14 = [[var_1E0->_cellReuseQueues objectEnumerator] retain];
    rdx = var_1B0;
    rbx = _objc_msgSend(r14, rbx);
    if (rbx != 0x0) {
            r13 = *var_1A0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_1A0 != r13) {
                                    objc_enumerationMutation(r14);
                            }
                            [var_1B8 addObjectsFromArray:*(var_1A8 + r15 * 0x8)];
                            r15 = r15 + 0x1;
                    } while (r15 < rbx);
                    rdx = var_1B0;
                    rbx = [r14 countByEnumeratingWithState:rdx objects:var_130 count:0x10];
            } while (rbx != 0x0);
    }
    [r14 release];
    if (var_1E0->_focusedCell != 0x0) {
            [var_1B8 addObject:rdx];
    }
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = [var_1B8 autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void -[UICollectionView _deselectAllAnimated:notifyDelegate:](void * self, void * _cmd, bool arg2, bool arg3) {
    var_120 = arg3;
    var_11C = arg2;
    r14 = self;
    intrinsic_movaps(var_C0, 0x0, arg2, arg3);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [r14->_indexPathsForSelectedItems copy];
    var_130 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_F8 = rax;
    if (rax != 0x0) {
            var_128 = *var_E0;
            do {
                    var_140 = *_OBJC_IVAR_$_UIScrollView._delegate + r14;
                    r15 = 0x0;
                    do {
                            if (*var_E0 != var_128) {
                                    objc_enumerationMutation(var_130);
                            }
                            r13 = *(var_E8 + r15 * 0x8);
                            rbx = [[r14 _cellForItemAtIndexPath:r13 includePrefetchedCells:0x1] retain];
                            [rbx _setSelected:0x0 animated:var_11C & 0xff];
                            [rbx release];
                            [r14->_indexPathsForSelectedItems removeObject:r13];
                            if ((var_120 != 0x0) && ((r14->_collectionViewFlags & 0x40) != 0x0)) {
                                    rbx = objc_loadWeakRetained(var_140);
                                    [rbx collectionView:r14 didDeselectItemAtIndexPath:r13];
                                    [rbx release];
                            }
                            r15 = r15 + 0x1;
                    } while (r15 < var_F8);
                    rax = [var_130 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_F8 = rax;
            } while (rax != 0x0);
    }
    [var_130 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _selectItemAtIndexPath:animated:scrollPosition:notifyDelegate:](void * self, void * _cmd, void * arg2, bool arg3, NSUInteger arg4, bool arg5) {
    r13 = arg5;
    r12 = arg4;
    var_2C = arg3;
    r15 = arg2;
    r14 = self;
    if (([r15 item] == 0x7fffffffffffffff) || ([r15 section] == 0x7fffffffffffffff)) {
            r15 = 0x0;
    }
    if ([r14 allowsSelection] != 0x0) {
            if (r15 != 0x0) {
                    if ((r13 != 0x0) && ((r14->_collectionViewFlags & 0x8) != 0x0)) {
                            rbx = r12;
                            r12 = [[r14 delegate] retain];
                            var_38 = [r12 collectionView:r14 shouldSelectItemAtIndexPath:r15];
                            rdi = r12;
                            r12 = rbx;
                            [rdi release];
                            if (var_38 != 0x0) {
                                    rax = [r14 _allowsEffectiveMultipleSelection];
                                    if (rax != 0x0) {
                                            var_38 = r12;
                                    }
                                    else {
                                            var_38 = r12;
                                            r12 = [[r14->_indexPathsForSelectedItems anyObject] retain];
                                            rbx = r13;
                                            r13 = [r12 isEqual:r15];
                                            [r12 release];
                                            COND = r13 != 0x0;
                                            r13 = rbx;
                                            if (!COND) {
                                                    [r14 _deselectAllAnimated:var_2C & 0xff notifyDelegate:r13 & 0xff];
                                            }
                                    }
                                    var_30 = r13;
                                    if ([r14->_indexPathsForSelectedItems containsObject:r15] == 0x0) {
                                            [r14->_indexPathsForSelectedItems addObject:r15];
                                    }
                                    r12 = [[r14 cellForItemAtIndexPath:r15] retain];
                                    r13 = var_2C & 0xff;
                                    rcx = r13;
                                    [r12 _setSelected:0x1 animated:rcx];
                                    if (var_38 != 0x0) {
                                            [r14 scrollToItemAtIndexPath:r15 atScrollPosition:rcx animated:r13];
                                    }
                                    if (var_30 != 0x0) {
                                            rbx = [[r12 _selectionSegueTemplate] retain];
                                            rax = [rbx perform:r12];
                                            objc_unsafeClaimAutoreleasedReturnValue(rax);
                                            [rbx release];
                                            if ((r14->_collectionViewFlags & 0x20) != 0x0) {
                                                    [UIViewController _sendPrepareForTapGesture:r12];
                                                    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r14);
                                                    [rbx collectionView:r14 didSelectItemAtIndexPath:r15];
                                                    [rbx release];
                                            }
                                    }
                                    rdi = r12;
                                    [rdi release];
                            }
                    }
                    else {
                            rax = [r14 _allowsEffectiveMultipleSelection];
                            if (rax != 0x0) {
                                    var_38 = r12;
                            }
                            else {
                                    var_38 = r12;
                                    r12 = [[r14->_indexPathsForSelectedItems anyObject] retain];
                                    rbx = r13;
                                    r13 = [r12 isEqual:r15];
                                    [r12 release];
                                    COND = r13 != 0x0;
                                    r13 = rbx;
                                    if (!COND) {
                                            [r14 _deselectAllAnimated:var_2C & 0xff notifyDelegate:r13 & 0xff];
                                    }
                            }
                            var_30 = r13;
                            if ([r14->_indexPathsForSelectedItems containsObject:r15] == 0x0) {
                                    [r14->_indexPathsForSelectedItems addObject:r15];
                            }
                            r12 = [[r14 cellForItemAtIndexPath:r15] retain];
                            r13 = var_2C & 0xff;
                            rcx = r13;
                            [r12 _setSelected:0x1 animated:rcx];
                            if (var_38 != 0x0) {
                                    [r14 scrollToItemAtIndexPath:r15 atScrollPosition:rcx animated:r13];
                            }
                            if (var_30 != 0x0) {
                                    rbx = [[r12 _selectionSegueTemplate] retain];
                                    rax = [rbx perform:r12];
                                    objc_unsafeClaimAutoreleasedReturnValue(rax);
                                    [rbx release];
                                    if ((r14->_collectionViewFlags & 0x20) != 0x0) {
                                            [UIViewController _sendPrepareForTapGesture:r12];
                                            rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r14);
                                            [rbx collectionView:r14 didSelectItemAtIndexPath:r15];
                                            [rbx release];
                                    }
                            }
                            rdi = r12;
                            [rdi release];
                    }
            }
            else {
                    rcx = r13 & 0xff;
                    rdi = r14;
                    [rdi _deselectAllAnimated:var_2C & 0xff notifyDelegate:rcx];
            }
    }
    return;
}

void -[UICollectionView selectItemAtIndexPath:animated:scrollPosition:](void * self, void * _cmd, void * arg2, bool arg3, NSUInteger arg4) {
    rbx = [arg2 retain];
    [self _reloadDataIfNeeded];
    [self _selectItemAtIndexPath:rbx animated:arg3 & 0xff scrollPosition:arg4 notifyDelegate:0x0];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _deselectItemAtIndexPath:animated:notifyDelegate:](void * self, void * _cmd, void * arg2, bool arg3, bool arg4) {
    r12 = arg4;
    r13 = arg3;
    r14 = self;
    rbx = [arg2 retain];
    if ([r14->_indexPathsForSelectedItems containsObject:rbx] == 0x0) goto loc_960a4c;

loc_9607b5:
    r15 = [[r14 delegate] retain];
    if (r12 == 0x0) goto loc_960893;

loc_9607d9:
    if (((r14->_collectionViewFlags & 0x10) == 0x0) || ([r15 collectionView:r14 shouldDeselectItemAtIndexPath:rbx] != 0x0)) goto loc_960806;

loc_960a43:
    [r15 release];
    goto loc_960a4c;

loc_960a4c:
    rdi = rbx;
    [rdi release];
    return;

loc_960806:
    var_30 = r15;
    r15 = [[r14 cellForItemAtIndexPath:rbx] retain];
    [r15 _setSelected:0x0 animated:r13 & 0xff];
    [r15 release];
    [r14->_indexPathsForSelectedItems removeObject:rbx];
    if (r12 != 0x0) {
            if ((r14->_collectionViewFlags & 0x40) != 0x0) {
                    [var_30 collectionView:r14 didDeselectItemAtIndexPath:rbx];
            }
    }
    goto loc_9608f3;

loc_9608f3:
    var_38 = rbx;
    r12 = [[r14 window] retain];
    r13 = [[r12 screen] retain];
    if ([r13 supportsFocus] != 0x0) {
            rax = [r14 window];
            rax = [rax retain];
            var_40 = rax;
            rax = [rax _screen];
            rax = [rax retain];
            var_48 = rax;
            r15 = [[rax _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey", __UIScreenCapabilityTouchLevelsKey] retain];
            var_50 = [r15 integerValue];
            rbx = r12;
            [r15 release];
            [var_48 release];
            [var_40 release];
            [r13 release];
            [rbx release];
            rbx = var_38;
            r15 = var_30;
            if ((var_50 == 0x2) && ([r14->_indexPathsForHighlightedItems count] == 0x0)) {
                    rax = [r14->_collectionViewData globalIndexForItemAtIndexPath:rbx];
                    [r14 _unhighlightAllItemsAndHighlightGlobalItem:rax];
            }
    }
    else {
            [r13 release];
            [r12 release];
            rbx = var_38;
            r15 = var_30;
    }
    goto loc_960a43;

loc_960893:
    var_30 = r15;
    r12 = rbx;
    rbx = [[r14 cellForItemAtIndexPath:rbx] retain];
    [rbx _setSelected:0x0 animated:r13 & 0xff];
    rdi = rbx;
    rbx = r12;
    [rdi release];
    [r14->_indexPathsForSelectedItems removeObject:rbx];
    goto loc_9608f3;
}

void -[UICollectionView deselectItemAtIndexPath:animated:](void * self, void * _cmd, void * arg2, bool arg3) {
    [self _reloadDataIfNeeded];
    [self _deselectItemAtIndexPath:arg2 animated:arg3 & 0xff notifyDelegate:0x0];
    return;
}

void -[UICollectionView setAllowsSelection:](void * self, void * _cmd, bool arg2) {
    rdx = arg2;
    rbx = self;
    rax = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rcx = rbx->_collectionViewFlags;
    if ((((rcx & 0x200000000000) >> 0x2d ^ rdx) & 0xff) == 0x1) {
            if (rdx != 0x0) {
                    rbx->_collectionViewFlags = rcx | 0x200000000000;
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rax;
            }
            else {
                    if ([rbx _isEditing] == 0x0) {
                            [rbx _deselectAllAnimated:0x0 notifyDelegate:0x0];
                    }
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) & 0xdf;
                    rdi = rbx;
                    [rdi setAllowsMultipleSelection:0x0];
            }
    }
    return;
}

bool -[UICollectionView allowsSelection](void * self, void * _cmd) {
    rax = (0x200000000000 & self->_collectionViewFlags) >> 0x2d;
    return rax;
}

void -[UICollectionView setAllowsMultipleSelection:](void * self, void * _cmd, bool arg2) {
    rdx = arg2;
    r12 = self;
    var_30 = *___stack_chk_guard;
    rax = *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rcx = r12->_collectionViewFlags;
    if ((((rcx & 0x400000000000) >> 0x2e ^ rdx) & 0xff) == 0x1) {
            if (rdx != 0x0) {
                    r12->_collectionViewFlags = rcx | 0x400000000000;
                    *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rax;
                    [r12 setAllowsSelection:0x1];
            }
            else {
                    if (([r12->_indexPathsForSelectedItems count] >= 0x2) && ([r12 _isEditing] == 0x0)) {
                            r13 = objc_unsafeClaimAutoreleasedReturnValue([r12->_indexPathsForSelectedItems anyObject]);
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            var_F8 = r12;
                            rax = [r12->_indexPathsForSelectedItems copy];
                            var_100 = rax;
                            rbx = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            if (rbx != 0x0) {
                                    r14 = *var_E0;
                                    do {
                                            r15 = 0x0;
                                            do {
                                                    if (*var_E0 != r14) {
                                                            objc_enumerationMutation(var_100);
                                                    }
                                                    if (*(var_E8 + r15 * 0x8) != r13) {
                                                            [var_F8 deselectItemAtIndexPath:rdx animated:0x0];
                                                    }
                                                    r15 = r15 + 0x1;
                                            } while (r15 < rbx);
                                            rdx = var_F0;
                                            rbx = [var_100 countByEnumeratingWithState:rdx objects:var_B0 count:0x10];
                                    } while (rbx != 0x0);
                            }
                            [var_100 release];
                            r12 = var_F8;
                    }
                    *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) = *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) & 0xbf;
            }
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

bool -[UICollectionView allowsMultipleSelection](void * self, void * _cmd) {
    rax = (0x400000000000 & self->_collectionViewFlags) >> 0x2e;
    return rax;
}

void -[UICollectionView _setAllowsSelectionDuringEditing:](void * self, void * _cmd, bool arg2) {
    rdx = arg2;
    rbx = self;
    rax = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rcx = rbx->_collectionViewFlags;
    if ((((rcx & 0x800000000000) >> 0x2f ^ rdx) & 0xff) == 0x1) {
            if (rdx != 0x0) {
                    rbx->_collectionViewFlags = rcx | 0x800000000000;
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rax;
            }
            else {
                    if ([rbx _isEditing] != 0x0) {
                            [rbx _deselectAllAnimated:0x0 notifyDelegate:0x0];
                    }
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x5) & 0x7f;
                    rdi = rbx;
                    [rdi _setAllowsMultipleSelectionDuringEditing:0x0];
            }
    }
    return;
}

bool -[UICollectionView _allowsSelectionDuringEditing](void * self, void * _cmd) {
    rax = (0x800000000000 & self->_collectionViewFlags) >> 0x2f;
    return rax;
}

void -[UICollectionView _setAllowsMultipleSelectionDuringEditing:](void * self, void * _cmd, bool arg2) {
    rdx = arg2;
    r12 = self;
    var_30 = *___stack_chk_guard;
    rax = *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rcx = r12->_collectionViewFlags;
    if ((((rcx & 0x1000000000000) >> 0x30 ^ rdx) & 0xff) == 0x1) {
            if (rdx != 0x0) {
                    r12->_collectionViewFlags = rcx | 0x1000000000000;
                    *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rax;
                    [r12 _setAllowsSelectionDuringEditing:0x1];
            }
            else {
                    if (([r12->_indexPathsForSelectedItems count] >= 0x2) && ([r12 _isEditing] != 0x0)) {
                            r13 = objc_unsafeClaimAutoreleasedReturnValue([r12->_indexPathsForSelectedItems anyObject]);
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            var_F8 = r12;
                            rax = [r12->_indexPathsForSelectedItems copy];
                            var_100 = rax;
                            rbx = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            if (rbx != 0x0) {
                                    r14 = *var_E0;
                                    do {
                                            r15 = 0x0;
                                            do {
                                                    if (*var_E0 != r14) {
                                                            objc_enumerationMutation(var_100);
                                                    }
                                                    if (*(var_E8 + r15 * 0x8) != r13) {
                                                            [var_F8 deselectItemAtIndexPath:rdx animated:0x0];
                                                    }
                                                    r15 = r15 + 0x1;
                                            } while (r15 < rbx);
                                            rdx = var_F0;
                                            rbx = [var_100 countByEnumeratingWithState:rdx objects:var_B0 count:0x10];
                                    } while (rbx != 0x0);
                            }
                            [var_100 release];
                            r12 = var_F8;
                    }
                    *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) = *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) & 0xfe;
            }
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

bool -[UICollectionView _allowsMultipleSelectionDuringEditing](void * self, void * _cmd) {
    rax = (0x1000000000000 & self->_collectionViewFlags) >> 0x30;
    return rax;
}

bool -[UICollectionView _allowsEffectiveSelection](void * self, void * _cmd) {
    rbx = self;
    if ([self _isEditing] == 0x0) {
            rax = 0x1;
            if ([rbx allowsSelection] == 0x0) {
                    if ([rbx _isEditing] != 0x0) {
                            rax = [rbx _allowsSelectionDuringEditing];
                    }
                    else {
                            rax = 0x0;
                    }
            }
    }
    else {
            if ([rbx _isEditing] != 0x0) {
                    rax = [rbx _allowsSelectionDuringEditing];
            }
            else {
                    rax = 0x0;
            }
    }
    return rax;
}


bool -[UICollectionView _allowsEffectiveMultipleSelection](void * self, void * _cmd) {
    rbx = self;
    if ([self _isEditing] == 0x0) {
            rax = 0x1;
            if ([rbx allowsMultipleSelection] == 0x0) {
                    if ([rbx _isEditing] != 0x0) {
                            rax = [rbx _allowsMultipleSelectionDuringEditing];
                    }
                    else {
                            rax = 0x0;
                    }
            }
    }
    else {
            if ([rbx _isEditing] != 0x0) {
                    rax = [rbx _allowsMultipleSelectionDuringEditing];
            }
            else {
                    rax = 0x0;
            }
    }
    return rax;
}

void -[UICollectionView _setReorderFeedbackBehavior:](void * self, void * _cmd, void * arg2) {
    r12 = _cmd;
    r13 = self;
    rbx = [arg2 retain];
    if ([r13->_reorderFeedbackBehavior isActive] != 0x0) {
            var_30 = r12;
            var_38 = rbx;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r12 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_30 object:r13 file:r12 lineNumber:0x4f1 description:@"Reorder feedback behavior should not be changed while active."];
            [r12 release];
            rdi = rbx;
            rbx = var_38;
            [rdi release];
    }
    rdi = r13->_reorderFeedbackBehavior;
    r13->_reorderFeedbackBehavior = rbx;
    [rdi release];
    return;
}

void * -[UICollectionView _reorderFeedbackBehavior](void * self, void * _cmd) {
    rax = objc_retainAutoreleaseReturnValue(self->_reorderFeedbackBehavior);
    return rax;
}

void -[UICollectionView _unhighlightItemAtIndexPath:animated:](void * self, void * _cmd, void * arg2, bool arg3) {
    [self _unhighlightItemAtIndexPath:arg2 animated:arg3 & 0xff notifyDelegate:0x0];
    return;
}

void -[UICollectionView _unhighlightItemAtIndexPath:animated:notifyDelegate:](void * self, void * _cmd, void * arg2, bool arg3, bool arg4) {
    r15 = arg4;
    r12 = arg3;
    r14 = self;
    rbx = [arg2 retain];
    if ((((rbx != 0x0) && ([rbx item] != 0x7fffffffffffffff)) && ([rbx section] != 0x7fffffffffffffff)) && ([r14->_indexPathsForHighlightedItems containsObject:rbx] != 0x0)) {
            [r14->_indexPathsForHighlightedItems removeObject:rbx];
            r13 = [[r14 cellForItemAtIndexPath:rbx] retain];
            rcx = r12 & 0xff;
            [r13 _setHighlighted:0x0 animated:rcx];
            [r13 release];
            if (r15 != 0x0) {
                    if ((r14->_collectionViewFlags & 0x4) != 0x0) {
                            r15 = [[r14 delegate] retain];
                            [r15 collectionView:r14 didUnhighlightItemAtIndexPath:rbx];
                            [r15 release];
                    }
            }
    }
    rdi = rbx;
    [rdi release];
    return;
}

bool -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:notifyDelegate:](void * self, void * _cmd, void * arg2, bool arg3, NSInteger arg4, bool arg5) {
    var_10C = arg5;
    r13 = arg4;
    r14 = arg3;
    r12 = arg2;
    r15 = self;
    if (([r12 item] == 0x7fffffffffffffff) || ([r12 section] == 0x7fffffffffffffff)) {
            r12 = 0x0;
    }
    if (([r15 _allowsEffectiveSelection] != 0x0) && ([r15->_indexPathsForHighlightedItems containsObject:r12] == 0x0)) {
            var_140 = [[r15 delegate] retain];
            if (r12 != 0x0) {
                    if (((var_10C != 0x0) && ((r15->_collectionViewFlags & 0x1) != 0x0)) && ([var_140 collectionView:r15 shouldHighlightItemAtIndexPath:r12] == 0x0)) {
                            r14 = 0x0;
                    }
                    else {
                            rbx = [[r15 cellForItemAtIndexPath:r12] retain];
                            r14 = r14 & 0xff;
                            [rbx _setHighlighted:0x1 animated:r14];
                            [rbx release];
                            [r15->_indexPathsForHighlightedItems addObject:r12];
                            if (r13 != 0x0) {
                                    [r15 scrollToItemAtIndexPath:r12 atScrollPosition:r13 animated:r14];
                            }
                            r14 = 0x1;
                            if (var_10C != 0x0) {
                                    if ((r15->_collectionViewFlags & 0x2) != 0x0) {
                                            [var_140 collectionView:r15 didHighlightItemAtIndexPath:r12];
                                    }
                            }
                    }
            }
            else {
                    intrinsic_movaps(var_C0, 0x0);
                    intrinsic_movaps(var_D0, 0x0);
                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                    rax = [r15->_indexPathsForHighlightedItems retain];
                    var_128 = rax;
                    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_F8 = rax;
                    if (rax != 0x0) {
                            var_118 = *var_E0;
                            var_11C = r14 & 0xff;
                            do {
                                    r13 = 0x0;
                                    do {
                                            if (*var_E0 != var_118) {
                                                    objc_enumerationMutation(var_128);
                                            }
                                            rbx = *(var_E8 + r13 * 0x8);
                                            r14 = r15;
                                            r15 = [[r15 cellForItemAtIndexPath:rbx] retain];
                                            [r15 _setHighlighted:0x0 animated:var_11C];
                                            rdi = r15;
                                            r15 = r14;
                                            [rdi release];
                                            if ((var_10C != 0x0) && ((r15->_collectionViewFlags & 0x4) != 0x0)) {
                                                    [var_140 collectionView:r15 didUnhighlightItemAtIndexPath:rbx];
                                            }
                                            r13 = r13 + 0x1;
                                    } while (r13 < var_F8);
                                    rax = [var_128 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                    var_F8 = rax;
                            } while (rax != 0x0);
                    }
                    [var_128 release];
                    [r15->_indexPathsForHighlightedItems removeAllObjects];
                    r14 = 0x0;
            }
            [var_140 release];
    }
    else {
            r14 = 0x0;
    }
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = r14;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

bool -[UICollectionView _highlightItemAtIndexPath:animated:scrollPosition:](void * self, void * _cmd, void * arg2, bool arg3, NSUInteger arg4) {
    rax = [self _highlightItemAtIndexPath:arg2 animated:arg3 & 0xff scrollPosition:arg4 notifyDelegate:0x0];
    return rax;
}

void -[UICollectionView _suspendReloads](void * self, void * _cmd) {
    self->_reloadingSuspendedCount = self->_reloadingSuspendedCount + 0x1;
    return;
}

void -[UICollectionView _resumeReloads](void * self, void * _cmd) {
    rdi = self;
    rdi->_reloadingSuspendedCount = rdi->_reloadingSuspendedCount - 0x1;
    if (rdi->_reloadingSuspendedCount == 0x0) {
            rcx = *(int8_t *)(rdi + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
            rdx = rdi->_collectionViewFlags;
            if (!(BIT_TEST(rdx, 0x2a))) {
                    if (BIT_TEST(rdx, 0x2b)) {
                            [rdi setNeedsLayout];
                    }
            }
            else {
                    rdi->_collectionViewFlags = rdx & 0xfffffbffffffffff;
                    *(int8_t *)(rdi + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx;
                    [rdi reloadData];
            }
    }
    return;
}

void -[UICollectionView _setNeedsVisibleCellsUpdate:withLayoutAttributes:](void * self, void * _cmd, bool arg2, bool arg3) {
    rdi = self;
    *(int8_t *)(rdi + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rdi + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rdi->_collectionViewFlags = 0xffffe7ffffffffff & rdi->_collectionViewFlags | ((rdi->_collectionViewFlags >> 0x2b | arg2 & 0xff) & 0x1) << 0x2b | ((rdi->_collectionViewFlags >> 0x2c | arg3 & 0xff) & 0x1) << 0x2c;
    rdx = ((rdi->_collectionViewFlags >> 0x2c | arg3 & 0xff) & 0x1) << 0x2c | ((rdi->_collectionViewFlags >> 0x2b | arg2 & 0xff) & 0x1) << 0x2b;
    if (rdx != 0x0) {
            [rdi setNeedsLayout];
    }
    return;
}

void -[UICollectionView reloadData](void * self, void * _cmd) {
    rbx = self;
    var_30 = *___stack_chk_guard;
    if (rbx->_reloadingSuspendedCount <= 0x0) goto loc_9618fd;

loc_9618d7:
    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    rbx->_collectionViewFlags = 0x40000000000 | rbx->_collectionViewFlags;
    goto loc_961edf;

loc_961edf:
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;

loc_9618fd:
    if (rbx->_focusedCell != 0x0) {
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) | 0x40;
    }
    r12 = _objc_msgSend;
    [rbx setNeedsFocusUpdate];
    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) | 0x10;
    [rbx _suspendReloads];
    if (rbx->_firstResponderView == 0x0) goto loc_9619ea;

loc_961951:
    r14 = [[rbx window] retain];
    r13 = [[r14 firstResponder] retain];
    [r13 resignFirstResponder];
    [r13 release];
    [r14 release];
    r12 = _objc_msgSend;
    if (rbx->_firstResponderView == 0x0) goto loc_9619ea;

loc_9619b5:
    if (*___stack_chk_guard == var_30) {
            rdi = rbx;
            [rdi _resumeReloads];
    }
    else {
            __stack_chk_fail();
    }
    return;

loc_9619ea:
    var_248 = rbx;
    rbx = [rbx retain];
    var_240 = rbx;
    var_138 = rbx;
    r14 = objc_retainBlock(__NSConcreteStackBlock);
    (*(r14 + 0x10))(r14, rbx->_visibleCellsDict);
    intrinsic_movaps(var_170, 0x0);
    intrinsic_movaps(var_180, 0x0);
    var_190 = intrinsic_movaps(var_190, 0x0);
    var_1A0 = intrinsic_movaps(var_1A0, 0x0);
    r13 = [(r12)(rbx->_visibleSupplementaryViewsDict, @selector(objectEnumerator)) retain];
    r15 = @selector(countByEnumeratingWithState:objects:count:);
    rdx = var_1A0;
    rbx = (r12)(r13, r15, rdx, var_B0, 0x10);
    if (rbx != 0x0) {
            r15 = *var_190;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_190 != r15) {
                                    objc_enumerationMutation(r13);
                            }
                            (*(r14 + 0x10))(r14, *(var_198 + r12 * 0x8));
                            r12 = r12 + 0x1;
                    } while (r12 < rbx);
                    rdx = var_1A0;
                    rbx = [r13 countByEnumeratingWithState:rdx objects:var_B0 count:0x10];
            } while (rbx != 0x0);
            r12 = _objc_msgSend;
            r15 = @selector(countByEnumeratingWithState:objects:count:);
    }
    [r13 release];
    intrinsic_movaps(var_1B0, 0x0);
    intrinsic_movaps(var_1C0, 0x0);
    var_1D0 = intrinsic_movaps(var_1D0, 0x0);
    var_1E0 = intrinsic_movaps(var_1E0, 0x0);
    r13 = [(r12)(var_240->_visibleDecorationViewsDict, @selector(objectEnumerator), rdx, var_240, 0x10) retain];
    r15 = (r12)(r13, r15, var_1E0, var_130, 0x10);
    if (r15 != 0x0) {
            rbx = *var_1D0;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_1D0 != rbx) {
                                    objc_enumerationMutation(r13);
                            }
                            (*(r14 + 0x10))(r14, *(var_1D8 + r12 * 0x8));
                            r12 = r12 + 0x1;
                    } while (r12 < r15);
                    r15 = [r13 countByEnumeratingWithState:var_1E0 objects:var_130 count:0x10];
            } while (r15 != 0x0);
    }
    [r13 release];
    [var_240->_indexPathsForSelectedItems removeAllObjects];
    [var_240->_indexPathsForHighlightedItems removeAllObjects];
    var_240->_pendingSelectionIndexPath = 0x0;
    [var_240->_pendingSelectionIndexPath release];
    var_240->_pendingDeselectionIndexPaths = 0x0;
    [var_240->_pendingDeselectionIndexPaths release];
    [var_240 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
    [var_240 _invalidateLayoutIfNecessaryForReload];
    var_240->_invalidatedItemIndexPaths = 0x0;
    [var_240->_invalidatedItemIndexPaths release];
    var_240->_invalidatedSupplementaryIndexPaths = 0x0;
    [var_240->_invalidatedSupplementaryIndexPaths release];
    var_240->_invalidatedDecorationIndexPaths = 0x0;
    [var_240->_invalidatedDecorationIndexPaths release];
    r15 = [var_240 retain];
    var_1E8 = r15;
    [r15 _invalidateWithBlock:__NSConcreteStackBlock];
    rbx = var_248;
    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) & 0xe7;
    rdx = r15->_focusedCellIndexPath;
    if ((rdx != 0x0) && ([r15 _indexPathIsValid:rdx] == 0x0)) {
            r15->_focusedCellIndexPath = 0x0;
            [r15->_focusedCellIndexPath release];
    }
    [r15 _resetPrefetchState];
    rsi = @selector(_resumeReloads);
    _objc_msgSend(r15, rsi, rdx, 0x1);
    if ((*(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x40) == 0x0) {
            COND = BIT_TEST(rbx->_collectionViewFlags, 0x27);
            if (!COND) {
                    rsi = @selector(_shouldPrefetchCells);
                    if (_objc_msgSend(r15, rsi) != 0x0) {
                            var_210 = [r15 retain];
                            rsi = __NSConcreteStackBlock;
                            dispatch_async(__dispatch_main_q, rsi);
                            [var_210 release];
                    }
            }
    }
    else {
            rsi = @selector(setNeedsLayout);
            _objc_msgSend(r15, rsi);
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) | 0x80;
    }
    [var_1E8 release];
    [r14 release];
    [var_138 release];
    goto loc_961edf;
}

int ___30-[UICollectionView reloadData]_block_invoke(int arg0, int arg1) {
    var_60 = [arg1 retain];
    r13 = [[NSMutableDictionary alloc] init];
    var_68 = [r13 retain];
    var_30 = [*(arg0 + 0x20) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [arg1 removeAllObjects];
    [arg1 addEntriesFromDictionary:r13];
    [var_60 release];
    [var_30 release];
    [r13 release];
    rax = [var_68 release];
    return rax;
}

void ___30-[UICollectionView reloadData]_block_invoke_2(int arg0, int arg1, int arg2) {
    r12 = arg2;
    r15 = arg1;
    r14 = arg0;
    if ([r12 _isInUpdateAnimation] != 0x0) {
            rdi = *(r14 + 0x20);
            rdx = r12;
            rcx = r15;
            [rdi setObject:rdx forKeyedSubscript:rcx];
    }
    else {
            rbx = [[r12 _layoutAttributes] retain];
            r15 = [rbx _isCell];
            [rbx release];
            rdi = *(r14 + 0x28);
            if (r15 != 0x0) {
                    rdx = r12;
                    [rdi _reuseCell:rdx notifyDidEndDisplaying:0x1];
            }
            else {
                    rdx = r12;
                    [rdi _reuseSupplementaryView:rdx];
            }
    }
    return;
}

int ___30-[UICollectionView reloadData]_block_invoke.756(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidate:0x0];
    return rax;
}

int ___30-[UICollectionView reloadData]_block_invoke.770(int arg0) {
    rdi = arg0;
    rbx = rdi;
    var_10 = *(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x18);
    var_18 = *(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x10);
    rsi = *(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x8);
    var_20 = rsi;
    var_28 = *(rbx + 0x20)->_visibleBounds;
    rdx = *(rbx + 0x20)->_visibleBounds;
    rax = CGRectGetWidth(rdi);
    xmm1 = intrinsic_xorpd(xmm1, xmm1);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 > 0x0) {
            rax = CGRectGetHeight(rdi);
            xmm0 = intrinsic_ucomisd(xmm0, *0xc4ff40);
            if (xmm0 > 0x0) {
                    CGRectGetWidth(rdi);
                    xmm0 = intrinsic_mulsd(xmm0, *0xc55210);
                    var_50 = intrinsic_movsd(var_50, xmm0);
                    CGRectGetHeight(rdi);
                    xmm1 = intrinsic_movsd(xmm1, *0xc55210);
                    xmm1 = intrinsic_mulsd(xmm1, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_50);
                    CGRectInset(var_48, rsi, rdx);
                    intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_xorpd(xmm1, xmm1);
                    rax = [*(rbx + 0x20) _computePrefetchCandidatesForVisibleBounds:0x1 futureVisibleBounds:rcx prefetchVector:r8 notifyDelegateIfNeeded:r9];
            }
    }
    return rax;
}

void -[UICollectionView prefetchCompleteForItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rdx = arg2;
    rdi = self;
    var_30 = *___stack_chk_guard;
    if (rdx != 0x0) {
            r12 = [rdx retain];
            rbx = [[NSArray arrayWithObjects:rdx count:0x1] retain];
            [rdi->_currentPrefetchingContext prefetchCompleteForItemAtIndexPath:rbx];
            [r12 release];
            [rbx release];
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _invalidateLayoutIfNecessaryForReload](void * self, void * _cmd) {
    rbx = [[[[self->_layout class] invalidationContextClass] alloc] init];
    [rbx _setInvalidateDataSourceCounts:0x1];
    [rbx _setInvalidateEverything:0x1];
    [rbx _setInitiatedFromReloadData:0x1];
    [self->_layout _invalidateLayoutUsingContext:rbx];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _setIsAncestorOfFirstResponder:](void * self, void * _cmd, bool arg2) {
    var_54 = arg2;
    var_48 = self;
    [[self super] _setIsAncestorOfFirstResponder:arg2 & 0xff];
    rbx = [[self window] retain];
    r14 = [[rbx firstResponder] retain];
    [rbx release];
    var_50 = 0x0;
    rbx = 0x0;
    if (r14 == 0x0) goto loc_9625fc;

loc_96251e:
    var_50 = 0x0;
    goto loc_96253d;

loc_96253d:
    if ([r14 isKindOfClass:[UIView class]] != 0x0) goto loc_96258a;

loc_96255a:
    rbx = [[r14 nextResponder] retain];
    [r14 release];
    COND = rbx != 0x0;
    r14 = rbx;
    rbx = 0x0;
    if (COND) goto loc_96253d;

loc_9625fc:
    if (var_54 == 0x0) goto loc_9626e1;

loc_962607:
    var_40 = rbx;
    r13 = [rbx retain];
    rbx = var_48;
    rbx->_firstResponderView = r13;
    [rbx->_firstResponderView release];
    rdx = [UICollectionReusableView class];
    if ([r13 isKindOfClass:rdx] == 0x0) goto loc_9627b5;

loc_962659:
    r12 = [[r13 _layoutAttributes] retain];
    rax = [r12 _isCell];
    if (rax != 0x0) {
            rbx->_firstResponderViewType = 0x1;
            rsi = @selector(indexPathForCell:);
            rdx = r13;
            rax = _objc_msgSend(rbx, rsi);
            rax = [rax retain];
            rcx = *_OBJC_IVAR_$_UICollectionView._firstResponderIndexPath;
            *(rbx + rcx) = rax;
            [*(rbx + rcx) release];
            rdi = rbx->_firstResponderViewKind;
            rbx->_firstResponderViewKind = 0x0;
    }
    else {
            rbx->_firstResponderViewType = 0x2;
            rdx = r13;
            rbx->_firstResponderIndexPath = [[rbx indexPathForSupplementaryView:rdx] retain];
            r14 = rbx;
            [rbx->_firstResponderIndexPath release];
            rbx = [[r13 _layoutAttributes] retain];
            rsi = @selector(_elementKind);
            rax = _objc_msgSend(rbx, rsi);
            rax = [rax retain];
            rcx = *_OBJC_IVAR_$_UICollectionView._firstResponderViewKind;
            rdi = *(r14 + rcx);
            *(r14 + rcx) = rax;
            [rdi release];
            rdi = rbx;
    }
    [rdi release];
    rdi = r12;
    goto loc_962894;

loc_962894:
    [rdi release];
    goto loc_96289a;

loc_96289a:
    [var_50 release];
    [var_40 release];
    return;

loc_9627b5:
    rbx->_firstResponderViewType = 0x0;
    rbx->_firstResponderIndexPath = 0x0;
    [rbx->_firstResponderIndexPath release];
    rbx->_firstResponderViewKind = 0x0;
    [rbx->_firstResponderViewKind release];
    goto loc_96289a;

loc_9626e1:
    var_40 = rbx;
    rbx = var_48;
    if (rbx->_firstResponderViewType == 0x0) goto loc_9627fc;

loc_962702:
    r12 = [rbx->_firstResponderView retain];
    rbx->_firstResponderView = 0x0;
    [r12 release];
    r13 = [[rbx _visibleViews] retain];
    if ((([r13 containsObject:r12] == 0x0) && (r12 != rbx->_newContentView)) && ([UIView _isAddingResponderToTree] == 0x0)) {
            r14 = [r12 _isInUpdateAnimation];
            [r13 release];
            if (r14 == 0x0) {
                    rax = rbx->_firstResponderViewType;
                    if (rax != 0x2) {
                            if (rax == 0x1) {
                                    [rbx _reuseCell:r12 notifyDidEndDisplaying:0x1];
                            }
                    }
                    else {
                            [rbx _reuseSupplementaryView:r12];
                    }
            }
    }
    else {
            [r13 release];
    }
    rbx->_firstResponderIndexPath = 0x0;
    [rbx->_firstResponderIndexPath release];
    rbx->_firstResponderViewType = 0x0;
    [r12 release];
    goto loc_96289a;

loc_9627fc:
    rdi = rbx->_firstResponderView;
    rbx->_firstResponderView = 0x0;
    goto loc_962894;

loc_96258a:
    rax = [r14 retain];
    var_50 = rax;
    rbx = 0x0;
    if (rax == 0x0) goto loc_9625fc;

loc_96259e:
    r14 = var_50;
    goto loc_9625a9;

loc_9625a9:
    rbx = [[r14 superview] retain];
    [rbx release];
    if (rbx == var_48) goto loc_9625f9;

loc_9625cf:
    rbx = [[r14 superview] retain];
    [r14 release];
    r14 = rbx;
    if (rbx != 0x0) goto loc_9625a9;
    goto loc_9625fc;

loc_9625f9:
    rbx = r14;
    goto loc_9625fc;
}

void -[UICollectionView _addControlledSubview:atZIndex:](void * self, void * _cmd, void * arg2, NSInteger arg3) {
    r12 = arg3;
    var_70 = self;
    rbx = [arg2 retain];
    var_90 = rbx;
    self->_newContentView = rbx;
    [self->_newContentView release];
    if ([rbx superview] != self) goto loc_9629d1;

loc_96298c:
    rbx = [[var_90 _layoutAttributes] retain];
    r14 = [rbx zIndex];
    [rbx release];
    if (r14 == r12) goto loc_962bff;

loc_9629d1:
    var_98 = r12;
    var_40 = 0x0;
    var_60 = 0x0;
    var_78 = [UICollectionReusableView class];
    r12 = [[var_70 _subviewAtIndex:0x0] retain];
    var_88 = 0x0;
    var_B0 = 0x0;
    if (r12 == 0x0) goto loc_962b73;

loc_962a6e:
    var_B0 = 0x0;
    r13 = 0x0;
    var_88 = 0x0;
    goto loc_962ab1;

loc_962ab1:
    rcx = var_40;
    if ([r12 isKindOfClass:var_78] == 0x0) goto loc_962b30;

loc_962ac9:
    *(int8_t *)(rcx + 0x18) = 0x1;
    rbx = [[r12 _layoutAttributes] retain];
    r14 = [rbx zIndex];
    [rbx release];
    if (r14 > var_98) goto loc_962b6c;

loc_962b0d:
    *(var_60 + 0x18) = r13;
    rax = 0x1;
    if (r12 != var_90) {
            rax = var_88;
    }
    var_88 = rax;
    goto loc_962b36;

loc_962b36:
    r13 = r13 + 0x1;
    rbx = [[var_70 _subviewAtIndex:r13] retain];
    [r12 release];
    r12 = rbx;
    if (rbx != 0x0) goto loc_962ab1;

loc_962b73:
    rcx = *(var_60 + 0x18);
    if (rcx >= 0x0) {
            [var_70 insertSubview:var_90 atIndex:rcx + (!var_88 & 0x1 & 0xff)];
    }
    else {
            [var_70 _addContentSubview:var_90 atBack:0x1];
    }
    [var_B0 release];
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    goto loc_962bff;

loc_962bff:
    [var_90 _setHiddenForReuse:0x0];
    var_70->_newContentView = 0x0;
    [var_70->_newContentView release];
    return;

loc_962b6c:
    var_B0 = r12;
    goto loc_962b73;

loc_962b30:
    if (*(int8_t *)(rcx + 0x18) != 0x0) goto loc_962b6c;
}

bool -[UICollectionView _shouldScrollToContentBeginningInRightToLeft](void * self, void * _cmd) {
    rax = [self->_layout _shouldScrollToContentBeginningInRightToLeft];
    return rax;
}

void -[UICollectionView setSemanticContentAttribute:](void * self, void * _cmd, NSInteger arg2) {
    r13 = arg2;
    r15 = self;
    var_30 = *___stack_chk_guard;
    r14 = [self semanticContentAttribute];
    [[r15 super] setSemanticContentAttribute:r13];
    if (r14 != r13) {
            intrinsic_movaps(var_150, 0x0);
            intrinsic_movaps(var_160, 0x0);
            var_170 = intrinsic_movaps(var_170, 0x0);
            var_180 = intrinsic_movaps(var_180, 0x0);
            rax = [r15 visibleCells];
            rax = [rax retain];
            var_1C8 = rax;
            r12 = @selector(countByEnumeratingWithState:objects:count:);
            rdx = var_180;
            rcx = var_B0;
            rbx = _objc_msgSend(rax, r12);
            if (rbx != 0x0) {
                    var_1D8 = r15;
                    r15 = *var_170;
                    do {
                            r12 = 0x0;
                            do {
                                    if (*var_170 != r15) {
                                            objc_enumerationMutation(var_1C8);
                                    }
                                    [*(var_178 + r12 * 0x8) setSemanticContentAttribute:r13];
                                    r12 = r12 + 0x1;
                            } while (r12 < rbx);
                            r12 = @selector(countByEnumeratingWithState:objects:count:);
                            rdx = var_180;
                            rcx = var_B0;
                            rbx = _objc_msgSend(var_1C8, r12);
                    } while (rbx != 0x0);
                    r15 = var_1D8;
            }
            var_1D8 = r15;
            [var_1C8 release];
            intrinsic_movaps(var_190, 0x0);
            intrinsic_movaps(var_1A0, 0x0);
            var_1B0 = intrinsic_movaps(var_1B0, 0x0);
            var_1C0 = intrinsic_movaps(var_1C0, 0x0);
            rax = [r15 _visibleViews];
            rax = [rax retain];
            var_1C8 = rax;
            rbx = _objc_msgSend(rax, r12, var_1C0, var_130, 0x10);
            if (rbx != 0x0) {
                    r15 = *var_1B0;
                    do {
                            r12 = 0x0;
                            do {
                                    if (*var_1B0 != r15) {
                                            objc_enumerationMutation(var_1C8);
                                    }
                                    [*(var_1B8 + r12 * 0x8) setSemanticContentAttribute:r13];
                                    r12 = r12 + 0x1;
                            } while (r12 < rbx);
                            rbx = [var_1C8 countByEnumeratingWithState:var_1C0 objects:var_130 count:0x10];
                    } while (rbx != 0x0);
            }
            [var_1C8 release];
            r12 = var_1D8;
            r14 = [r12->_layout retain];
            rbx = [r12 retain];
            if (((rbx != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(rbx + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
                    if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                            rdx = 0x1;
                    }
                    else {
                            rdx = 0x0;
                    }
                    [rbx _setHasMirrorTransform:rdx];
            }
            [rbx release];
            [r14 release];
            [r12 reloadData];
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView setBounds:](void * self, void * _cmd, struct CGRect arg2) {
    rdx = arg2;
    rbx = self;
    [var_48 bounds];
    if (CGRectEqualToRect(var_48, rbx) == 0x0) {
            r12 = arg_0;
            if (!(BIT_TEST(rbx->_collectionViewFlags, 0x32))) {
                    r15 = [rbx->_collectionViewData layoutIsPrepared];
                    if (r15 != 0x0) {
                            r13 = 0x0;
                            if ([rbx->_layout shouldInvalidateLayoutForBoundsChange:rdx, rcx] != 0x0) {
                                    r13 = [[rbx->_layout invalidationContextForBoundsChange:rdx, rcx] retain];
                                    r14 = 0x1;
                            }
                            else {
                                    r14 = 0x0;
                            }
                    }
                    else {
                            r13 = 0x0;
                            r14 = 0x0;
                    }
                    if (!(BIT_TEST(rbx->_collectionViewFlags, 0x3b))) {
                            *(rbx + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x18) = var_30;
                            *(rbx + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x10) = var_38;
                            *(rbx + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x8) = var_40;
                            rbx->_preRotationBounds = var_48;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) | 0x8;
                    }
                    [[rbx super] setBounds:rdx, rcx];
                    if (r14 != 0x0) {
                            [rbx->_layout _invalidateLayoutUsingContext:r13];
                            rax = 0x1;
                            if (r15 != 0x0) {
                                    r15 = [[r13 _invalidatedSupplementaryViews] retain];
                                    [rbx _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:(r15 == 0x0 ? 0x1 : 0x0) & 0xff];
                                    [r15 release];
                            }
                            else {
                                    [rbx _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:rax & 0xff];
                            }
                    }
                    else {
                            rax = r15 ^ 0x1;
                            [rbx _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:rax & 0xff];
                    }
                    xmm0 = intrinsic_movsd(xmm0, var_38);
                    xmm0 = intrinsic_ucomisd(xmm0, *(r12 + 0x10));
                    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                            xmm0 = intrinsic_movsd(xmm0, var_30);
                            xmm0 = intrinsic_ucomisd(xmm0, *(r12 + 0x18));
                            if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
                                    [rbx _updateDefaultLayoutMargins];
                            }
                    }
                    else {
                            [rbx _updateDefaultLayoutMargins];
                    }
                    [r13 release];
            }
            else {
                    [[rbx super] setBounds:rdx, rcx];
            }
    }
    return;
}

void -[UICollectionView setFrame:](void * self, void * _cmd, struct CGRect arg2) {
    r15 = self;
    [var_48 frame];
    if (CGRectEqualToRect(var_48, r15) == 0x0) {
            rdx = @selector(frame);
            rbx = arg_0;
            objc_msgSend_stret(var_68, r15, rdx);
            [var_88 bounds];
            var_A0 = var_80;
            var_A8 = var_88;
            var_90 = *(rbx + 0x18);
            var_98 = *(rbx + 0x10);
            r13 = CGRectEqualToRect(var_88, r15);
            rax = [r15->_collectionViewData layoutIsPrepared];
            r12 = rax ^ 0x1;
            rcx = 0x0;
            r14 = 0x0;
            if (r13 == 0x0) {
                    var_149 = rax;
                    if (r12 == 0x0) {
                            rax = [r15->_layout shouldInvalidateLayoutForBoundsChange:rdx, rcx];
                            rcx = 0x0;
                            if (rax != 0x0) {
                                    rcx = [[r15->_layout invalidationContextForBoundsChange:rdx, rcx] retain];
                                    r14 = 0x1;
                            }
                            else {
                                    r14 = 0x0;
                            }
                            rbx = arg_0;
                    }
            }
            else {
                    var_149 = rax;
            }
            var_148 = rcx;
            if (!(BIT_TEST(r15->_collectionViewFlags, 0x3b))) {
                    *(r15 + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x18) = var_70;
                    *(r15 + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x10) = var_78;
                    *(r15 + *_OBJC_IVAR_$_UICollectionView._preRotationBounds + 0x8) = var_80;
                    r15->_preRotationBounds = var_88;
                    *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) | 0x8;
            }
            [[r15 super] setFrame:rdx, rcx];
            if (r13 == 0x0) {
                    r13 = rbx;
                    if (r14 != 0x0) {
                            rsi = r15->_collectionViewData;
                            if (rsi != 0x0) {
                                    [var_E0 collectionViewContentRect];
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    var_D0 = intrinsic_movapd(var_D0, xmm0);
                                    intrinsic_movapd(var_E0, xmm0);
                            }
                            var_148 = var_148;
                            [r15->_layout _invalidateLayoutUsingContext:rdx];
                            rsi = r15->_collectionViewData;
                            if (rsi != 0x0) {
                                    [var_100 collectionViewContentRect];
                                    xmm0 = intrinsic_movsd(xmm0, var_F0);
                                    xmm1 = intrinsic_movsd(xmm1, var_E8);
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    intrinsic_movapd(var_F0, xmm0);
                                    intrinsic_movapd(var_100, xmm0);
                                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            }
                            xmm2 = intrinsic_movsd(xmm2, var_D0);
                            intrinsic_movsd(xmm3, var_C8);
                            [r15 _contentOffsetForNewFrame:rdx oldFrame:rcx newContentSize:r8 andOldContentSize:r9, *r13, *(r13 + 0x8)];
                            [r15 setContentOffset:rdx];
                            [var_120 bounds];
                            CGRectGetMinX(var_120);
                            var_160 = intrinsic_movapd(var_160, xmm0);
                            CGRectGetMinX(var_120);
                            var_170 = intrinsic_movapd(var_170, xmm0);
                            [var_140 bounds];
                            CGRectGetMinY(var_140);
                            var_180 = intrinsic_movapd(var_180, xmm0);
                            CGRectGetMinY(var_140);
                            r15->_rotationBoundsOffset = intrinsic_movupd(r15->_rotationBoundsOffset, intrinsic_subpd(intrinsic_unpcklpd(intrinsic_movapd(xmm1, var_160), var_180), intrinsic_unpcklpd(intrinsic_movapd(xmm2, var_170), xmm0)));
                            if (var_149 != 0x0) {
                                    rbx = [[var_148 _invalidatedSupplementaryViews] retain];
                                    [r15 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:(rbx == 0x0 ? 0x1 : 0x0) & 0xff];
                                    [rbx release];
                            }
                            else {
                                    [r15 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:r12 & 0xff];
                            }
                    }
                    else {
                            [r15 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:r12 & 0xff];
                    }
                    rbx = r13;
                    xmm0 = intrinsic_movsd(xmm0, var_78);
                    xmm0 = intrinsic_ucomisd(xmm0, var_98);
                    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                            xmm0 = intrinsic_movsd(xmm0, var_70);
                            xmm0 = intrinsic_ucomisd(xmm0, var_90);
                            if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
                                    [r15 _updateDefaultLayoutMargins];
                            }
                    }
                    else {
                            [r15 _updateDefaultLayoutMargins];
                    }
            }
            xmm0 = intrinsic_movsd(xmm0, var_58);
            xmm0 = intrinsic_ucomisd(xmm0, *(rbx + 0x10));
            if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                    xmm0 = intrinsic_movsd(xmm0, var_50);
                    xmm0 = intrinsic_ucomisd(xmm0, *(rbx + 0x18));
                    if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
                            if ((*(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x1) != 0x0) {
                                    rax = [UIView _isInAnimationBlock];
                                    [r15 _scrollFirstResponderCellToVisible:(rax ^ 0x1) & 0xff];
                            }
                    }
            }
            else {
                    if ((*(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x1) != 0x0) {
                            rax = [UIView _isInAnimationBlock];
                            [r15 _scrollFirstResponderCellToVisible:(rax ^ 0x1) & 0xff];
                    }
            }
            [var_148 release];
    }
    return;
}

void -[UICollectionView _updateDefaultLayoutMargins](void * self, void * _cmd) {
    r14 = self;
    rbx = [[self collectionViewLayout] retain];
    if (rbx != 0x0) {
            [var_30 _preferredLayoutMargins];
    }
    else {
            var_20 = intrinsic_movaps(var_20, 0x0);
            var_30 = intrinsic_movaps(var_30, 0x0);
    }
    [rbx release];
    xmm0 = intrinsic_movddup(0x0, *_UICollectionViewLayoutAutomaticDimension);
    xmm1 = intrinsic_movapd(xmm1, var_30);
    xmm2 = intrinsic_movapd(xmm2, var_20);
    xmm3 = intrinsic_movapd(xmm3, xmm1);
    asm { cmpneqpd   xmm3, xmm0 };
    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc501a0);
    xmm1 = intrinsic_andpd(xmm1, xmm3);
    xmm3 = intrinsic_andnpd(xmm3, xmm4);
    xmm3 = intrinsic_orpd(xmm3, xmm1);
    asm { cmpneqpd   xmm0, xmm2 };
    xmm2 = intrinsic_andpd(xmm2, xmm0);
    xmm0 = intrinsic_andnpd(xmm0, xmm4);
    xmm0 = intrinsic_orpd(xmm0, xmm2);
    var_50 = intrinsic_movapd(var_50, xmm3);
    intrinsic_movapd(var_40, xmm0);
    [r14 _setDefaultLayoutMargins:rdx, rcx];
    return;
}

void -[UICollectionView _setDefaultLayoutMargins:](void * self, void * _cmd, struct UIEdgeInsets arg2) {
    rbx = self;
    rax = arg_0;
    rdx = *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins;
    rcx = rbx + rdx;
    xmm0 = intrinsic_movsd(xmm0, arg_8, rdx, rcx);
    xmm0 = intrinsic_ucomisd(xmm0, *(rbx + rdx + 0x8));
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm0 = intrinsic_movsd(xmm0, *rax);
            xmm0 = intrinsic_ucomisd(xmm0, *rcx);
            if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                    rdx = *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins;
                    xmm0 = intrinsic_movsd(xmm0, *(rax + 0x18));
                    xmm0 = intrinsic_ucomisd(xmm0, *(rbx + rdx + 0x18));
                    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                            rdx = *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins;
                            xmm0 = intrinsic_movsd(xmm0, *(rax + 0x10));
                            xmm0 = intrinsic_ucomisd(xmm0, *(rbx + rdx + 0x10));
                            if (xmm0 == 0x0) {
                                    if (!CPU_FLAGS & NP) {
                                            *(rcx + 0x18) = *(rax + 0x18);
                                            *(rcx + 0x10) = *(rax + 0x10);
                                            *(rcx + 0x8) = *(rax + 0x8);
                                            *rcx = *rax;
                                            r15 = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                                            if ((r15 & 0x10) == 0x0) {
                                                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 | 0x20;
                                                    [rbx setLayoutMargins:rdx, rcx];
                                                    rcx = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                                                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx & 0xdf | r15 & 0x20;
                                            }
                                    }
                            }
                            else {
                                    *(rcx + 0x18) = *(rax + 0x18);
                                    *(rcx + 0x10) = *(rax + 0x10);
                                    *(rcx + 0x8) = *(rax + 0x8);
                                    *rcx = *rax;
                                    r15 = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                                    if ((r15 & 0x10) == 0x0) {
                                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 | 0x20;
                                            [rbx setLayoutMargins:rdx, rcx];
                                            rcx = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx & 0xdf | r15 & 0x20;
                                    }
                            }
                    }
                    else {
                            *(rcx + 0x18) = *(rax + 0x18);
                            *(rcx + 0x10) = *(rax + 0x10);
                            *(rcx + 0x8) = *(rax + 0x8);
                            *rcx = *rax;
                            r15 = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                            if ((r15 & 0x10) == 0x0) {
                                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 | 0x20;
                                    [rbx setLayoutMargins:rdx, rcx];
                                    rcx = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx & 0xdf | r15 & 0x20;
                            }
                    }
            }
            else {
                    *(rcx + 0x18) = *(rax + 0x18);
                    *(rcx + 0x10) = *(rax + 0x10);
                    *(rcx + 0x8) = *(rax + 0x8);
                    *rcx = *rax;
                    r15 = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                    if ((r15 & 0x10) == 0x0) {
                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 | 0x20;
                            [rbx setLayoutMargins:rdx, rcx];
                            rcx = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx & 0xdf | r15 & 0x20;
                    }
            }
    }
    else {
            *(rcx + 0x18) = *(rax + 0x18);
            *(rcx + 0x10) = *(rax + 0x10);
            *(rcx + 0x8) = *(rax + 0x8);
            *rcx = *rax;
            r15 = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
            if ((r15 & 0x10) == 0x0) {
                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = r15 | 0x20;
                    [rbx setLayoutMargins:rdx, rcx];
                    rcx = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx & 0xdf | r15 & 0x20;
            }
    }
    return;
}

void -[UICollectionView setLayoutMargins:](void * self, void * _cmd, struct UIEdgeInsets arg2) {
    rdx = arg2;
    rbx = self;
    r15 = arg_0;
    [var_38 _rawLayoutMargins];
    xmm0 = intrinsic_movsd(xmm0, arg_8);
    xmm0 = intrinsic_ucomisd(xmm0, var_30);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm0 = intrinsic_movsd(xmm0, *r15);
            xmm0 = intrinsic_ucomisd(xmm0, var_38);
            if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                    xmm0 = intrinsic_movsd(xmm0, *(r15 + 0x18));
                    xmm0 = intrinsic_ucomisd(xmm0, var_20);
                    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                            xmm0 = intrinsic_movsd(xmm0, *(r15 + 0x10));
                            xmm0 = intrinsic_ucomisd(xmm0, var_28);
                            if (xmm0 == 0x0) {
                                    if (!CPU_FLAGS & NP) {
                                            [var_58 layoutMargins];
                                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = !(*(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) >> 0x1) & 0x10 | *(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                                            [[rbx super] setLayoutMargins:rdx, rcx];
                                            [var_88 layoutMargins];
                                    }
                            }
                            else {
                                    [var_58 layoutMargins];
                                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = !(*(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) >> 0x1) & 0x10 | *(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                                    [[rbx super] setLayoutMargins:rdx, rcx];
                                    [var_88 layoutMargins];
                            }
                    }
                    else {
                            [var_58 layoutMargins];
                            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = !(*(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) >> 0x1) & 0x10 | *(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            [[rbx super] setLayoutMargins:rdx, rcx];
                            [var_88 layoutMargins];
                    }
            }
            else {
                    [var_58 layoutMargins];
                    rbx->_collectionViewFlags = rbx->_collectionViewFlags;
                    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = !(*(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) >> 0x1) & 0x10 | *(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                    [[rbx super] setLayoutMargins:rdx, rcx];
                    [var_88 layoutMargins];
            }
    }
    else {
            [var_58 layoutMargins];
            rbx->_collectionViewFlags = rbx->_collectionViewFlags;
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = !(*(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) >> 0x1) & 0x10 | *(int32_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            [[rbx super] setLayoutMargins:rdx, rcx];
            [var_88 layoutMargins];
    }
    return;
}

void -[UICollectionView setScrollEnabled:](void * self, void * _cmd, bool arg2) {
    rbx = self;
    [[rbx super] setScrollEnabled:arg2 & 0xff];
    if ((*(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x8) == 0x0) goto .l1;

loc_963c14:
    if ([rbx isScrollEnabled] == 0x0) goto loc_963c63;

loc_963c28:
    [rbx _unregisterForGeometryChanges];
    if (rbx->_containerScrollViewVisitationCount <= 0x0) goto .l1;

loc_963c46:
    [rbx _resetContainerScrollViewVisitationCount];
    rsi = @selector(_removeAnyAncestorScrollViewNotifications);
    goto loc_963c7e;

loc_963c7e:
    _objc_msgSend(rbx, rsi);
    return;

.l1:
    return;

loc_963c63:
    [rbx _updateContainerScrollViewsForNotifications];
    rsi = @selector(_registerForGeometryChangesIfInSupeview);
    goto loc_963c7e;
}

struct CGSize -[UICollectionView intrinsicContentSize](void * self, void * _cmd) {
    rbx = self;
    if (((*(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x8) != 0x0) && ([rbx _hasContainerScrollViewsAndScrollingDisabled] != 0x0)) {
            rdi = rbx->_layout;
            rax = [rdi collectionViewContentSize];
    }
    else {
            rax = [[rbx super] intrinsicContentSize];
    }
    return rax;
}

void -[UICollectionView _registerForGeometryChangesIfInSupeview](void * self, void * _cmd) {
    r14 = self;
    rbx = [[self superview] retain];
    [rbx release];
    if (rbx != 0x0) {
            rdi = r14;
            [rdi _registerForGeometryChanges];
    }
    return;
}

void -[UICollectionView _updateContainerScrollViewsForNotifications](void * self, void * _cmd) {
    r15 = self;
    [self _resetContainerScrollViewVisitationCount];
    rbx = [[r15 superview] retain];
    [rbx release];
    if (rbx != 0x0) {
            r12 = [_UIViewBlockVisitor alloc];
            rbx = [r15 retain];
            var_30 = rbx;
            r15 = [r12 initWithTraversalDirection:0x1 visitorBlock:__NSConcreteStackBlock];
            rbx = [[rbx superview] retain];
            [rbx _receiveVisitor:r15];
            [rbx release];
            [r15 release];
            [var_30 release];
    }
    return;
}

int ___63-[UICollectionView _updateContainerScrollViewsForNotifications]_block_invoke(int arg0, int arg1) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx isKindOfClass:[UIScrollView class]] != 0x0) {
            [*(r14 + 0x20) _addContainerScrollViewForNotifications:rbx];
    }
    [rbx release];
    return 0x1;
}

void -[UICollectionView _removeAnyAncestorScrollViewNotifications](void * self, void * _cmd) {
    r14 = [_UIViewBlockVisitor alloc];
    rbx = [self retain];
    var_20 = rbx;
    r14 = [r14 initWithTraversalDirection:0x1 visitorBlock:__NSConcreteStackBlock];
    rbx = [[rbx superview] retain];
    [rbx _receiveVisitor:r14];
    [rbx release];
    [r14 release];
    [var_20 release];
    return;
}

int ___61-[UICollectionView _removeAnyAncestorScrollViewNotifications]_block_invoke(int arg0, int arg1) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx isKindOfClass:[UIScrollView class]] != 0x0) {
            [rbx _removeScrollNotificationView:*(r14 + 0x20)];
    }
    [rbx release];
    return 0x1;
}

void -[UICollectionView _resetContainerScrollViewVisitationCount](void * self, void * _cmd) {
    self->_containerScrollViewVisitationCount = 0x0;
    return;
}

void -[UICollectionView _didMoveFromWindow:toWindow:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = arg3;
    r15 = self;
    rbx = [arg2 retain];
    [[r15 super] _didMoveFromWindow:rbx toWindow:r14];
    [rbx release];
    if ((*(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x8) != 0x0) {
            rax = [r15 isScrollEnabled];
            if (r14 != 0x0) {
                    rax = rax ^ 0x1;
                    if (rax != 0x0) {
                            [r15 _updateContainerScrollViewsForNotifications];
                            [r15 _registerForGeometryChangesIfInSupeview];
                    }
            }
            if (r14 == 0x0) {
                    [r15 _unregisterForGeometryChanges];
                    [r15 _resetContainerScrollViewVisitationCount];
            }
    }
    return;
}

void -[UICollectionView _geometryChanges:forAncestor:](void * self, void * _cmd, void * arg2, void * arg3) {
    var_30 = self;
    r14 = [arg2 retain];
    r15 = [arg3 retain];
    if (r15 != 0x0) {
            rbx = [[r14 objectForKeyedSubscript:@"_UIGeometryChangeHasNewSuperview"] retain];
            r13 = [rbx boolValue];
            [rbx release];
            if (r13 != 0x0) {
                    rbx = [[r14 objectForKeyedSubscript:@"_UIGeometryChangePreviousSuperview"] retain];
                    rdx = [UIScrollView class];
                    if ([rbx isKindOfClass:rdx] != 0x0) {
                            rdx = rbx;
                            [var_30 _removeContainerScrollViewForNotifications:rdx];
                    }
                    var_38 = rbx;
                    r13 = [r15 retain];
                    if ([r13 isKindOfClass:[UIScrollView class]] != 0x0) {
                            [var_30 _addContainerScrollViewForNotifications:r13];
                    }
                    [r13 release];
                    [var_38 release];
            }
    }
    [r15 release];
    rdi = r14;
    [rdi release];
    return;
}

bool -[UICollectionView _hasContainerScrollViewsAndScrollingDisabled](void * self, void * _cmd) {
    rdi = self;
    if (rdi->_containerScrollViewVisitationCount > 0x0) {
            stack[2047] = rbp;
            rax = [rdi isScrollEnabled];
            rax = rax ^ 0x1;
    }
    else {
            rax = 0x0;
    }
    return rax;
}

void -[UICollectionView _didScroll](void * self, void * _cmd) {
    rbx = self;
    if ([self _hasContainerScrollViewsAndScrollingDisabled] != 0x0) {
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = 0x80000000000 | rbx->_collectionViewFlags;
            rdi = rbx;
            [rdi setNeedsLayout];
    }
    return;
}

void -[UICollectionView _removeContainerScrollViewForNotifications:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    [arg2 _removeScrollNotificationView:rbx];
    rcx = rbx->_containerScrollViewVisitationCount;
    if (rcx > 0x0) {
            rbx->_containerScrollViewVisitationCount = rcx - 0x1;
    }
    return;
}

void -[UICollectionView _addContainerScrollViewForNotifications:](void * self, void * _cmd, void * arg2) {
    [arg2 _addScrollNotificationView:self];
    self->_containerScrollViewVisitationCount = self->_containerScrollViewVisitationCount + 0x1;
    return;
}

struct CGRect -[UICollectionView _visibleBounds](void * self, void * _cmd) {
    r13 = _cmd;
    r14 = self;
    [var_48 bounds];
    rsi = @selector(window);
    rdi = r13;
    r15 = _objc_msgSend(rdi, rsi);
    if ((*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x8) != 0x0) {
            rsi = @selector(_hasContainerScrollViewsAndScrollingDisabled);
            rdi = r13;
            rax = _objc_msgSend(rdi, rsi);
            if ((r15 != 0x0) && (rax != 0x0)) {
                    rsi = @selector(superview);
                    rbx = [_objc_msgSend(r13, rsi) retain];
                    rdi = rbx;
                    [rdi release];
                    COND = rbx == 0x0;
                    if (!COND) {
                            [var_88 frame];
                            rbx = [[r13 superview] retain];
                            [var_68 convertRect:r15 fromView:rbx, r8];
                            [rbx release];
                            rsi = r15;
                            [var_C8 bounds];
                            rdi = var_A8;
                            CGRectIntersection(rdi, rsi);
                            if (CGRectIsEmpty(rdi) == 0x0) {
                                    rdi = var_E8;
                                    rsi = r15;
                                    [rdi convertRect:rsi toView:r13, r8];
                                    var_30 = var_D0;
                                    var_38 = var_D8;
                                    var_40 = var_E0;
                                    var_48 = var_E8;
                            }
                    }
            }
    }
    if (!(BIT_TEST(r13->_collectionViewFlags, 0x38))) {
            rdi = @class(UIView);
            rsi = @selector(_isInAnimationBlock);
            if (_objc_msgSend(rdi, rsi) == 0x0) {
                    rsi = @selector(isRotating);
                    rdi = r15;
                    if (_objc_msgSend(rdi, rsi) != 0x0) {
                            if (CGRectIntersectsRect(rdi, rsi) != 0x0) {
                                    CGRectUnion(var_108, rsi);
                                    var_30 = var_F0;
                                    var_38 = var_F8;
                                    var_40 = var_100;
                                    var_48 = var_108;
                            }
                    }
            }
            else {
                    if (CGRectIntersectsRect(rdi, rsi) != 0x0) {
                            CGRectUnion(var_108, rsi);
                            var_30 = var_F0;
                            var_38 = var_F8;
                            var_40 = var_100;
                            var_48 = var_108;
                    }
            }
    }
    else {
            if (CGRectIntersectsRect(rdi, rsi) != 0x0) {
                    CGRectUnion(var_108, rsi);
                    var_30 = var_F0;
                    var_38 = var_F8;
                    var_40 = var_100;
                    var_48 = var_108;
            }
    }
    rbx = [[r15 _focusEngine] retain];
    if (rbx != 0x0) {
            [var_128 _visibleBoundsForScrollView:rbx, r13];
            CGRectUnion(var_148, rbx);
            var_30 = var_130;
            var_38 = var_138;
            var_40 = var_140;
            var_48 = var_148;
    }
    *(r14 + 0x18) = var_30;
    *(r14 + 0x10) = var_38;
    *(r14 + 0x8) = var_40;
    *r14 = var_48;
    [rbx release];
    rax = r14;
    return rax;
}

bool -[UICollectionView _isReordering](void * self, void * _cmd) {
    rax = [self->_reorderedItems count];
    rax = rax != 0x0 ? 0x1 : 0x0;
    return rax;
}

void * -[UICollectionView _preReorderingIndexPathForLayoutIndexPath:](void * self, void * _cmd, void * arg2) {
    var_100 = arg2;
    rbx = self;
    var_30 = *___stack_chk_guard;
    if ([rbx->_reorderedItems count] == 0x0) goto loc_964bdf;

loc_964830:
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [rbx->_reorderedItems retain];
    var_168 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_148 = rax;
    if (rax != 0x0) {
            var_180 = rbx;
            var_158 = *var_E0;
            var_170 = 0x0;
            r15 = _objc_msgSend;
            do {
                    rbx = 0x0;
                    do {
                            if (*var_E0 != var_158) {
                                    objc_enumerationMutation(var_168);
                            }
                            var_F8 = *(var_E8 + rbx * 0x8);
                            var_118 = rbx;
                            var_108 = (r15)(var_100, @selector(section));
                            rbx = [(r15)(*(var_E8 + rbx * 0x8), @selector(originalIndexPath)) retain];
                            var_110 = (r15)(rbx, @selector(section));
                            [rbx release];
                            r12 = var_F8;
                            var_120 = (r15)(var_100, @selector(section));
                            rbx = [(r15)(r12, @selector(targetIndexPath)) retain];
                            r13 = (r15)(rbx, @selector(section));
                            [rbx release];
                            if (var_108 == var_110) {
                                    var_140 = r13;
                                    var_160 = (r15)(var_100, @selector(item));
                                    r14 = [(r15)(r12, @selector(originalIndexPath)) retain];
                                    r13 = (r15)(r14, @selector(item));
                                    [r14 release];
                                    if (var_160 < r13) {
                                            r12 = var_120;
                                            r13 = var_140;
                                    }
                                    else {
                                            r14 = 0x1;
                                            r12 = var_120;
                                            r13 = var_140;
                                            if (r12 == r13) {
                                                    r13 = [(r15)(var_F8, @selector(targetIndexPath)) retain];
                                                    r14 = (r15)(r13, @selector(item));
                                                    rax = (r15)(var_100, @selector(item));
                                                    r15 = r15;
                                                    r14 = r14 < rax ? 0x1 : 0x0;
                                                    rdi = r13;
                                                    r13 = var_140;
                                                    [rdi release];
                                            }
                                            var_170 = var_170 + (r14 & 0xff);
                                    }
                            }
                            else {
                                    r12 = var_120;
                            }
                            if (r12 == r13) {
                                    r14 = (r15)(var_100, @selector(item));
                                    r13 = [(r15)(var_F8, @selector(targetIndexPath)) retain];
                                    rbx = r15;
                                    r15 = (r15)(r13, @selector(item));
                                    [r13 release];
                                    if (r14 >= r15) {
                                            r14 = 0x1;
                                            if (var_108 == var_110) {
                                                    r15 = [(rbx)(var_F8, @selector(originalIndexPath)) retain];
                                                    r14 = (rbx)(r15, @selector(item));
                                                    r14 = r14 < (rbx)(var_100, @selector(item)) ? 0x1 : 0x0;
                                                    [r15 release];
                                            }
                                            var_170 = var_170 - (r14 & 0xff);
                                    }
                                    r15 = rbx;
                            }
                            rbx = var_118 + 0x1;
                    } while (rbx < var_148);
                    rax = [var_168 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_148 = rax;
            } while (rax != 0x0);
    }
    else {
            var_180 = rbx;
            var_170 = 0x0;
    }
    [var_168 release];
    rbx = [var_100 retain];
    if (var_170 == 0x0) goto loc_964d4d;

loc_964c35:
    var_F8 = rbx;
    r13 = [rbx item];
    r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + var_180);
    r12 = [r15 collectionView:var_180 numberOfItemsInSection:[rbx section]];
    [r15 release];
    r13 = r13 + var_170;
    if ((r13 < 0x0) || (r13 >= r12)) goto loc_964cdd;

loc_964ca9:
    rbx = var_F8;
    rax = [rbx section];
    rdx = r13;
    goto loc_964d24;

loc_964d24:
    var_100 = [[NSIndexPath indexPathForItem:rdx inSection:rax] retain];
    [rbx release];
    goto loc_964d4d;

loc_964d4d:
    if ([rbx isEqual:var_100] == 0x0) {
            r14 = var_180;
            rdi = r14->_dataSourceToLayoutIndexPathMappingDict;
            if (rdi == 0x0) {
                    r14->_dataSourceToLayoutIndexPathMappingDict = [[NSMutableDictionary dictionary] retain];
                    [r14->_dataSourceToLayoutIndexPathMappingDict release];
                    rdi = r14->_dataSourceToLayoutIndexPathMappingDict;
            }
            [rdi setObject:rbx forKeyedSubscript:var_100];
    }
    goto loc_964dc4;

loc_964dc4:
    if (*___stack_chk_guard == var_30) {
            rax = [var_100 autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_964cdd:
    if ((r13 < r12) || (r12 <= 0x0)) goto loc_964deb;

loc_964cef:
    rbx = var_F8;
    rax = [rbx section];
    rdx = r12 - 0x1;
    goto loc_964d24;

loc_964deb:
    rbx = var_F8;
    if (r13 < 0x0) {
            var_100 = [[NSIndexPath indexPathForItem:0x0 inSection:[rbx section]] retain];
            [rbx release];
    }
    goto loc_964d4d;

loc_964bdf:
    var_100 = [var_100 retain];
    goto loc_964dc4;
}

void -[UICollectionView _checkForPreferredAttributesInView:originalAttributes:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = arg3;
    r15 = arg2;
    rbx = self;
    if ([r15 _arePreferredAttributesValid] != 0x0) goto .l1;

loc_964e8a:
    if (((rbx->_collectionViewFlags & 0x40000000) != 0x0) && ([r14 _isCell] != 0x0)) {
            rax = [r15 retain];
            var_78 = rax;
            r12 = [[rax contentView] retain];
            r13 = [[r12 _templateLayoutView] retain];
            [r12 release];
            if (r13 != 0x0) {
                    var_70 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
                    r12 = [[r13 superview] retain];
                    var_88 = r12;
                    var_68 = rbx;
                    var_80 = r13;
                    r13 = [[r14 indexPath] retain];
                    [var_70 _collectionView:rdx willLayoutCell:var_78 usingTemplateLayoutCell:r12 forItemAtIndexPath:r13];
                    rdi = r13;
                    r13 = var_80;
                    [rdi release];
                    [var_88 release];
                    [var_70 release];
                    r12 = [[var_78 contentView] retain];
                    [r12 setNeedsLayout];
                    [r12 release];
                    var_70 = 0x1;
            }
            else {
                    var_68 = rbx;
                    var_70 = 0x0;
            }
            [r13 release];
            [var_78 release];
    }
    else {
            var_68 = rbx;
            var_70 = 0x0;
    }
    rbx = [r14 copy];
    r12 = [[r15 _preferredLayoutAttributesFittingAttributes:rbx] retain];
    [rbx release];
    if (([r12 isEqual:r14] != 0x0) || ([var_68->_layout shouldInvalidateLayoutForPreferredLayoutAttributes:r12 withOriginalAttributes:r14] == 0x0)) goto loc_96510b;

loc_96508c:
    rbx = var_68;
    rdx = r12;
    rcx = r14;
    r13 = [[rbx->_layout invalidationContextForPreferredLayoutAttributes:rdx withOriginalAttributes:rcx] retain];
    if ([rbx->_layout _estimatesSizes] == 0x0) goto loc_965232;

loc_9650cf:
    r15 = [[r13 invalidatedItemIndexPaths] retain];
    if ([r15 count] == 0x0) goto loc_965196;

loc_9650fd:
    [r15 release];
    goto loc_965232;

loc_965232:
    [rbx->_layout invalidateLayoutWithContext:r13];
    goto loc_96524d;

loc_96524d:
    [r13 release];
    goto loc_965256;

loc_965256:
    [r12 release];
    return;

.l1:
    return;

loc_965196:
    rbx = _objc_msgSend;
    r14 = [[r13 invalidatedSupplementaryIndexPaths] retain];
    if ([r14 count] == 0x0) goto loc_9651d9;

loc_9651c2:
    [r14 release];
    [r15 release];
    rbx = var_68;
    goto loc_965232;

loc_9651d9:
    rax = (rbx)(r13, @selector(invalidatedDecorationIndexPaths));
    rax = [rax retain];
    var_78 = (rbx)(rax, @selector(count));
    [rax release];
    [r14 release];
    [r15 release];
    rbx = var_68;
    if ((var_78 != 0x0) || (!(BIT_TEST(rbx->_collectionViewFlags, 0x2b)))) {
            [rbx->_layout invalidateLayoutWithContext:r13];
    }
    goto loc_96524d;

loc_96510b:
    if (var_70 != 0x0) {
            var_40 = [var_68 retain];
            var_38 = [r12 retain];
            [UIView performWithoutAnimation:__NSConcreteStackBlock];
            [var_38 release];
            [var_40 release];
    }
    goto loc_965256;
}

int ___74-[UICollectionView _checkForPreferredAttributesInView:originalAttributes:]_block_invoke(int arg0) {
    [*(arg0 + 0x20) _applyLayoutAttributes:*(arg0 + 0x28) toView:*(arg0 + 0x30)];
    rax = [*(arg0 + 0x30) layoutBelowIfNeeded];
    return rax;
}

bool -[UICollectionView _hasFocusedCellForIndexPath:shouldUsePreUpdateData:](void * self, void * _cmd, void * arg2, bool arg3) {
    rbx = self;
    r14 = [arg2 retain];
    r15 = [rbx->_focusedCellIndexPath retain];
    rax = rbx->_focusedViewType;
    if (arg3 != 0x0) {
            rcx = rbx->_currentUpdate;
            if (rcx != 0x0) {
                    r12 = [rcx->_oldFocusedIndexPath retain];
                    [r15 release];
                    rax = rbx->_currentUpdate->_oldFocusedViewType;
                    r15 = r12;
            }
    }
    r12 = 0x0;
    if (((rax == 0x1) && (r15 != 0x0)) && (rbx->_focusedCell != 0x0)) {
            r12 = [r14 isEqual:r15];
    }
    [r15 release];
    [r14 release];
    rax = r12;
    return rax;
}

void -[UICollectionView _setCellPrefetchMode:](void * self, void * _cmd, NSInteger arg2) {
    [self setPrefetchingEnabled:(arg2 == 0x1 ? 0x1 : 0x0) & 0xff];
    return;
}

NSInteger -[UICollectionView _cellPrefetchMode](void * self, void * _cmd) {
    rax = [self isPrefetchingEnabled];
    rax = rax & 0xff;
    return rax;
}

bool -[UICollectionView _hasPrefetchItems](void * self, void * _cmd) {
    rbx = self;
    rax = 0x1;
    if ([rbx->_currentPrefetchingContext hasRemainingItems] == 0x0) {
            rax = [rbx->_prefetchCacheItems count];
            rax = rax != 0x0 ? 0x1 : 0x0;
    }
    return rax;
}

bool -[UICollectionView _prefetchingEnabledDefault](void * self, void * _cmd) {
    return 0x1;
}

void -[UICollectionView _setShouldDeriveVisibleBoundsFromContainingScrollView:](void * self, void * _cmd, bool arg2) {
    self->_collectionViewFlags = self->_collectionViewFlags;
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = arg2 << 0x3 & 0xff | *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0xf7;
    return;
}

bool -[UICollectionView _shouldDeriveVisibleBoundsFromContainingScrollView](void * self, void * _cmd) {
    rax = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rax = (rax & 0x8) >> 0x3;
    return rax;
}

void -[UICollectionView _setShouldPrefetchCellsWhenPerformingReloadData:](void * self, void * _cmd, bool arg2) {
    self->_collectionViewFlags = self->_collectionViewFlags;
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = arg2 << 0x6 & 0xff | *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0xbf;
    return;
}

bool -[UICollectionView _shouldPrefetchCellsWhenPerformingReloadData](void * self, void * _cmd) {
    rax = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rax = (rax & 0x40) >> 0x6;
    return rax;
}

bool -[UICollectionView _shouldPrefetchCells](void * self, void * _cmd) {
    rbx = self;
    if (rbx->_prefetchingEnabled != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                    if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0xa0000) {
                            if ([rbx->_layout _estimatesSizes] != 0x0) {
                                    rax = 0x0;
                            }
                            else {
                                    rax = [rbx->_reorderedItems count];
                                    rax = rax == 0x0 ? 0x1 : 0x0;
                            }
                    }
                    else {
                            rax = 0x0;
                    }
            }
            else {
                    if (__UIApplicationLinkedOnOrAfter(0xa0000) != 0x0) {
                            if ([rbx->_layout _estimatesSizes] != 0x0) {
                                    rax = 0x0;
                            }
                            else {
                                    rax = [rbx->_reorderedItems count];
                                    rax = rax == 0x0 ? 0x1 : 0x0;
                            }
                    }
                    else {
                            rax = 0x0;
                    }
            }
    }
    else {
            rax = 0x0;
    }
    return rax;
}

void * -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:](void * self, void * _cmd, void * arg2, void * arg3, bool arg4) {
    rax = [self _createPreparedCellForItemAtIndexPath:arg2 withLayoutAttributes:arg3 applyAttributes:arg4 & 0xff isFocused:0x0 notify:0x1];
    return rax;
}

void * -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:](void * self, void * _cmd, void * arg2, void * arg3, bool arg4, bool arg5, bool arg_0) {
    var_F4 = arg5;
    var_108 = arg4;
    var_100 = arg3;
    r15 = arg2;
    var_E8 = _cmd;
    r13 = self;
    r14 = *_OBJC_IVAR_$_UICollectionView._dataSource + r13;
    rbx = objc_loadWeakRetained(r14);
    [rbx release];
    if (rbx == 0x0) {
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            var_E0 = [rdi retain];
            [rbx release];
            r12 = [[NSAssertionHandler currentHandler] retain];
            [r12 handleFailureInMethod:var_E8 object:r13 file:var_E0 lineNumber:0x829 description:@"UICollectionView dataSource is not set"];
            rsp = (rsp - 0x10) + 0x10;
            [var_E0 release];
            [r12 release];
    }
    r15 = objc_unsafeClaimAutoreleasedReturnValue([r13 _preReorderingIndexPathForLayoutIndexPath:r15]);
    rdi = r13->_firstResponderIndexPath;
    if (((rdi == 0x0) || (r13->_firstResponderViewType != 0x1)) || ([rdi isEqual:r15] == 0x0)) goto loc_96570b;

loc_965702:
    rax = *_OBJC_IVAR_$_UICollectionView._firstResponderView;
    goto loc_96572b;

loc_96572b:
    rbx = [*(r13 + rax) retain];
    goto loc_965fac;

loc_965fac:
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = rbx;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_96570b:
    if ([r13 _hasFocusedCellForIndexPath:r15 shouldUsePreUpdateData:0x0] == 0x0) goto loc_96573e;

loc_965724:
    rax = *_OBJC_IVAR_$_UICollectionView._focusedCell;
    goto loc_96572b;

loc_96573e:
    rbx = objc_loadWeakRetained(r14);
    r12 = [[rbx collectionView:r13 cellForItemAtIndexPath:r15] retain];
    [rbx release];
    if (r12 == 0x0) {
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r14 = [rdi retain];
            var_E0 = r12;
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_E8 object:r13 file:r14 lineNumber:0x836 description:@"the collection view's data source did not return a valid cell from -collectionView:cellForItemAtIndexPath: for index path %@"];
            rsp = (rsp - 0x10) + 0x10;
            [r14 release];
            [rbx release];
            r12 = var_E0;
    }
    rbx = [[r12 reuseIdentifier] retain];
    [rbx release];
    if (rbx == 0x0) {
            var_F0 = r15;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r14 = [rdi retain];
            var_E0 = r12;
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_E8 object:r13 file:r14 lineNumber:0x837 description:@"the cell returned from -collectionView:cellForItemAtIndexPath: does not have a reuseIdentifier - cells must be retrieved by calling -dequeueReusableCellWithReuseIdentifier:forIndexPath:"];
            r15 = var_F0;
            rsp = (rsp - 0x10) + 0x10;
            [r14 release];
            [rbx release];
            r12 = var_E0;
    }
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
            var_F0 = r15;
            rax = [r12 _wasDequeued];
            if (rbx >= 0x70000) {
                    if (rax == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r14 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_E8 object:r13 file:r14 lineNumber:0x838 description:@"the view returned from -collectionView:cellForItemAtIndexPath: (%@) was not retrieved by calling -dequeueReusableCellWithReuseIdentifier:forIndexPath: or is nil (%@)"];
                            [r14 release];
                            [rbx release];
                    }
            }
            else {
                    if (rax == 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:.__s_category);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r14 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x2;
                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                    *(rax + 0xffffffffffffffe4) = var_F0;
                                    *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                    *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                    *(rax + 0xffffffffffffffee) = r12;
                                    _os_log_impl(0xffffffffff69a539, *(rbx + 0x8), 0x10, "the view returned from -collectionView:cellForItemAtIndexPath: (%@) was not retrieved by calling -dequeueReusableCellWithReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x16);
                            }
                    }
            }
    }
    else {
            var_F0 = r15;
            rbx = __UIApplicationLinkedOnOrAfter(0x70000);
            rax = [r12 _wasDequeued];
            if (rbx != 0x0) {
                    if (rax == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r14 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_E8 object:r13 file:r14 lineNumber:0x838 description:@"the view returned from -collectionView:cellForItemAtIndexPath: (%@) was not retrieved by calling -dequeueReusableCellWithReuseIdentifier:forIndexPath: or is nil (%@)"];
                            [r14 release];
                            [rbx release];
                    }
            }
            else {
                    if (rax == 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:.__s_category);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r14 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x2;
                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                    *(rax + 0xffffffffffffffe4) = var_F0;
                                    *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                    *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                    *(rax + 0xffffffffffffffee) = r12;
                                    _os_log_impl(0xffffffffff69a539, *(rbx + 0x8), 0x10, "the view returned from -collectionView:cellForItemAtIndexPath: (%@) was not retrieved by calling -dequeueReusableCellWithReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x16);
                            }
                    }
            }
    }
    rbx = var_100;
    [r13 _checkForPreferredAttributesInView:r12 originalAttributes:rbx];
    if (var_108 == 0x0) goto loc_965b92;

loc_965b0c:
    var_48 = [r13 retain];
    var_40 = [r12 retain];
    var_E8 = @selector(_performWithoutAnimation:);
    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
    [var_40 release];
    rdi = var_48;
    goto loc_965d0e;

loc_965d0e:
    [rdi release];
    goto loc_965d10;

loc_965d10:
    var_E0 = r12;
    rbx = [[r12 _layoutAttributes] retain];
    rcx = [rbx zIndex];
    [r13 _addControlledSubview:r12 atZIndex:rcx];
    [rbx release];
    r13 = [r13 retain];
    var_B8 = r13;
    r14 = [r12 retain];
    var_B0 = r14;
    rdx = __NSConcreteStackBlock;
    _objc_msgSend(@class(UIView), var_E8);
    if (var_F4 != 0x0) {
            rdi = r13->_focusedCell;
            rbx = var_E0;
            if ((rdi != 0x0) && (rdi != rbx)) {
                    r12 = [rdi retain];
                    [r13 _setFocusedCell:0x0];
                    [r13 _reusePreviouslyFocusedManagedSubviewIfNeeded:r12];
                    [r12 release];
            }
            var_E0 = rbx;
            [r13 _setFocusedCell:rbx];
            rdx = var_F0;
            [r13 _setFocusedCellIndexPath:rdx];
            r13->_focusedViewType = 0x1;
    }
    rax = [r13 semanticContentAttribute];
    [r14 setSemanticContentAttribute:rax, rcx];
    if ((r13->_collectionViewFlags & 0x1) != 0x0) {
            rax = arg_0 ^ 0x1;
            if (rax == 0x0) {
                    r15 = objc_loadWeakRetained(r13 + *_OBJC_IVAR_$_UIScrollView._delegate);
                    [r15 collectionView:r13 willDisplayCell:r14 forItemAtIndexPath:var_F0];
                    [r15 release];
            }
    }
    r15 = [r13->_layout retain];
    rbx = [r14 retain];
    if (((var_E0 != 0x0) && (r15 != 0x0)) && (!(BIT_TEST(*(rbx + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r15 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    rdx = 0x1;
            }
            else {
                    rdx = 0x0;
            }
            [rbx _setHasMirrorTransform:rdx];
    }
    [rbx release];
    [r15 release];
    rbx = [rbx retain];
    [var_B0 release];
    [var_B8 release];
    [rbx release];
    goto loc_965fac;

loc_965b92:
    var_E0 = r12;
    r12 = [[r12 _layoutAttributes] retain];
    r15 = [r12 __indexPath];
    rax = [rbx __indexPath];
    rax = [r15 isEqual:rax];
    r15 = rbx;
    rbx = rax;
    [r12 release];
    if (rbx == 0x0) goto loc_965c19;

loc_965bff:
    var_E8 = @selector(_performWithoutAnimation:);
    r12 = var_E0;
    goto loc_965d10;

loc_965c19:
    rbx = [r15 copy];
    rax = [r15 __indexPath];
    [rbx setIndexPath:rax];
    var_80 = [r13 retain];
    var_78 = rbx;
    var_100 = [rbx retain];
    r12 = var_E0;
    var_70 = [r12 retain];
    var_E8 = @selector(_performWithoutAnimation:);
    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
    [var_70 release];
    [var_78 release];
    [var_80 release];
    rdi = var_100;
    goto loc_965d0e;
}

int ___112-[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:]_block_invoke(int arg0) {
    rax = [*(arg0 + 0x20) _applyLayoutAttributes:*(arg0 + 0x30) toView:*(arg0 + 0x28)];
    return rax;
}

int ___112-[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:]_block_invoke.980(int arg0) {
    rax = [*(arg0 + 0x20) _applyLayoutAttributes:*(arg0 + 0x28) toView:*(arg0 + 0x30)];
    return rax;
}

int ___112-[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:]_block_invoke.986(int arg0) {
    rax = [*(arg0 + 0x20) _updateEditing:[*(arg0 + 0x20) _isEditing] & 0xff forView:*(arg0 + 0x28) atIndexPath:*(arg0 + 0x30)];
    return rax;
}

void * -[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, bool arg5) {
    var_B8 = arg5;
    var_B0 = arg3;
    var_C0 = _cmd;
    r12 = self;
    var_A8 = [arg2 retain];
    r15 = [arg4 retain];
    r13 = *_OBJC_IVAR_$_UICollectionView._dataSource + r12;
    rbx = objc_loadWeakRetained(r13);
    [rbx release];
    if (rbx == 0x0) {
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r14 = r12;
            r12 = [rdi retain];
            var_A0 = r15;
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_C0 object:r14 file:r12 lineNumber:0x86a description:@"UICollectionView dataSource is not set"];
            rsp = (rsp - 0x10) + 0x10;
            rdi = r12;
            r12 = r14;
            [rdi release];
            [rbx release];
            r15 = var_A0;
    }
    rbx = r12;
    if (!(BIT_TEST(r12->_collectionViewFlags, 0x21))) {
            r12 = 0x0;
            if ([r15 _isDecorationView] != 0x0) {
                    r12 = rbx;
                    rdi = r12->_firstResponderIndexPath;
                    if ((((rdi != 0x0) && (r12->_firstResponderViewType == 0x2)) && ([rdi isEqual:var_B0] != 0x0)) && ([r12->_firstResponderViewKind isEqual:var_A8] != 0x0)) {
                            r12 = [r12->_firstResponderView retain];
                    }
                    else {
                            if ([r15 _isDecorationView] != 0x0) {
                                    var_A0 = r15;
                                    r13 = r12;
                                    r12 = [[r15 _elementKind] retain];
                                    rbx = [[r15 _elementKind] retain];
                                    r15 = [[r13 _dequeueReusableViewOfKind:r12 withIdentifier:rbx forIndexPath:var_B0 viewCategory:0x2] retain];
                                    [rbx release];
                                    rdi = r12;
                                    r12 = r13;
                                    [rdi release];
                                    r14 = r15;
                                    r15 = var_A0;
                                    if (r14 == 0x0) {
                                            rbx = [[r12->_layout _decorationViewForLayoutAttributes:r15] retain];
                                            [r14 release];
                                            r14 = rbx;
                                    }
                            }
                            else {
                                    rbx = objc_loadWeakRetained(r13);
                                    r14 = [[rbx collectionView:r12 viewForSupplementaryElementOfKind:var_A8 atIndexPath:var_B0] retain];
                                    [rbx release];
                                    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                                            rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
                                            rax = [r14 _wasDequeued];
                                            if (rbx >= 0x70000) {
                                                    if (rax == 0x0) {
                                                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                            rdi = @"<Unknown File>";
                                                            if (rbx != 0x0) {
                                                                    rdi = rbx;
                                                            }
                                                            var_A0 = r15;
                                                            r15 = r14;
                                                            r14 = r12;
                                                            r12 = [rdi retain];
                                                            [rbx release];
                                                            rbx = [[NSAssertionHandler currentHandler] retain];
                                                            [rbx handleFailureInMethod:var_C0 object:r14 file:r12 lineNumber:0x87d description:@"the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)"];
                                                            rdi = r12;
                                                            r12 = r14;
                                                            r14 = r15;
                                                            r15 = var_A0;
                                                            [rdi release];
                                                            [rbx release];
                                                    }
                                            }
                                            else {
                                                    if (rax == 0x0) {
                                                            rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:.__s_category);
                                                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                                    var_A0 = r15;
                                                                    r15 = r14;
                                                                    r14 = rsp;
                                                                    rax = rsp;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x3;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                                                    *(rax + 0xffffffffffffffe4) = var_A8;
                                                                    *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                                                    *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                                                    *(rax + 0xffffffffffffffee) = var_B0;
                                                                    *(int8_t *)(rax + 0xfffffffffffffff6) = 0x40;
                                                                    *(int8_t *)(rax + 0xfffffffffffffff7) = 0x8;
                                                                    *(rax + 0xfffffffffffffff8) = r15;
                                                                    _os_log_impl(0xffffffffff6999c9, *(rbx + 0x8), 0x10, "the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x20);
                                                                    r14 = r15;
                                                                    r15 = var_A0;
                                                            }
                                                    }
                                            }
                                    }
                                    else {
                                            rbx = __UIApplicationLinkedOnOrAfter(0x70000);
                                            rax = [r14 _wasDequeued];
                                            if (rbx != 0x0) {
                                                    if (rax == 0x0) {
                                                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                            rdi = @"<Unknown File>";
                                                            if (rbx != 0x0) {
                                                                    rdi = rbx;
                                                            }
                                                            var_A0 = r15;
                                                            r15 = r14;
                                                            r14 = r12;
                                                            r12 = [rdi retain];
                                                            [rbx release];
                                                            rbx = [[NSAssertionHandler currentHandler] retain];
                                                            [rbx handleFailureInMethod:var_C0 object:r14 file:r12 lineNumber:0x87d description:@"the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)"];
                                                            rdi = r12;
                                                            r12 = r14;
                                                            r14 = r15;
                                                            r15 = var_A0;
                                                            [rdi release];
                                                            [rbx release];
                                                    }
                                            }
                                            else {
                                                    if (rax == 0x0) {
                                                            rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:.__s_category);
                                                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                                    var_A0 = r15;
                                                                    r15 = r14;
                                                                    r14 = rsp;
                                                                    rax = rsp;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x3;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                                                    *(rax + 0xffffffffffffffe4) = var_A8;
                                                                    *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                                                    *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                                                    *(rax + 0xffffffffffffffee) = var_B0;
                                                                    *(int8_t *)(rax + 0xfffffffffffffff6) = 0x40;
                                                                    *(int8_t *)(rax + 0xfffffffffffffff7) = 0x8;
                                                                    *(rax + 0xfffffffffffffff8) = r15;
                                                                    _os_log_impl(0xffffffffff6999c9, *(rbx + 0x8), 0x10, "the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x20);
                                                                    r14 = r15;
                                                                    r15 = var_A0;
                                                            }
                                                    }
                                            }
                                    }
                            }
                            rdx = r14;
                            rcx = r15;
                            [r12 _checkForPreferredAttributesInView:rdx originalAttributes:rcx];
                            if (var_B8 != 0x0) {
                                    var_48 = [r12 retain];
                                    var_A0 = r15;
                                    var_40 = [r15 retain];
                                    r15 = [r14 retain];
                                    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
                                    [r15 release];
                                    [var_40 release];
                                    [var_48 release];
                            }
                            else {
                                    var_A0 = r15;
                                    r15 = r14;
                            }
                            r13 = r14;
                            var_C8 = r12;
                            rbx = [[r15 _layoutAttributes] retain];
                            rax = [rbx zIndex];
                            [r12 _addControlledSubview:r13 atZIndex:rax];
                            [rbx release];
                            r12 = [r12 retain];
                            var_78 = r12;
                            r14 = [r15 retain];
                            var_B8 = r14;
                            var_70 = r13;
                            [UIView _performWithoutAnimation:__NSConcreteStackBlock];
                            rax = [r12 semanticContentAttribute];
                            [r14 setSemanticContentAttribute:rax];
                            if ((var_C8->_collectionViewFlags & 0x2) != 0x0) {
                                    rbx = objc_loadWeakRetained(r12 + *_OBJC_IVAR_$_UIScrollView._delegate);
                                    [rbx collectionView:r12 willDisplaySupplementaryView:r13 forElementKind:var_A8 atIndexPath:var_B0];
                                    [rbx release];
                            }
                            r14 = [r12->_layout retain];
                            r12 = [r13 retain];
                            if (((r12 != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(r12 + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
                                    if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                                            rdx = 0x1;
                                    }
                                    else {
                                            rdx = 0x0;
                                    }
                                    [r12 _setHasMirrorTransform:rdx];
                            }
                            [r12 release];
                            [r14 release];
                            r14 = [var_B8 retain];
                            [var_70 release];
                            [var_78 release];
                            [r14 release];
                            r15 = var_A0;
                    }
            }
    }
    else {
            r12 = rbx;
            rdi = r12->_firstResponderIndexPath;
            if ((((rdi != 0x0) && (r12->_firstResponderViewType == 0x2)) && ([rdi isEqual:var_B0] != 0x0)) && ([r12->_firstResponderViewKind isEqual:var_A8] != 0x0)) {
                    r12 = [r12->_firstResponderView retain];
            }
            else {
                    if ([r15 _isDecorationView] != 0x0) {
                            var_A0 = r15;
                            r13 = r12;
                            r12 = [[r15 _elementKind] retain];
                            rbx = [[r15 _elementKind] retain];
                            r15 = [[r13 _dequeueReusableViewOfKind:r12 withIdentifier:rbx forIndexPath:var_B0 viewCategory:0x2] retain];
                            [rbx release];
                            rdi = r12;
                            r12 = r13;
                            [rdi release];
                            r14 = r15;
                            r15 = var_A0;
                            if (r14 == 0x0) {
                                    rbx = [[r12->_layout _decorationViewForLayoutAttributes:r15] retain];
                                    [r14 release];
                                    r14 = rbx;
                            }
                    }
                    else {
                            rbx = objc_loadWeakRetained(r13);
                            r14 = [[rbx collectionView:r12 viewForSupplementaryElementOfKind:var_A8 atIndexPath:var_B0] retain];
                            [rbx release];
                            if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                                    rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
                                    rax = [r14 _wasDequeued];
                                    if (rbx >= 0x70000) {
                                            if (rax == 0x0) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_A0 = r15;
                                                    r15 = r14;
                                                    r14 = r12;
                                                    r12 = [rdi retain];
                                                    [rbx release];
                                                    rbx = [[NSAssertionHandler currentHandler] retain];
                                                    [rbx handleFailureInMethod:var_C0 object:r14 file:r12 lineNumber:0x87d description:@"the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)"];
                                                    rdi = r12;
                                                    r12 = r14;
                                                    r14 = r15;
                                                    r15 = var_A0;
                                                    [rdi release];
                                                    [rbx release];
                                            }
                                    }
                                    else {
                                            if (rax == 0x0) {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:.__s_category);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            var_A0 = r15;
                                                            r15 = r14;
                                                            r14 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                                            *(int8_t *)(rax + 0xffffffffffffffe1) = 0x3;
                                                            *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                                            *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                                            *(rax + 0xffffffffffffffe4) = var_A8;
                                                            *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                                            *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                                            *(rax + 0xffffffffffffffee) = var_B0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff6) = 0x40;
                                                            *(int8_t *)(rax + 0xfffffffffffffff7) = 0x8;
                                                            *(rax + 0xfffffffffffffff8) = r15;
                                                            _os_log_impl(0xffffffffff6999c9, *(rbx + 0x8), 0x10, "the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x20);
                                                            r14 = r15;
                                                            r15 = var_A0;
                                                    }
                                            }
                                    }
                            }
                            else {
                                    rbx = __UIApplicationLinkedOnOrAfter(0x70000);
                                    rax = [r14 _wasDequeued];
                                    if (rbx != 0x0) {
                                            if (rax == 0x0) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_A0 = r15;
                                                    r15 = r14;
                                                    r14 = r12;
                                                    r12 = [rdi retain];
                                                    [rbx release];
                                                    rbx = [[NSAssertionHandler currentHandler] retain];
                                                    [rbx handleFailureInMethod:var_C0 object:r14 file:r12 lineNumber:0x87d description:@"the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)"];
                                                    rdi = r12;
                                                    r12 = r14;
                                                    r14 = r15;
                                                    r15 = var_A0;
                                                    [rdi release];
                                                    [rbx release];
                                            }
                                    }
                                    else {
                                            if (rax == 0x0) {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:.__s_category);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            var_A0 = r15;
                                                            r15 = r14;
                                                            r14 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xffffffffffffffe0) = 0x2;
                                                            *(int8_t *)(rax + 0xffffffffffffffe1) = 0x3;
                                                            *(int8_t *)(rax + 0xffffffffffffffe2) = 0x40;
                                                            *(int8_t *)(rax + 0xffffffffffffffe3) = 0x8;
                                                            *(rax + 0xffffffffffffffe4) = var_A8;
                                                            *(int8_t *)(rax + 0xffffffffffffffec) = 0x40;
                                                            *(int8_t *)(rax + 0xffffffffffffffed) = 0x8;
                                                            *(rax + 0xffffffffffffffee) = var_B0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff6) = 0x40;
                                                            *(int8_t *)(rax + 0xfffffffffffffff7) = 0x8;
                                                            *(rax + 0xfffffffffffffff8) = r15;
                                                            _os_log_impl(0xffffffffff6999c9, *(rbx + 0x8), 0x10, "the view returned from -collectionView:viewForSupplementaryElementOfKind:atIndexPath (%@,%@) was not retrieved by calling -dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath: or is nil (%@)", rax + 0xffffffffffffffe0, 0x20);
                                                            r14 = r15;
                                                            r15 = var_A0;
                                                    }
                                            }
                                    }
                            }
                    }
                    rdx = r14;
                    rcx = r15;
                    [r12 _checkForPreferredAttributesInView:rdx originalAttributes:rcx];
                    if (var_B8 != 0x0) {
                            var_48 = [r12 retain];
                            var_A0 = r15;
                            var_40 = [r15 retain];
                            r15 = [r14 retain];
                            [UIView _performWithoutAnimation:__NSConcreteStackBlock];
                            [r15 release];
                            [var_40 release];
                            [var_48 release];
                    }
                    else {
                            var_A0 = r15;
                            r15 = r14;
                    }
                    r13 = r14;
                    var_C8 = r12;
                    rbx = [[r15 _layoutAttributes] retain];
                    rax = [rbx zIndex];
                    [r12 _addControlledSubview:r13 atZIndex:rax];
                    [rbx release];
                    r12 = [r12 retain];
                    var_78 = r12;
                    r14 = [r15 retain];
                    var_B8 = r14;
                    var_70 = r13;
                    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
                    rax = [r12 semanticContentAttribute];
                    [r14 setSemanticContentAttribute:rax];
                    if ((var_C8->_collectionViewFlags & 0x2) != 0x0) {
                            rbx = objc_loadWeakRetained(r12 + *_OBJC_IVAR_$_UIScrollView._delegate);
                            [rbx collectionView:r12 willDisplaySupplementaryView:r13 forElementKind:var_A8 atIndexPath:var_B0];
                            [rbx release];
                    }
                    r14 = [r12->_layout retain];
                    r12 = [r13 retain];
                    if (((r12 != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(r12 + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
                            if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                                    rdx = 0x1;
                            }
                            else {
                                    rdx = 0x0;
                            }
                            [r12 _setHasMirrorTransform:rdx];
                    }
                    [r12 release];
                    [r14 release];
                    r14 = [var_B8 retain];
                    [var_70 release];
                    [var_78 release];
                    [r14 release];
                    r15 = var_A0;
            }
    }
    [r15 release];
    [var_A8 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = r12;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___118-[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:]_block_invoke(int arg0) {
    rax = [*(arg0 + 0x20) _applyLayoutAttributes:*(arg0 + 0x28) toView:*(arg0 + 0x30)];
    return rax;
}

int ___118-[UICollectionView _createPreparedSupplementaryViewForElementOfKind:atIndexPath:withLayoutAttributes:applyAttributes:]_block_invoke.1008(int arg0) {
    rax = [*(arg0 + 0x20) _updateEditing:[*(arg0 + 0x20) _isEditing] & 0xff forView:*(arg0 + 0x28) atIndexPath:0x0];
    return rax;
}

void -[UICollectionView setContentSize:](void * self, void * _cmd, struct CGSize arg2) {
    var_38 = intrinsic_movsd(var_38, xmm1, arg2);
    var_40 = intrinsic_movsd(var_40, xmm0);
    r14 = [self _adjustsTargetsOnContentOffsetChanges];
    [self _setAdjustsTargetsOnContentOffsetChanges:0x0];
    intrinsic_movsd(xmm0, var_40);
    intrinsic_movsd(xmm1, var_38);
    [[self super] setContentSize:0x0];
    [self _setAdjustsTargetsOnContentOffsetChanges:r14 & 0xff];
    return;
}

void -[UICollectionView _applyLayoutAttributes:toView:](void * self, void * _cmd, void * arg2, void * arg3) {
    r15 = arg3;
    r13 = arg2;
    var_30 = self;
    var_38 = [r13 zIndex];
    r14 = [[r15 _layoutAttributes] retain];
    r12 = [r14 zIndex];
    [r14 release];
    if (r12 == var_38) {
            rbx = var_30;
    }
    else {
            rax = [r13 zIndex];
            rbx = var_30;
            [rbx _addControlledSubview:r15 atZIndex:rax];
    }
    [r15 _setLayoutAttributes:r13];
    rdi = rbx->_layout;
    r14 = [rdi retain];
    rbx = [r15 retain];
    if (((rbx != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(rbx + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    rdx = 0x1;
            }
            else {
                    rdx = 0x0;
            }
            [rbx _setHasMirrorTransform:rdx];
    }
    [rbx release];
    rdi = r14;
    [rdi release];
    return;
}

bool -[UICollectionView _shouldFadeCellsForBoundChangeWhileRotating](void * self, void * _cmd) {
    r15 = [[self window] retain];
    r12 = [[self _viewControllerForAncestor] retain];
    r14 = 0x1;
    if (((r15 != 0x0) && (r12 != 0x0)) && ([r15 isRotating] != 0x0)) {
            var_40 = intrinsic_movaps(var_40, 0x0);
            [r12 _getRotationContentSettings:var_40];
            rax = var_40;
            if (rax != 0x0) {
                    if (rax <= 0xffffff) {
                            r14 = 0x0;
                    }
            }
    }
    [r12 release];
    [r15 release];
    rax = r14;
    return rax;
}

bool -[UICollectionView _itemIndexPathIsReordered:](void * self, void * _cmd, void * arg2) {
    var_108 = arg2;
    intrinsic_movaps(var_C0, 0x0, arg2);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [self->_reorderedItems retain];
    var_120 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_110 = rax;
    if (rax == 0x0) goto loc_966e75;

loc_966d85:
    var_118 = *var_E0;
    goto loc_966dab;

loc_966dab:
    r13 = 0x0;
    goto loc_966dca;

loc_966dca:
    if (*var_E0 != var_118) {
            objc_enumerationMutation(var_120);
    }
    rbx = [[*(var_E8 + r13 * 0x8) targetIndexPath] retain];
    r12 = [rbx isEqual:var_108];
    [rbx release];
    r14 = 0x1;
    if (r12 != 0x0) goto loc_966e78;

loc_966e31:
    r13 = r13 + 0x1;
    if (r13 < var_110) goto loc_966dca;

loc_966e3d:
    rax = [var_120 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_110 = rax;
    if (rax != 0x0) goto loc_966dab;

loc_966e75:
    r14 = 0x0;
    goto loc_966e78;

loc_966e78:
    [var_120 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = r14;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

bool -[UICollectionView _viewIsReorderedCell:](void * self, void * _cmd, void * arg2) {
    rax = [self _reorderedItemForView:arg2];
    rax = [rax retain];
    rbx = rax != 0x0 ? 0x1 : 0x0;
    [rax release];
    rax = rbx;
    return rax;
}

void * -[UICollectionView _reorderedItemForView:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    var_30 = *___stack_chk_guard;
    rbx = [arg2 retain];
    var_F8 = rbx;
    r12 = 0x0;
    if ([rbx isKindOfClass:[UICollectionViewCell class]] == 0x0) goto loc_9670a4;

loc_966f4d:
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [r14->_reorderedItems retain];
    var_108 = rax;
    rbx = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    r12 = 0x0;
    if (rbx == 0x0) goto loc_967097;

loc_966fb7:
    var_100 = *var_E0;
    goto loc_966fd6;

loc_966fd6:
    r12 = 0x0;
    goto loc_966fe0;

loc_966fe0:
    if (*var_E0 != var_100) {
            objc_enumerationMutation(var_108);
    }
    r15 = *(var_E8 + r12 * 0x8);
    r14 = [[r15 cell] retain];
    [r14 release];
    if (r14 == var_F8) goto loc_967081;

loc_967033:
    r12 = r12 + 0x1;
    if (r12 < rbx) goto loc_966fe0;

loc_96703b:
    rbx = [var_108 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    r12 = 0x0;
    if (rbx != 0x0) goto loc_966fd6;

loc_967097:
    [var_108 release];
    goto loc_9670a4;

loc_9670a4:
    [var_F8 release];
    if (*___stack_chk_guard == var_30) {
            rdi = r12;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_967081:
    r12 = [r15 retain];
    goto loc_967097;
}

void * -[UICollectionView _reorderedItems](void * self, void * _cmd) {
    rax = objc_retainAutoreleaseReturnValue(self->_reorderedItems);
    return rax;
}

struct CGPoint -[UICollectionView _reorderingTargetPosition](void * self, void * _cmd) {
    intrinsic_movsd(xmm0, self->_reorderingTargetPosition);
    intrinsic_movsd(xmm1, *(self + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
    return *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition;
}

struct CGPoint -[UICollectionView _delegateTargetOffsetForProposedContentOffset:](void * self, void * _cmd, struct CGPoint arg2) {
    rbx = self;
    rax = rbx->_collectionViewFlags;
    if (rax < 0x0) goto loc_96714d;

loc_967120:
    var_20 = intrinsic_movsd(var_20, xmm0);
    var_18 = intrinsic_movsd(var_18, xmm1);
    if ((rax & 0x40) == 0x0) goto loc_96719c;

loc_96712f:
    r14 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
    rsi = @selector(_collectionView:targetContentOffsetForProposedContentOffset:);
    goto loc_967173;

loc_967173:
    xmm0 = intrinsic_movsd(xmm0, var_20);
    xmm1 = intrinsic_movsd(xmm1, var_18);
    _objc_msgSend(r14, rsi);
    var_20 = intrinsic_movsd(var_20, xmm0);
    var_18 = intrinsic_movsd(var_18, xmm1);
    rax = [r14 release];
    goto loc_96719c;

loc_96719c:
    intrinsic_movsd(xmm1, var_18);
    intrinsic_movsd(xmm0, var_20);
    return rax;

loc_96714d:
    rdi = *_OBJC_IVAR_$_UIScrollView._delegate + rbx;
    var_18 = intrinsic_movsd(var_18, xmm1);
    var_20 = intrinsic_movsd(var_20, xmm0);
    r14 = objc_loadWeakRetained(rdi);
    rsi = @selector(collectionView:targetContentOffsetForProposedContentOffset:);
    goto loc_967173;
}

NSUInteger -[UICollectionView _prefetchItemsForVelocity:maxItemsToPrefetch:](void * self, void * _cmd, struct CGVector arg2, NSUInteger arg3) {
    rax = [self _prefetchItemsForVelocity:arg2 maxItemsToPrefetch:0x1 invalidateCandidatesOnDirectionChanges:r8];
    return rax;
}

NSUInteger -[UICollectionView _prefetchItemsForVelocity:maxItemsToPrefetch:invalidateCandidatesOnDirectionChanges:](void * self, void * _cmd, struct CGVector arg2, NSUInteger arg3, bool arg4) {
    r14 = arg2;
    var_30 = intrinsic_movsd(var_30, xmm1, arg2, arg3, arg4);
    var_38 = intrinsic_movsd(var_38, xmm0);
    r15 = self;
    rax = [r15->_currentPrefetchingContext hasRemainingItems];
    if (rax == 0x0) goto loc_96754d;

loc_96720a:
    CMP(r14, 0x1);
    var_90 = rax - rax + CARRY(RFLAGS(cf)) | r14;
    r14 = *_OBJC_IVAR_$_UICollectionView._currentPrefetchingContext;
    var_70 = r14;
    rbx = @selector(attributes);
    var_40 = rbx;
    var_80 = 0x0;
    goto loc_967431;

loc_967431:
    if ([*(r15 + r14) hasRemainingItems] == 0x0) goto loc_967532;

loc_967447:
    rdi = *(r15 + r14);
    rax = [rdi popNextItem];
    rax = [rax retain];
    var_30 = rax;
    r13 = [_objc_msgSend(rax, rbx) retain];
    rdi = r13;
    r13 = [[r13 indexPath] retain];
    [rdi release];
    r12 = @selector(objectForKeyedSubscript:);
    rbx = [_objc_msgSend(r15->_visibleCellsDict, r12) retain];
    [rbx release];
    if (rbx == 0x0) goto loc_9674ca;

loc_9674c4:
    var_38 = r13;
    goto loc_967502;

loc_967502:
    r13 = 0x0;
    r14 = var_70;
    goto loc_967509;

loc_967509:
    r12 = var_30;
    goto loc_96750d;

loc_96750d:
    [var_38 release];
    [r12 release];
    rbx = var_40;
    if (r13 == 0x0) goto loc_967431;

loc_967532:
    rax = var_80;
    if (rax != 0x0) goto .l1;

loc_96753b:
    [r15 _resetCurrentPrefetchContext];
    goto loc_96756c;

loc_96756c:
    rax = 0x0;
    return rax;

.l1:
    return rax;

loc_9674ca:
    rbx = [_objc_msgSend(r15->_prefetchCacheItems, r12) retain];
    [rbx release];
    COND = rbx == 0x0;
    rbx = r13;
    if (COND) goto loc_9672d9;

loc_9674fe:
    var_38 = rbx;
    goto loc_967502;

loc_9672d9:
    rdi = r15->_focusedCellIndexPath;
    r12 = var_30;
    if ((rdi == 0x0) || ([rdi isEqual:rbx] == 0x0)) goto loc_967311;

loc_967301:
    var_38 = rbx;
    r13 = 0x0;
    r14 = var_70;
    goto loc_96750d;

loc_967311:
    rdi = r12;
    r14 = r12;
    r13 = [_objc_msgSend(rdi, var_40) retain];
    var_38 = rbx;
    rcx = r13;
    rbx = [r15 _createPreparedCellForItemAtIndexPath:rbx withLayoutAttributes:rcx applyAttributes:0x0 isFocused:0x0 notify:0x0];
    rdx = rbx;
    [r14 setView:rdx];
    rdi = rbx;
    [rdi release];
    [r13 release];
    r13 = r14;
    r14 = [[r14 view] retain];
    [r14 release];
    if (r14 != 0x0) {
            rbx = r13;
            rax = _objc_msgSend(rbx, var_40, rdx, rcx, 0x0);
            rax = [rax retain];
            var_C0 = rax;
            r13 = [[rax indexPath] retain];
            [r15->_prefetchCacheItems setObject:rbx forKeyedSubscript:r13, 0x0];
            [r13 release];
            [var_C0 release];
            rax = var_80 + 0x1;
    }
    else {
            rax = var_80;
    }
    r14 = var_70;
    var_80 = rax;
    r13 = rax >= var_90 ? 0x1 : 0x0;
    goto loc_967509;

loc_96754d:
    intrinsic_movsd(xmm0, var_38, 0x1);
    intrinsic_movsd(xmm1, var_30);
    [r15 _computePrefetchCandidatesForVelocity:rdx notifyDelegateIfNeeded:rcx];
    goto loc_96756c;
}

void -[UICollectionView _computePrefetchCandidatesForVelocity:notifyDelegateIfNeeded:](void * self, void * _cmd, struct CGVector arg2, bool arg3) {
    var_58 = intrinsic_movsd(var_58, xmm1, arg2, arg3);
    var_60 = intrinsic_movsd(var_60, xmm0);
    [var_30 _visibleBounds];
    xmm0 = intrinsic_movsd(xmm0, var_60, @selector(_computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:), var_28);
    xmm1 = intrinsic_movsd(xmm1, var_58);
    [var_50 _computeFutureVisibleBoundsForPrefetchVelocity:self visibleBounds:rcx, r8];
    intrinsic_movsd(xmm0, var_60, arg2 & 0xff, var_28);
    intrinsic_movsd(xmm1, var_58);
    [self _computePrefetchCandidatesForVisibleBounds:rdx futureVisibleBounds:rcx prefetchVector:r8 notifyDelegateIfNeeded:r9];
    return;
}

void -[UICollectionView _computePrefetchCandidatesForVisibleBounds:futureVisibleBounds:prefetchVector:notifyDelegateIfNeeded:](void * self, void * _cmd, struct CGRect arg2, struct CGRect arg3, struct CGVector arg4, bool arg5) {
    var_17C = arg2;
    var_118 = intrinsic_movsd(var_118, xmm1, arg2, arg3, arg4, arg5);
    var_120 = intrinsic_movsd(var_120, xmm0);
    var_150 = self;
    r15 = [[self->_collectionViewData layoutAttributesForCellsInRect:0x1 validateLayout:rcx] retain];
    xmm0 = intrinsic_movsd(xmm0, var_120, r15, arg_8);
    intrinsic_movsd(xmm1, var_118);
    r14 = [[self _reorderPrefetchCandidates:0x1 forPrefetchVelocity:rcx visibleBounds:r8] retain];
    [r15 release];
    var_170 = [[NSMutableArray array] retain];
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_C0, xmm0);
    intrinsic_movapd(var_D0, xmm0);
    var_E0 = intrinsic_movapd(var_E0, xmm0);
    var_F0 = intrinsic_movapd(var_F0, xmm0);
    rax = [r14 retain];
    var_130 = rax;
    rsi = @selector(countByEnumeratingWithState:objects:count:);
    rdi = rax;
    rax = _objc_msgSend(rdi, rsi);
    var_118 = rax;
    if (rax != 0x0) {
            r12 = arg_0;
            var_120 = *var_E0;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_E0 != var_120) {
                                    rdi = var_130;
                                    objc_enumerationMutation(rdi);
                            }
                            r13 = *(var_E8 + r14 * 0x8);
                            if (r13 != 0x0) {
                                    rdi = var_110;
                                    rsi = r13;
                                    [rdi frame];
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    var_100 = intrinsic_movapd(var_100, xmm0);
                                    var_110 = intrinsic_movapd(var_110, xmm0);
                            }
                            if (CGRectIntersectsRect(rdi, rsi) == 0x0) {
                                    r12 = [[r13 indexPath] retain];
                                    rsi = @selector(objectForKeyedSubscript:);
                                    r15 = [_objc_msgSend(var_150->_prefetchCacheItems, rsi) retain];
                                    [r15 release];
                                    rdi = r12;
                                    r12 = arg_0;
                                    [rdi release];
                                    if (r15 == 0x0) {
                                            r15 = [[_UICollectionViewPrefetchItem alloc] initWithAttributes:r13];
                                            rsi = @selector(addObject:);
                                            _objc_msgSend(var_170, rsi);
                                            rdi = r15;
                                            [rdi release];
                                    }
                            }
                            r14 = r14 + 0x1;
                    } while (r14 < var_118);
                    rdi = var_130;
                    rsi = @selector(countByEnumeratingWithState:objects:count:);
                    rax = _objc_msgSend(rdi, rsi);
                    var_118 = rax;
            } while (rax != 0x0);
    }
    [var_130 release];
    rsi = @selector(prefetchingContextWithItems:);
    rdx = var_170;
    rcx = var_150;
    rcx->_currentPrefetchingContext = [_objc_msgSend(@class(_UICollectionViewPrefetchingContext), rsi) retain];
    rbx = rcx;
    [rcx->_currentPrefetchingContext release];
    if ((var_17C != 0x0) && (!(BIT_TEST(rbx->_collectionViewFlags, 0x27)))) {
            rsi = @selector(hasRemainingItems);
            if (_objc_msgSend(rbx->_currentPrefetchingContext, rsi) != 0x0) {
                    r14 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._prefetchDataSource + rbx);
                    rdx = rbx;
                    r15 = [[rbx->_currentPrefetchingContext remainingIndexPaths] retain];
                    rsi = @selector(collectionView:prefetchItemsAtIndexPaths:);
                    rcx = r15;
                    _objc_msgSend(r14, rsi);
                    [r15 release];
                    [r14 release];
            }
    }
    [var_170 release];
    [var_130 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

struct CGRect -[UICollectionView _computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:](void * self, void * _cmd, struct CGVector arg2, struct CGRect arg3) {
    rdi = self;
    var_40 = intrinsic_movaps(var_40, xmm1, arg2, arg3);
    var_70 = intrinsic_movaps(var_70, xmm0);
    r14 = _cmd;
    r15 = rdi;
    xmm0 = intrinsic_movaps(xmm0, arg_0);
    var_30 = intrinsic_movaps(var_30, xmm0);
    xmm0 = intrinsic_movsd(xmm0, arg_10);
    var_80 = intrinsic_movapd(var_80, xmm0);
    xmm0 = intrinsic_movsd(xmm0, arg_18);
    var_88 = intrinsic_movsd(var_88, xmm0);
    CGRectGetHeight(rdi);
    var_50 = intrinsic_movapd(var_50, xmm0);
    CGRectGetWidth(rdi);
    xmm2 = intrinsic_movapd(xmm2, var_70);
    var_60 = intrinsic_movapd(var_60, xmm0);
    xmm3 = intrinsic_movapd(xmm3, *(int128_t *)0xc4f640);
    xmm3 = intrinsic_andpd(xmm3, xmm2);
    xmm1 = intrinsic_movsd(xmm1, *0xc4f700);
    xmm1 = intrinsic_ucomisd(xmm1, xmm3);
    if (xmm1 > 0x0) goto loc_967be8;

loc_967bd1:
    xmm0 = intrinsic_movapd(xmm0, *(int128_t *)0xc4f640);
    xmm0 = intrinsic_andpd(xmm0, var_40);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) goto loc_967df7;

loc_967be8:
    rbx = arg_0;
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm2 = intrinsic_ucomisd(xmm2, xmm0);
    if (xmm2 <= 0x0) goto loc_967c60;

loc_967bf6:
    CGRectGetMaxX(rdi);
    var_30 = intrinsic_movapd(var_30, xmm0);
    CGRectGetMinY(rdi);
    xmm2 = intrinsic_movapd(xmm2, var_30);
    xmm4 = intrinsic_movapd(xmm4, var_60);
    xmm4 = intrinsic_mulsd(xmm4, *0xc4f5c0);
    goto loc_967cef;

loc_967cef:
    xmm2 = intrinsic_unpcklpd(xmm2, xmm0);
    xmm0 = intrinsic_movapd(xmm0, var_50);
    xmm3 = intrinsic_movapd(xmm3, xmm0);
    goto loc_967cfc;

loc_967cfc:
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm1 = intrinsic_movapd(xmm1, var_40);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) goto loc_967d72;

loc_967d0b:
    CGRectGetMinX(rdi);
    var_30 = intrinsic_movapd(var_30, xmm0);
    CGRectGetMaxY(rdi);
    xmm2 = intrinsic_movapd(xmm2, var_30);
    xmm1 = intrinsic_movapd(xmm1, var_50);
    xmm1 = intrinsic_mulsd(xmm1, *0xc4f5c0);
    goto loc_967de5;

loc_967de5:
    xmm2 = intrinsic_unpcklpd(xmm2, xmm0);
    xmm4 = intrinsic_movapd(xmm4, var_60);
    xmm3 = intrinsic_movapd(xmm3, xmm1);
    goto loc_967e9f;

loc_967e9f:
    *(int128_t *)r15 = intrinsic_movupd(*(int128_t *)r15, xmm2);
    *(r15 + 0x10) = intrinsic_movsd(*(r15 + 0x10), xmm4);
    *(r15 + 0x18) = intrinsic_movsd(*(r15 + 0x18), xmm3);
    rax = r15;
    return rax;

loc_967d72:
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_967e9f;

loc_967d7c:
    CGRectGetMinX(rdi);
    var_30 = intrinsic_movapd(var_30, xmm0);
    CGRectGetMinY(rdi);
    xmm2 = intrinsic_movapd(xmm2, var_30);
    xmm1 = intrinsic_movapd(xmm1, var_50);
    xmm1 = intrinsic_mulsd(xmm1, *0xc4f5c0);
    xmm0 = intrinsic_subsd(xmm0, xmm1);
    goto loc_967de5;

loc_967c60:
    xmm0 = intrinsic_ucomisd(xmm0, xmm2);
    COND = xmm0 <= 0x0;
    xmm2 = intrinsic_movapd(xmm2, var_30);
    xmm4 = intrinsic_movapd(xmm4, var_80);
    xmm3 = intrinsic_movsd(xmm3, var_88);
    if (COND) goto loc_967cfc;

loc_967c7c:
    CGRectGetMinX(rdi);
    xmm1 = intrinsic_movapd(xmm1, var_60);
    xmm1 = intrinsic_mulsd(xmm1, *0xc4f5c0);
    var_80 = intrinsic_movapd(var_80, xmm1);
    xmm0 = intrinsic_subsd(xmm0, xmm1);
    var_30 = intrinsic_movapd(var_30, xmm0);
    CGRectGetMinY(rdi);
    xmm4 = intrinsic_movapd(xmm4, var_80);
    xmm2 = intrinsic_movapd(xmm2, var_30);
    goto loc_967cef;

loc_967df7:
    xmm1 = intrinsic_movapd(xmm1, xmm3);
    xmm1 = intrinsic_addsd(xmm1, xmm0);
    xmm3 = intrinsic_divsd(xmm3, xmm1);
    xmm0 = intrinsic_divsd(xmm0, xmm1);
    xmm1 = intrinsic_movsd(xmm1, *0xc4f408);
    xmm1 = intrinsic_mulsd(xmm1, xmm0);
    xmm3 = intrinsic_ucomisd(xmm3, xmm1);
    if (xmm3 > 0x0) {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            xmm3 = intrinsic_unpcklpd(xmm3, xmm0);
            var_80 = intrinsic_movapd(var_80, xmm3);
    }
    else {
            xmm1 = intrinsic_movsd(xmm1, *0xc4f408);
            xmm1 = intrinsic_mulsd(xmm1, xmm3);
            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
            if (xmm0 > 0x0) {
                    xmm0 = intrinsic_pslldq(xmm0, 0x8);
                    var_80 = intrinsic_movdqa(var_80, xmm0);
            }
            else {
                    xmm3 = intrinsic_unpcklpd(xmm3, xmm0);
                    var_80 = intrinsic_movapd(var_80, xmm3);
            }
    }
    xmm1 = intrinsic_movapd(xmm1, var_40);
    xmm0 = intrinsic_movapd(xmm0, xmm2);
    [r14 _unitVectorForVector:rdx];
    xmm4 = intrinsic_movapd(xmm4, var_60);
    xmm2 = intrinsic_movapd(xmm2, xmm4);
    xmm3 = intrinsic_movapd(xmm3, var_50);
    xmm2 = intrinsic_unpcklpd(xmm2, xmm3);
    xmm2 = intrinsic_mulpd(xmm2, *(int128_t *)0xc4f660);
    xmm2 = intrinsic_mulpd(xmm2, var_80);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm1);
    xmm0 = intrinsic_mulpd(xmm0, xmm2);
    xmm2 = intrinsic_movapd(xmm2, var_30);
    xmm2 = intrinsic_addpd(xmm2, xmm0);
    xmm0 = intrinsic_movsd(xmm0, *0xc4f860);
    xmm4 = intrinsic_mulsd(xmm4, xmm0);
    xmm3 = intrinsic_mulsd(xmm3, xmm0);
    goto loc_967e9f;
}

struct CGRect -[UICollectionView _computePrefetchCacheValidationBoundsForPrefetchVelocity:visibleBounds:](void * self, void * _cmd, struct CGVector arg2, struct CGRect arg3) {
    [var_28 _computeFutureVisibleBoundsForPrefetchVelocity:_cmd visibleBounds:arg3, r8];
    CGRectUnion(var_48, _cmd);
    CGRectGetWidth(var_48);
    xmm0 = intrinsic_mulsd(xmm0, *0xc52828);
    var_70 = intrinsic_movsd(var_70, xmm0);
    CGRectGetHeight(var_48);
    xmm1 = intrinsic_movsd(xmm1, *0xc52828);
    intrinsic_mulsd(xmm1, xmm0);
    intrinsic_movsd(xmm0, var_70);
    CGRectInset(var_68, _cmd, @selector(_computeFutureVisibleBoundsForPrefetchVelocity:visibleBounds:));
    *(self + 0x18) = var_50;
    *(self + 0x10) = var_58;
    *(self + 0x8) = var_60;
    *self = var_68;
    rax = self;
    return rax;
}

void -[UICollectionView _pruneCachedPrefetchViewsForVelocity:](void * self, void * _cmd, struct CGVector arg2) {
    var_50 = intrinsic_movsd(var_50, xmm1, arg2);
    var_58 = intrinsic_movsd(var_58, xmm0);
    rbx = self;
    if ([rbx->_prefetchCacheItems count] != 0x0) {
            [var_48 _visibleBounds];
            intrinsic_movsd(xmm0, var_58, @selector(_computePrefetchCacheValidationBoundsForPrefetchVelocity:visibleBounds:), var_40);
            intrinsic_movsd(xmm1, var_50);
            [var_28 _computePrefetchCacheValidationBoundsForPrefetchVelocity:rbx visibleBounds:rcx, r8];
            [rbx _pruneCachedPrefetchViewsForCacheValidationBounds:rdx, rcx];
    }
    return;
}

void -[UICollectionView _pruneCachedPrefetchViewsForCacheValidationBounds:](void * self, void * _cmd, struct CGRect arg2) {
    r15 = self;
    if ([r15->_prefetchCacheItems count] != 0x0) {
            r12 = [[NSMutableArray array] retain];
            r14 = [[NSMutableArray array] retain];
            var_A8 = [r12 retain];
            var_B0 = [r14 retain];
            [r15->_prefetchCacheItems enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
            [r15->_prefetchCacheItems removeObjectsForKeys:r12];
            var_80 = [r15 retain];
            [r14 enumerateObjectsUsingBlock:__NSConcreteStackBlock];
            [var_80 release];
            [r14 release];
            [r12 release];
            [var_B0 release];
            [var_A8 release];
    }
    return;
}

void ___70-[UICollectionView _pruneCachedPrefetchViewsForCacheValidationBounds:]_block_invoke(int arg0, int arg1, int arg2) {
    r13 = arg2;
    var_58 = arg1;
    r15 = arg0;
    rbx = [[r13 view] retain];
    [rbx release];
    if (rbx != 0x0) {
            rbx = r15 + 0x30;
            rsi = @selector(attributes);
            rdi = _objc_msgSend(r13, rsi);
            r12 = [rdi retain];
            if (r12 != 0x0) {
                    rdi = var_50;
                    rsi = r12;
                    [rdi frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            r14 = CGRectIntersectsRect(rdi, rsi);
            [r12 release];
            if (r14 == 0x0) {
                    rdx = var_58;
                    [*(r15 + 0x20) addObject:rdx];
                    rbx = [[r13 view] retain];
                    [rbx release];
                    if (rbx != 0x0) {
                            rbx = [[r13 view] retain];
                            [*(r15 + 0x28) addObject:rbx];
                            [rbx release];
                    }
            }
    }
    return;
}

void ___70-[UICollectionView _pruneCachedPrefetchViewsForCacheValidationBounds:]_block_invoke.1068(int arg0, int arg1) {
    rbx = arg1;
    r14 = arg0;
    if (([*(r14 + 0x20) _isViewInReuseQueue:rbx] == 0x0) && ([rbx _isInUpdateAnimation] == 0x0)) {
            rdi = *(r14 + 0x20);
            rdx = rbx;
            [rdi _reuseCell:rdx notifyDidEndDisplaying:0x0];
    }
    return;
}

void * -[UICollectionView _reorderPrefetchCandidates:forPrefetchVelocity:visibleBounds:](void * self, void * _cmd, void * arg2, struct CGVector arg3, struct CGRect arg4) {
    var_70 = intrinsic_movaps(var_70, xmm1, arg2, arg3, arg4);
    var_80 = intrinsic_movaps(var_80, xmm0);
    rdi = arg2;
    rax = [rdi retain];
    xmm2 = intrinsic_movapd(xmm2, var_80);
    r14 = rax;
    xmm1 = intrinsic_movapd(xmm1, *(int128_t *)0xc4f640);
    xmm1 = intrinsic_andpd(xmm1, xmm2);
    xmm0 = intrinsic_movsd(xmm0, *0xc4f700);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_968526;

loc_96850a:
    xmm0 = intrinsic_movsd(xmm0, *_CGPointZero);
    xmm3 = intrinsic_movsd(xmm3, *_CGRectApplyAffineTransform);
    rax = 0x1;
    xmm1 = intrinsic_movapd(xmm1, var_70);
    goto loc_968658;

loc_968658:
    intrinsic_movsd(var_38, xmm2);
    intrinsic_movsd(var_30, xmm1);
    intrinsic_movsd(var_28, xmm0);
    intrinsic_movsd(var_20, xmm3);
    rbx = [[r14 sortedArrayWithOptions:0x1 usingComparator:__NSConcreteStackBlock] retain];
    [r14 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;

loc_968526:
    xmm1 = intrinsic_movapd(xmm1, *(int128_t *)0xc4f640);
    xmm4 = intrinsic_movapd(xmm4, var_70);
    xmm1 = intrinsic_andpd(xmm1, xmm4);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    COND = xmm0 > 0x0;
    xmm0 = intrinsic_movsd(xmm0, *_CGPointZero);
    xmm3 = intrinsic_movsd(xmm3, *_CGRectApplyAffineTransform);
    rax = 0x1;
    xmm1 = intrinsic_movapd(xmm1, xmm4);
    if (COND) goto loc_968658;

loc_968557:
    rbx = arg_0;
    xmm1 = intrinsic_xorpd(xmm1, xmm1);
    xmm2 = intrinsic_ucomisd(xmm2, xmm1);
    if (xmm2 > 0x0) {
            var_90 = intrinsic_movsd(var_90, xmm3);
            CGRectGetMaxX(rdi);
    }
    else {
            var_90 = intrinsic_movsd(var_90, xmm3);
            xmm1 = intrinsic_ucomisd(xmm1, xmm2);
            if (xmm1 > 0x0) {
                    CGRectGetMinX(rdi);
            }
    }
    var_88 = intrinsic_movsd(var_88, xmm0);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm1 = intrinsic_movapd(xmm1, var_70);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    xmm3 = intrinsic_movsd(xmm3, var_90);
    if (xmm1 <= 0x0) goto loc_968613;

loc_9685ea:
    CGRectGetMaxY(rdi);
    goto loc_968640;

loc_968640:
    xmm1 = intrinsic_movapd(xmm1, var_70);
    xmm3 = intrinsic_movapd(xmm3, xmm0);
    goto loc_968649;

loc_968649:
    rax = 0x0;
    xmm2 = intrinsic_movapd(xmm2, var_80);
    xmm0 = intrinsic_movsd(xmm0, var_88);
    goto loc_968658;

loc_968613:
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_968649;

loc_968619:
    CGRectGetMinY(rdi);
    goto loc_968640;
}

int ___81-[UICollectionView _reorderPrefetchCandidates:forPrefetchVelocity:visibleBounds:]_block_invoke(int arg0, int arg1, int arg2) {
    rdi = arg0;
    r14 = arg2;
    r15 = arg1;
    rbx = rdi;
    if (*(int8_t *)(rbx + 0x40) == 0x0) goto loc_96872d;

loc_9686fd:
    xmm0 = intrinsic_movsd(xmm0, *(rbx + 0x20));
    xmm1 = intrinsic_xorpd(xmm1, xmm1);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_96874a;

loc_96870c:
    if (r15 != 0x0) {
            rdi = var_40;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_30 = intrinsic_movapd(var_30, xmm0);
            var_40 = intrinsic_movapd(var_40, xmm0);
    }
    CGRectGetMinX(rdi);
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            rdi = var_60;
            [rdi frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_50 = intrinsic_movapd(var_50, xmm0);
            var_60 = intrinsic_movapd(var_60, xmm0);
    }
    CGRectGetMinX(rdi);
    rax = 0x1;
    xmm1 = intrinsic_movsd(xmm1, var_268);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) goto .l1;

loc_96894e:
    if (r15 != 0x0) {
            rdi = var_80;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_70 = intrinsic_movapd(var_70, xmm0);
            var_80 = intrinsic_movapd(var_80, xmm0);
    }
    CGRectGetMinX(rdi);
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            rdi = var_A0;
            [rdi frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_90 = intrinsic_movapd(var_90, xmm0);
            var_A0 = intrinsic_movapd(var_A0, xmm0);
    }
    CGRectGetMinX(rdi);
    goto loc_968eef;

loc_968eef:
    rax = 0x0;
    xmm0 = intrinsic_ucomisd(xmm0, var_268);
    if (xmm0 > 0x0) {
            rax = 0xffffffffffffffff;
    }
    return rax;

.l1:
    return rax;

loc_96874a:
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) goto loc_968774;

loc_968750:
    if (r15 != 0x0) {
            rdi = var_C0;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_B0 = intrinsic_movapd(var_B0, xmm0);
            var_C0 = intrinsic_movapd(var_C0, xmm0);
    }
    CGRectGetMinX(rdi);
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            rdi = var_E0;
            [rdi frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_D0 = intrinsic_movapd(var_D0, xmm0);
            var_E0 = intrinsic_movapd(var_E0, xmm0);
    }
    CGRectGetMinX(rdi);
    rax = 0x1;
    xmm0 = intrinsic_ucomisd(xmm0, var_268);
    if (xmm0 <= 0x0) {
            if (r15 != 0x0) {
                    rdi = var_100;
                    [rdi frame];
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_F0 = intrinsic_movapd(var_F0, xmm0);
                    var_100 = intrinsic_movapd(var_100, xmm0);
            }
            CGRectGetMinX(rdi);
            if (r14 != 0x0) {
                    var_268 = intrinsic_movsd(var_268, xmm0);
                    rdi = var_120;
                    [rdi frame];
            }
            else {
                    var_268 = intrinsic_movsd(var_268, xmm0);
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_110 = intrinsic_movapd(var_110, xmm0);
                    var_120 = intrinsic_movapd(var_120, xmm0);
            }
            CGRectGetMinX(rdi);
            rax = 0x0;
            xmm1 = intrinsic_movsd(xmm1, var_268);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 > 0x0) {
                    rax = 0xffffffffffffffff;
            }
    }
    return rax;

loc_968774:
    xmm0 = intrinsic_movsd(xmm0, *(rbx + 0x28));
    xmm1 = intrinsic_xorpd(xmm1, xmm1);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_96896f;

loc_968787:
    if (r15 != 0x0) {
            rdi = var_140;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_130 = intrinsic_movapd(var_130, xmm0);
            var_140 = intrinsic_movapd(var_140, xmm0);
    }
    CGRectGetMinY(rdi);
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            rdi = var_160;
            [rdi frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_150 = intrinsic_movapd(var_150, xmm0);
            var_160 = intrinsic_movapd(var_160, xmm0);
    }
    CGRectGetMinY(rdi);
    rax = 0x1;
    xmm1 = intrinsic_movsd(xmm1, var_268);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) goto .l1;

loc_968c9d:
    if (r15 != 0x0) {
            rdi = var_180;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_170 = intrinsic_movapd(var_170, xmm0);
            var_180 = intrinsic_movapd(var_180, xmm0);
    }
    CGRectGetMinY(rdi);
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            rdi = var_1A0;
            [rdi frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_190 = intrinsic_movapd(var_190, xmm0);
            var_1A0 = intrinsic_movapd(var_1A0, xmm0);
    }
    CGRectGetMinY(rdi);
    goto loc_968eef;

loc_96896f:
    rax = 0x0;
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) {
            if (r15 != 0x0) {
                    rdi = var_1C0;
                    [rdi frame];
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_1B0 = intrinsic_movapd(var_1B0, xmm0);
                    var_1C0 = intrinsic_movapd(var_1C0, xmm0);
            }
            CGRectGetMaxY(rdi);
            if (r14 != 0x0) {
                    var_268 = intrinsic_movsd(var_268, xmm0);
                    rdi = var_1E0;
                    [rdi frame];
            }
            else {
                    var_268 = intrinsic_movsd(var_268, xmm0);
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_1D0 = intrinsic_movapd(var_1D0, xmm0);
                    var_1E0 = intrinsic_movapd(var_1E0, xmm0);
            }
            CGRectGetMaxY(rdi);
            rax = 0xffffffffffffffff;
            xmm1 = intrinsic_movsd(xmm1, var_268);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 <= 0x0) {
                    if (r15 != 0x0) {
                            rdi = var_200;
                            [rdi frame];
                    }
                    else {
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            var_1F0 = intrinsic_movapd(var_1F0, xmm0);
                            var_200 = intrinsic_movapd(var_200, xmm0);
                    }
                    CGRectGetMaxY(rdi);
                    var_268 = intrinsic_movsd(var_268, xmm0);
                    if (r14 != 0x0) {
                            rdi = var_220;
                            [rdi frame];
                    }
                    else {
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            var_210 = intrinsic_movapd(var_210, xmm0);
                            var_220 = intrinsic_movapd(var_220, xmm0);
                    }
                    CGRectGetMaxY(rdi);
                    rax = 0x0;
                    xmm0 = intrinsic_ucomisd(xmm0, var_268);
                    if (xmm0 > 0x0) {
                            rax = 0x1;
                    }
            }
    }
    return rax;

loc_96872d:
    if (r15 != 0x0) {
            [var_240 frame];
    }
    else {
            var_230 = intrinsic_movaps(var_230, 0x0);
            var_240 = intrinsic_movaps(var_240, 0x0);
    }
    xmm0 = intrinsic_movsd(0x0, *(rbx + 0x30));
    xmm1 = intrinsic_movsd(xmm1, *(rbx + 0x38));
    _UIDistanceBetweenPointAndRect();
    if (r14 != 0x0) {
            var_268 = intrinsic_movsd(var_268, xmm0);
            [var_260 frame];
    }
    else {
            var_268 = intrinsic_movsd(var_268, xmm0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_250 = intrinsic_movapd(var_250, xmm0);
            var_260 = intrinsic_movapd(var_260, xmm0);
    }
    xmm0 = intrinsic_movsd(xmm0, *(rbx + 0x30));
    xmm1 = intrinsic_movsd(xmm1, *(rbx + 0x38));
    _UIDistanceBetweenPointAndRect();
    rax = 0x1;
    xmm1 = intrinsic_movsd(xmm1, var_268);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) {
            rax = 0x0;
            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
            if (xmm0 > 0x0) {
                    rax = 0xffffffffffffffff;
            }
    }
    return rax;
}

struct CGVector -[UICollectionView _unitVectorForVector:](void * self, void * _cmd, struct CGVector arg2) {
    xmm2 = intrinsic_movaps(xmm2, xmm1, arg2);
    xmm3 = intrinsic_movaps(xmm3, xmm0);
    xmm1 = intrinsic_movsd(xmm1, *0xc4f4c8);
    xmm4 = intrinsic_ucomisd(0x0, xmm3);
    xmm0 = intrinsic_movapd(xmm0, xmm1);
    if (xmm4 <= 0x0) {
            xmm3 = intrinsic_ucomisd(xmm3, xmm4);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            if (xmm3 > 0x0) {
                    intrinsic_movsd(xmm0, *0xc4f410);
            }
    }
    xmm4 = intrinsic_ucomisd(xmm4, xmm2);
    if (xmm4 <= 0x0) {
            xmm1 = intrinsic_xorpd(xmm1, xmm1);
            xmm2 = intrinsic_ucomisd(xmm2, xmm1);
            if (xmm2 > 0x0) {
                    intrinsic_movsd(xmm1, *0xc4f410);
            }
    }
    return rax;
}

void -[UICollectionView _performReloadPrefetchIfNeeded](void * self, void * _cmd) {
    var_30 = *___stack_chk_guard;
    r14 = self;
    if (((*(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x40) != 0x0) && ([r14 _shouldPrefetchCells] != 0x0)) {
            var_138 = r14;
            [var_D0 _visibleBounds];
            CGRectGetWidth(var_D0);
            xmm0 = intrinsic_mulsd(xmm0, *0xc4f838);
            var_140 = intrinsic_movsd(var_140, xmm0);
            CGRectGetHeight(var_D0);
            xmm1 = intrinsic_movsd(xmm1, *0xc4f838);
            intrinsic_mulsd(xmm1, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_140);
            CGRectInset(var_F0, r14, @selector(_visibleBounds));
            rax = [r14->_collectionViewData layoutAttributesForCellsInRect:0x1 validateLayout:rcx];
            rax = [rax retain];
            var_170 = rax;
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_100, xmm0);
            intrinsic_movapd(var_110, xmm0);
            var_120 = intrinsic_movapd(var_120, xmm0);
            var_130 = intrinsic_movapd(var_130, xmm0);
            rax = [rax countByEnumeratingWithState:var_130 objects:var_B0 count:0x10];
            var_148 = rax;
            if (rax != 0x0) {
                    var_160 = *var_120;
                    do {
                            r15 = 0x0;
                            do {
                                    if (*var_120 != var_160) {
                                            objc_enumerationMutation(var_170);
                                    }
                                    r12 = *(var_128 + r15 * 0x8);
                                    r14 = [[r12 indexPath] retain];
                                    rbx = [[var_138->_visibleCellsDict objectForKeyedSubscript:r14, *_OBJC_IVAR_$_UICollectionView._visibleCellsDict] retain];
                                    [rbx release];
                                    if (rbx == 0x0) {
                                            rcx = *_OBJC_IVAR_$_UICollectionView._prefetchCacheItems;
                                            rdx = r14;
                                            rbx = [[*(var_138 + rcx) objectForKeyedSubscript:rdx] retain];
                                            [rbx release];
                                            if (rbx != 0x0) {
                                                    [r14 release];
                                            }
                                            else {
                                                    rax = [_UICollectionViewPrefetchItem alloc];
                                                    rax = [rax initWithAttributes:r12, rcx];
                                                    var_178 = rax;
                                                    rbx = rax;
                                                    rax = [rax attributes];
                                                    rax = [rax retain];
                                                    var_180 = rax;
                                                    r12 = [var_138 _createPreparedCellForItemAtIndexPath:r14 withLayoutAttributes:rax applyAttributes:0x0 isFocused:0x0 notify:0x0];
                                                    [rbx setView:r12, rax];
                                                    [r12 release];
                                                    [var_180 release];
                                                    [var_138->_prefetchCacheItems setObject:var_178 forKeyedSubscript:r14];
                                                    [var_178 release];
                                                    [r14 release];
                                            }
                                    }
                                    else {
                                            [r14 release];
                                    }
                                    r15 = r15 + 0x1;
                            } while (r15 < var_148);
                            rax = [var_170 countByEnumeratingWithState:var_130 objects:var_B0 count:0x10];
                            var_148 = rax;
                    } while (rax != 0x0);
            }
            [var_170 release];
    }
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _resetPrefetchState](void * self, void * _cmd) {
    [self _resetPrefetchedCachedCells];
    [self _resetCurrentPrefetchContext];
    return;
}

void -[UICollectionView _resetPrefetchedCachedCells](void * self, void * _cmd) {
    rbx = [[NSMutableArray alloc] init];
    var_30 = rbx;
    var_80 = [rbx retain];
    [self->_prefetchCacheItems enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [self->_prefetchCacheItems removeAllObjects];
    var_58 = [self retain];
    [rbx enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    [var_58 release];
    [var_30 release];
    [var_80 release];
    return;
}

void ___47-[UICollectionView _resetPrefetchedCachedCells]_block_invoke(int arg0) {
    r14 = arg0;
    rbx = [[rdx view] retain];
    if ((rbx != 0x0) && ([rbx _isInUpdateAnimation] == 0x0)) {
            [*(r14 + 0x20) addObject:rbx];
    }
    rdi = rbx;
    [rdi release];
    return;
}

int ___47-[UICollectionView _resetPrefetchedCachedCells]_block_invoke.1087(int arg0, int arg1) {
    rax = [*(arg0 + 0x20) _reuseCell:arg1 notifyDidEndDisplaying:0x0];
    return rax;
}

void -[UICollectionView _resetCurrentPrefetchContext](void * self, void * _cmd) {
    rbx = self;
    if ((!(BIT_TEST(rbx->_collectionViewFlags, 0x28))) && ([rbx->_currentPrefetchingContext hasRemainingItems] != 0x0)) {
            r14 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._prefetchDataSource + rbx);
            r15 = [[rbx->_currentPrefetchingContext remainingIndexPaths] retain];
            [r14 collectionView:rbx cancelPrefetchingForItemsAtIndexPaths:r15];
            [r15 release];
            [r14 release];
    }
    rdi = rbx->_currentPrefetchingContext;
    rbx->_currentPrefetchingContext = 0x0;
    [rdi release];
    return;
}

void -[UICollectionView _resetCurrentPrefetchContext](void * self, void * _cmd) {
    rbx = self;
    if ((!(BIT_TEST(rbx->_collectionViewFlags, 0x28))) && ([rbx->_currentPrefetchingContext hasRemainingItems] != 0x0)) {
            r14 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._prefetchDataSource + rbx);
            r15 = [[rbx->_currentPrefetchingContext remainingIndexPaths] retain];
            [r14 collectionView:rbx cancelPrefetchingForItemsAtIndexPaths:r15];
            [r15 release];
            [r14 release];
    }
    rdi = rbx->_currentPrefetchingContext;
    rbx->_currentPrefetchingContext = 0x0;
    [rdi release];
    return;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke(int arg0, int arg1) {
    var_118 = arg0;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [arg1 objectEnumerator];
    rax = [rax retain];
    var_128 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_F8 = rax;
    if (rax != 0x0) {
            var_120 = *var_E0;
            do {
                    r13 = 0x0;
                    do {
                            if (*var_E0 != var_120) {
                                    objc_enumerationMutation(var_128);
                            }
                            r15 = [[*(var_E8 + r13 * 0x8) _layoutAttributes] retain];
                            rbx = [r15 copy];
                            [r15 release];
                            [*(var_118 + 0x20) addObject:rbx];
                            [rbx release];
                            r13 = r13 + 0x1;
                    } while (r13 < var_F8);
                    rax = [var_128 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_F8 = rax;
            } while (rax != 0x0);
    }
    [var_128 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

NSInteger ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1110(void * _block, struct UICollectionViewLayoutAttributes * arg1, struct UICollectionViewLayoutAttributes * arg2) {
    rax = [[arg1 __indexPath] compare:[arg2 __indexPath]];
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke_2(int arg0) {
    rax = *(arg0 + 0x20);
    rax->_rotationAnimationCount = rax->_rotationAnimationCount + 0x1;
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1123(int arg0) {
    rbx = arg0;
    *(rbx + 0x20)->_rotationAnimationCount = *(rbx + 0x20)->_rotationAnimationCount - 0x1;
    rax = *(rbx + 0x20);
    if (rax->_rotationAnimationCount == 0x0) {
            *(rax + *_OBJC_IVAR_$_UICollectionView._rotationBoundsOffset + 0x8) = *_CGRectApplyAffineTransform;
            rax->_rotationBoundsOffset = *_CGPointZero;
            [*(rbx + 0x20) _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
            rax = [*(rbx + 0x20) contentOffset];
            *(rbx + 0x20)->_lastLayoutOffset = intrinsic_movsd(*(rbx + 0x20)->_lastLayoutOffset, xmm0);
            *(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._lastLayoutOffset + 0x8) = intrinsic_movsd(*(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._lastLayoutOffset + 0x8), xmm1);
    }
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1127(int arg0, int arg1, int arg2, int arg3) {
    r12 = [arg1 retain];
    var_E0 = [arg2 retain];
    var_D8 = [arg3 retain];
    (*(*(arg0 + 0x30) + 0x10))(*(arg0 + 0x30));
    rbx = [r12 retain];
    var_68 = rbx;
    rax = [var_E0 retain];
    var_E0 = rax;
    var_60 = rax;
    var_58 = [*(arg0 + 0x20) retain];
    r15 = [rbx retain];
    r12 = [var_D8 retain];
    var_98 = [*(arg0 + 0x28) retain];
    [UIView animateWithDuration:__NSConcreteStackBlock animations:__NSConcreteStackBlock completion:r8];
    [var_98 release];
    [r12 release];
    [r15 release];
    [var_58 release];
    [var_60 release];
    [var_68 release];
    _Block_object_dispose(0x0, 0x8);
    [r12 release];
    [var_E0 release];
    rax = [r15 release];
    return rax;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke_2.1128(int arg0) {
    r12 = arg0;
    rdx = [CALayer class];
    if ([*(r12 + 0x20) isKindOfClass:rdx] != 0x0) {
            r14 = [*(r12 + 0x20) retain];
            [*(r12 + 0x28) center];
            [r14 setPosition:rdx];
            if (r14 != 0x0) {
                    rdx = @selector(bounds);
                    objc_msgSend_stret(var_50, r14, rdx);
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_40 = intrinsic_movapd(var_40, xmm0);
                    var_50 = intrinsic_movapd(var_50, xmm0);
            }
            [*(r12 + 0x28) size];
            var_40 = intrinsic_movsd(var_40, xmm0);
            intrinsic_movsd(var_38, xmm1);
            [r14 setBounds:rdx, rcx];
            [*(r12 + 0x28) alpha];
            intrinsic_cvtsd2ss(xmm0, xmm0);
            [r14 setOpacity:rdx];
            rsi = *(r12 + 0x28);
            if (rsi != 0x0) {
                    [var_D0 transform3D];
            }
            else {
                    intrinsic_movaps(var_60, 0x0);
                    intrinsic_movaps(var_70, 0x0);
                    intrinsic_movaps(var_80, 0x0);
                    intrinsic_movaps(var_90, 0x0);
                    intrinsic_movaps(var_A0, 0x0);
                    intrinsic_movaps(var_B0, 0x0);
                    intrinsic_movaps(var_C0, 0x0);
                    var_D0 = intrinsic_movaps(var_D0, 0x0);
            }
            *rsp = rep intrinsic_movsq(*rsp, *var_D0);
            [r14 setTransform:rdx];
            [r14 release];
    }
    else {
            [*(r12 + 0x28) alpha];
            xmm0 = intrinsic_ucomisd(xmm0, 0x0);
            if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
                    rdx = [UICollectionReusableView class];
                    if ([*(r12 + 0x20) isKindOfClass:rdx] != 0x0) {
                            rax = [*(r12 + 0x20) _disableRasterizeInAnimations];
                            rcx = *(*(r12 + 0x38) + 0x8);
                            rdx = 0x0;
                            *(int8_t *)(rcx + 0x18) = rdx;
                            if (rax == 0x0) {
                                    r14 = [[*(r12 + 0x20) layer] retain];
                                    if ([r14 shouldRasterize] == 0x0) {
                                            *(int8_t *)(*(*(r12 + 0x38) + 0x8) + 0x18) = 0x1;
                                    }
                                    [r14 setShouldRasterize:0x1];
                                    [*(r12 + 0x30) _currentScreenScale];
                                    [r14 setRasterizationScale:rdx];
                                    [r14 release];
                            }
                    }
                    else {
                            r14 = [[*(r12 + 0x20) layer] retain];
                            if ([r14 shouldRasterize] == 0x0) {
                                    *(int8_t *)(*(*(r12 + 0x38) + 0x8) + 0x18) = 0x1;
                            }
                            [r14 setShouldRasterize:0x1];
                            [*(r12 + 0x30) _currentScreenScale];
                            [r14 setRasterizationScale:rdx];
                            [r14 release];
                    }
            }
            rdi = *(r12 + 0x30);
            rcx = *(r12 + 0x20);
            rdx = *(r12 + 0x28);
            [rdi _applyLayoutAttributes:rdx toView:rcx];
    }
    return;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1134(int arg0) {
    rbx = arg0;
    if (*(int8_t *)(*(*(rbx + 0x38) + 0x8) + 0x18) != 0x0) {
            r14 = [[*(rbx + 0x20) layer] retain];
            [r14 setShouldRasterize:0x0];
            [r14 release];
    }
    rdi = *(rbx + 0x28);
    if (rdi != 0x0) {
            (*(rdi + 0x10))();
    }
    rdi = *(rbx + 0x30);
    rax = (*(rdi + 0x10))(rdi);
    return rax;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1147(int arg0, int arg1, int arg2) {
    rbx = [arg2 mutableCopy];
    [*(arg0 + 0x20) setObject:rbx forKeyedSubscript:arg1];
    rdi = rbx;
    [rdi release];
    return;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1152(int arg0, int arg1, int arg2) {
    rbx = [arg2 mutableCopy];
    [*(arg0 + 0x20) setObject:rbx forKeyedSubscript:arg1];
    rdi = rbx;
    [rdi release];
    return;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1160(int arg0, int arg1, int arg2, int arg3) {
    r13 = [arg1 retain];
    var_80 = [arg2 retain];
    var_58 = r13;
    r13 = [r13 retain];
    var_50 = [*(arg0 + 0x20) retain];
    var_48 = [*(arg0 + 0x28) retain];
    [arg2 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_80 release];
    [var_48 release];
    [var_50 release];
    [var_58 release];
    rax = [r13 release];
    return rax;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke_2.1161(int arg0, int arg1, int arg2) {
    r14 = arg2;
    r12 = arg1;
    rbx = arg0;
    if ([r14 _isInUpdateAnimation] == 0x0) {
            [*(rbx + 0x20) removeObjectForKey:r12];
            var_40 = [*(rbx + 0x28) retain];
            r15 = objc_retainBlock(__NSConcreteStackBlock);
            if (*(int8_t *)(rbx + 0x48) != 0x0) {
                    r13 = *(rbx + 0x38);
                    if (r13 != 0x0) {
                            var_B0 = r15;
                            var_A8 = *(rbx + 0x28)->_layout;
                            rax = [r14 _layoutAttributes];
                            rax = [rax retain];
                            var_A0 = rax;
                            rax = [rax _elementKind];
                            rax = [rax retain];
                            if (r13 == 0x1) {
                                    rsi = @selector(finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:);
                            }
                            else {
                                    rsi = @selector(finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:);
                            }
                            rdx = rax;
                            r12 = [_objc_msgSend(var_A8, rsi) retain];
                            [rax release];
                            [var_A0 release];
                            r15 = var_B0;
                    }
                    else {
                            rdx = r12;
                            r12 = [[*(rbx + 0x28)->_layout finalLayoutAttributesForDisappearingItemAtIndexPath:rdx] retain];
                    }
                    if (r12 == 0x0) {
                            r13 = [[r14 _layoutAttributes] retain];
                            r12 = [r13 copy];
                            [r13 release];
                            [r12 setAlpha:rdx];
                    }
                    r15 = [r15 retain];
                    (*(*(rbx + 0x30) + 0x10))(*(rbx + 0x30), r14, r12, __NSConcreteStackBlock);
                    [r15 release];
                    [r12 release];
            }
            else {
                    (*(r15 + 0x10))(r15, *(rbx + 0x38), r14);
            }
            [r15 release];
            [var_40 release];
    }
    return;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke_3(int arg0) {
    r13 = arg0;
    r14 = [rdx retain];
    if ([r14 _isInUpdateAnimation] == 0x0) goto loc_96da93;

loc_96d9e5:
    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
    rdi = @"<Unknown File>";
    if (rbx != 0x0) {
            rdi = rbx;
    }
    r15 = [rdi retain];
    r12 = r14;
    [rbx release];
    rbx = [[NSAssertionHandler currentHandler] retain];
    [rbx handleFailureInMethod:*(r13 + 0x30) object:*(r13 + 0x20) file:r15 lineNumber:0xb24 description:@"Cell should never be in update animation"];
    [r15 release];
    [rbx release];
    r14 = r12;
    goto loc_96db83;

loc_96db83:
    rdi = r14;
    [rdi release];
    return;

loc_96da93:
    if (*(r13 + 0x28) == 0x0) goto loc_96dab3;

loc_96da9a:
    [*(r13 + 0x20) _reuseSupplementaryView:r14];
    goto loc_96db83;

loc_96dab3:
    if (([*(r13 + 0x20) _shouldPrefetchCells] == 0x0) || (*(r13 + 0x20)->_focusedCell == r14)) goto loc_96db6a;

loc_96dae1:
    rbx = [[r14 _layoutAttributes] retain];
    r15 = [[rbx indexPath] retain];
    [rbx release];
    if (r15 == 0x0) goto loc_96db61;

loc_96db29:
    rbx = [[*(r13 + 0x20)->_prefetchCacheItems objectForKeyedSubscript:r15] retain];
    [rbx release];
    if (rbx == 0x0) goto loc_96db9a;

loc_96db61:
    [r15 release];
    goto loc_96db6a;

loc_96db6a:
    [*(r13 + 0x20) _reuseCell:r14 notifyDidEndDisplaying:0x1];
    goto loc_96db83;

loc_96db9a:
    rbx = [_UICollectionViewPrefetchItem alloc];
    r12 = [[r14 _layoutAttributes] retain];
    rbx = [rbx initWithAttributes:r12];
    var_30 = rbx;
    [r12 release];
    [rbx setView:r14];
    rdx = rbx;
    [*(r13 + 0x20)->_prefetchCacheItems setObject:rdx forKeyedSubscript:r15];
    [r14 _setHiddenForReuse:0x1];
    rdi = *(r13 + 0x20);
    if ((rdi->_collectionViewFlags & 0x4) != 0x0) {
            r12 = objc_loadWeakRetained(rdi + *_OBJC_IVAR_$_UIScrollView._delegate);
            [r12 collectionView:*(r13 + 0x20) didEndDisplayingCell:r14 forItemAtIndexPath:r15];
            [r12 release];
    }
    [var_30 release];
    [r15 release];
    goto loc_96db83;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1176(int arg0) {
    rax = (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), *(arg0 + 0x28), *(arg0 + 0x30), *(*(arg0 + 0x20) + 0x10));
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1188(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x20) _visibleViewDictForElementCategory:0x1 elementKind:arg1] retain];
    (*(*(arg0 + 0x28) + 0x10))(*(arg0 + 0x28), rbx, arg2, 0x1);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1195(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x20) _visibleViewDictForElementCategory:0x2 elementKind:arg1] retain];
    (*(*(arg0 + 0x28) + 0x10))(*(arg0 + 0x28), rbx, arg2, 0x2);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1246(int arg0) {
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20));
    return;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1257(int arg0, int arg1, int arg2) {
    var_150 = arg2;
    var_F8 = arg1;
    r12 = arg0;
    intrinsic_movaps(var_C0, 0x0, arg2);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [arg2 copy];
    var_140 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_100 = rax;
    if (rax != 0x0) {
            var_110 = *var_E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_E0 != var_110) {
                                    objc_enumerationMutation(var_140);
                            }
                            rbx = *(var_E8 + r15 * 0x8);
                            r14 = r12;
                            r12 = [[*(r12 + 0x20) _visibleSupplementaryViewOfKind:var_F8 atIndexPath:rbx] retain];
                            if (r12 != 0x0) {
                                    [r12 _invalidatePreferredAttributes];
                                    rbx = [[*(r14 + 0x20)->_collectionViewData layoutAttributesForSupplementaryElementOfKind:var_F8 atIndexPath:rbx] retain];
                                    [*(r14 + 0x20) _checkForPreferredAttributesInView:r12 originalAttributes:rbx];
                                    [*(r14 + 0x20) _applyLayoutAttributes:rbx toView:r12];
                                    [rbx release];
                            }
                            [r12 release];
                            r15 = r15 + 0x1;
                            r12 = r14;
                    } while (r15 < var_100);
                    rax = [var_140 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_100 = rax;
            } while (rax != 0x0);
    }
    [var_140 release];
    [var_150 removeAllObjects];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1262(int arg0, int arg1, int arg2) {
    var_150 = arg2;
    var_F8 = arg1;
    r12 = arg0;
    intrinsic_movaps(var_C0, 0x0, arg2);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [arg2 copy];
    var_140 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_100 = rax;
    if (rax != 0x0) {
            var_110 = *var_E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_E0 != var_110) {
                                    objc_enumerationMutation(var_140);
                            }
                            rbx = *(var_E8 + r15 * 0x8);
                            r14 = r12;
                            r12 = [[*(r12 + 0x20) _visibleDecorationViewOfKind:var_F8 atIndexPath:rbx] retain];
                            if (r12 != 0x0) {
                                    [r12 _invalidatePreferredAttributes];
                                    rbx = [[*(r14 + 0x20)->_collectionViewData layoutAttributesForDecorationViewOfKind:var_F8 atIndexPath:rbx] retain];
                                    [*(r14 + 0x20) _checkForPreferredAttributesInView:r12 originalAttributes:rbx];
                                    [*(r14 + 0x20) _applyLayoutAttributes:rbx toView:r12];
                                    [rbx release];
                            }
                            [r12 release];
                            r15 = r15 + 0x1;
                            r12 = r14;
                    } while (r15 < var_100);
                    rax = [var_140 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_100 = rax;
            } while (rax != 0x0);
    }
    [var_140 release];
    [var_150 removeAllObjects];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1277(int arg0, int arg1, int arg2) {
    var_98 = arg0;
    r12 = [arg1 retain];
    r14 = [arg2 retain];
    rbx = [r14 __indexPath];
    rdx = rbx;
    r13 = [[r12 objectForKeyedSubscript:rdx] retain];
    if (r13 != 0x0) {
            [*(var_98 + 0x20) _applyLayoutAttributes:r14 toView:r13];
    }
    else {
            rdi = r14;
            var_A0 = rdi;
            r14 = [UICollectionReusableView alloc];
            [rdi size];
            rax = [r14 initWithSize:rdx];
            r14 = rbx;
            rbx = rax;
            var_B0 = rbx;
            [r13 release];
            [rbx setAutoresizingMask:0x0];
            [rbx setTranslatesAutoresizingMaskIntoConstraints:0x1];
            [rbx _setHostsLayoutEngine:0x1];
            [rbx _markAsDequeued];
            [r12 setObject:rbx forKeyedSubscript:r14];
            [*(var_98 + 0x20) _applyLayoutAttributes:var_A0 toView:rbx];
            var_A8 = r12;
            r13 = [[r12 objectForKeyedSubscript:r14] retain];
            rdx = 0x20000000000000 | *(var_98 + 0x20)->_collectionViewFlags;
            *(int8_t *)(*(var_98 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(*(var_98 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            *(var_98 + 0x20)->_collectionViewFlags = rdx;
            r14 = [[r13 snapshotViewAfterScreenUpdates:0x0, *(int8_t *)(*(var_98 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8)] retain];
            if (r13 != 0x0) {
                    rbx = var_50;
                    [rbx bounds];
            }
            else {
                    rbx = var_50;
                    intrinsic_movaps(var_40, 0x0);
                    intrinsic_movaps(var_50, 0x0);
            }
            [r14 setBounds:rdx, rcx];
            [r14 setAutoresizingMask:0x12];
            var_B8 = r14;
            [var_B0 addSubview:0x12];
            rdx = 0xffdfffffffffffff & *(var_98 + 0x20)->_collectionViewFlags;
            *(int8_t *)(*(var_98 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(*(var_98 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            *(var_98 + 0x20)->_collectionViewFlags = rdx;
            var_70 = r13;
            r15 = [r13 retain];
            var_68 = [*(var_98 + 0x20) retain];
            r13 = [var_B0 retain];
            r14 = var_A0;
            var_58 = [r14 retain];
            [UIView _performWithoutAnimation:__NSConcreteStackBlock];
            [var_58 release];
            [r13 release];
            [var_68 release];
            [var_70 release];
            [r15 release];
            [var_B8 release];
            r12 = var_A8;
    }
    [r13 release];
    [r14 release];
    rax = [r12 release];
    return rax;
}

void ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke_2.1292(int arg0) {
    rdi = arg0;
    rbx = *(rdi + 0x28);
    COND = *(rdi + 0x20) == 0x0;
    r14 = *(rdi + 0x30);
    if (!COND) {
            rdi = rbx;
            rdx = r14;
            [rdi insertSubview:rdx belowSubview:rcx];
    }
    else {
            rax = [*(rdi + 0x38) zIndex];
            rdi = rbx;
            rdx = r14;
            rcx = rax;
            [rdi _addControlledSubview:rdx atZIndex:rcx];
    }
    return;
}

int ___43-[UICollectionView _updateVisibleCellsNow:]_block_invoke.1304(int arg0) {
    var_29 = [*(arg0 + 0x20) isUserInteractionEnabled];
    [*(arg0 + 0x20) setUserInteractionEnabled:0x0];
    r12 = [[*(arg0 + 0x28) _screen] retain];
    r13 = [[r12 _focusSystem] retain];
    [r13 requestForcedFocusUpdateToEnvironment:*(arg0 + 0x28)];
    [r13 release];
    [r12 release];
    [*(arg0 + 0x28) updateFocusIfNeeded];
    [*(arg0 + 0x20) setUserInteractionEnabled:var_29 & 0xff];
    rax = [*(arg0 + 0x28) _reusePreviouslyFocusedManagedSubviewIfNeeded:*(arg0 + 0x20)];
    return rax;
}

void -[UICollectionView _ensureViewsAreLoadedInRect:](void * self, void * _cmd, struct CGRect arg2) {
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    self->_collectionViewFlags = 0x100000000000000 | self->_collectionViewFlags;
    *(self + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x18) = arg_18;
    *(self + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x10) = arg_10;
    *(self + *_OBJC_IVAR_$_UICollectionView._visibleBounds + 0x8) = arg_8;
    self->_visibleBounds = arg_0;
    [self _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x0];
    [self layoutBelowIfNeeded];
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) & 0xfe;
    return;
}

void * -[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, void * arg5, void * arg_0, void * arg_8, void * arg_10, bool arg_18, NSUInteger arg_20) {
    rcx = arg3;
    var_140 = self;
    var_120 = arg_20;
    var_128 = arg_18;
    var_118 = [arg2 retain];
    rbx = [rcx retain];
    r13 = [arg4 retain];
    r15 = [arg5 retain];
    r14 = [arg_0 retain];
    var_138 = [arg_8 retain];
    var_130 = [arg_10 retain];
    if ([rbx _isCell] != 0x0) {
            var_100 = rbx;
            rbx = [[rbx indexPath] retain];
            var_110 = r13;
            var_E8 = [[r13 finalLayoutAttributesForDisappearingItemAtIndexPath:rbx] retain];
            [rbx release];
            rbx = [[r15 indexPath] retain];
            rsi = @selector(initialLayoutAttributesForAppearingItemAtIndexPath:);
            var_108 = r14;
            rdx = rbx;
            var_F0 = [_objc_msgSend(r14, rsi) retain];
            rdi = rbx;
    }
    else {
            var_108 = r14;
            var_F8 = r15;
            var_100 = rbx;
            r12 = [rbx _isDecorationView];
            r14 = [[rbx _elementKind] retain];
            rax = [rbx indexPath];
            r15 = [rax retain];
            if (r12 != 0x0) {
                    var_110 = r13;
                    r12 = _objc_msgSend;
                    rbx = [[r13 finalLayoutAttributesForDisappearingDecorationElementOfKind:r14 atIndexPath:r15] retain];
                    var_E8 = [rbx copy];
                    [rbx release];
                    [r15 release];
                    r15 = var_F8;
                    rbx = [[r15 indexPath] retain];
                    rsi = @selector(initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:);
            }
            else {
                    var_110 = r13;
                    r12 = _objc_msgSend;
                    var_E8 = [[r13 finalLayoutAttributesForDisappearingSupplementaryElementOfKind:r14 atIndexPath:r15] retain];
                    [r15 release];
                    r15 = var_F8;
                    rbx = [[r15 indexPath] retain];
                    rsi = @selector(initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:);
            }
            rdx = r14;
            rcx = rbx;
            var_F0 = [(r12)(var_108, rsi, rdx, rcx) retain];
            [rbx release];
            rdi = r14;
    }
    [rdi release];
    r12 = var_E8;
    r13 = var_140;
    if (r12 == 0x0) {
            rbx = r13;
            rdx = var_100;
            rax = [var_F0 _isEquivalentTo:rdx];
            if ((r15 != 0x0) && (rax != 0x0)) {
                    r12 = [r15 retain];
            }
            else {
                    r13 = r15;
                    r12 = [var_100 copy];
                    [r12 setAlpha:rdx];
                    r15 = r13;
            }
            r13 = rbx;
    }
    var_E8 = r12;
    if (var_F0 == 0x0) {
            rbx = r13;
            rdx = r15;
            rax = [var_E8 _isEquivalentTo:rdx];
            rdi = var_100;
            if ((rdi != 0x0) && (rax != 0x0)) {
                    var_F0 = [rdi retain];
            }
            else {
                    r13 = r15;
                    rax = [r13 copy];
                    var_F0 = rax;
                    [rax setAlpha:rdx];
                    r15 = r13;
            }
            r13 = rbx;
    }
    CMP([r15 _isCell], 0x1);
    rdi = r13;
    r13 = r15;
    var_60 = [rdi retain];
    r14 = [var_100 retain];
    var_58 = r14;
    rax = [var_138 retain];
    var_100 = rax;
    var_50 = rax;
    r15 = r14;
    r14 = [var_130 retain];
    var_48 = r14;
    var_130 = objc_retainBlock(__NSConcreteStackBlock);
    rdx = r13;
    rbx = r13;
    if (([var_E8 _isEquivalentTo:rdx] == 0x0) || ([var_F0 _isEquivalentTo:r15] == 0x0)) goto loc_96ef0c;

loc_96ef1f:
    var_F8 = rbx;
    var_128 = r14;
    var_120 = r15;
    r12 = var_130;
    r13 = var_118;
    r14 = var_108;
    rbx = [(*(r12 + 0x10))(r12, r13, r14, rbx, 0x0, 0x1) retain];
    r15 = [[NSArray arrayWithObject:rbx] retain];
    rdi = rbx;
    goto loc_96ef93;

loc_96ef93:
    [rdi release];
    goto loc_96f364;

loc_96f364:
    [r12 release];
    [var_48 release];
    [var_50 release];
    [var_58 release];
    [var_60 release];
    [var_F0 release];
    [var_E8 release];
    [var_128 release];
    [var_100 release];
    [r14 release];
    [var_F8 release];
    [var_110 release];
    [var_120 release];
    [r13 release];
    rdi = r15;
    rax = [rdi autorelease];
    return rax;

loc_96ef0c:
    if ([r15 _isEquivalentTo:rbx] == 0x0) goto loc_96ef9e;
    goto loc_96ef1f;

loc_96ef9e:
    var_128 = r14;
    r12 = _objc_msgSend;
    r13 = [r15 _isTransitionVisibleTo:var_E8];
    rax = [var_F0 _isTransitionVisibleTo:rbx];
    if ((r13 == 0x0) || (rax == 0x0)) goto loc_96f180;

loc_96efe3:
    var_120 = r15;
    r13 = rbx;
    var_F8 = r13;
    r14 = [(r12)(r13, @selector(indexPath)) retain];
    (r12)(var_E8, @selector(setIndexPath:), r14);
    [r14 release];
    r12 = var_130;
    var_138 = [(*(r12 + 0x10))(r12, var_118, var_110, var_E8, 0x1, 0x0) retain];
    r14 = [var_118 retain];
    var_90 = r14;
    rax = [var_F0 retain];
    var_F0 = rax;
    var_88 = rax;
    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
    r14 = [(*(r12 + 0x10))(r12, r14, var_108, r13, 0x0, 0x0) retain];
    r15 = [[NSArray arrayWithObjects:var_138] retain];
    rdi = r14;
    r14 = var_108;
    [rdi release];
    [var_88 release];
    [var_90 release];
    r13 = var_118;
    [var_138 release];
    goto loc_96f364;

loc_96f180:
    rsi = @selector(indexPath);
    if (r13 == 0x0) goto loc_96f23b;

loc_96f190:
    var_120 = r15;
    var_F8 = rbx;
    rbx = [(r12)(rbx, rsi) retain];
    (r12)(var_E8, @selector(setIndexPath:), rbx);
    [rbx release];
    r13 = var_118;
    r14 = [(*(var_130 + 0x10))(var_130, r13, var_110, var_E8, 0x0, 0x1) retain];
    rax = (r12)(@class(NSArray), @selector(arrayWithObject:), r14);
    r12 = var_130;
    r15 = [rax retain];
    [r14 release];
    r14 = var_108;
    goto loc_96f364;

loc_96f23b:
    var_120 = r15;
    if (rax == 0x0) goto loc_96f3ea;

loc_96f24a:
    r13 = var_118;
    r14 = [r13 retain];
    var_C0 = r14;
    rax = [var_F0 retain];
    var_F0 = rax;
    var_B8 = rax;
    (r12)(@class(UIView), @selector(_performWithoutAnimation:), __NSConcreteStackBlock);
    var_F8 = rbx;
    r14 = [(*(var_130 + 0x10))(var_130, r14, var_108, rbx, 0x0, 0x1) retain];
    rax = (r12)(@class(NSArray), @selector(arrayWithObject:), r14);
    r12 = var_130;
    r15 = [rax retain];
    rdi = r14;
    r14 = var_108;
    [rdi release];
    [var_B8 release];
    [var_C0 release];
    goto loc_96f364;

loc_96f3ea:
    r12 = var_130;
    r13 = var_118;
    var_F8 = rbx;
    r14 = [(*(r12 + 0x10))(r12, r13, var_108, rbx, 0x0, 0x1) retain];
    r15 = [[NSArray arrayWithObject:r14] retain];
    rdi = r14;
    r14 = var_108;
    goto loc_96ef93;
}

float ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
    r8 = arg4;
    var_130 = arg5;
    r15 = arg0;
    var_118 = [arg1 retain];
    var_128 = [arg2 retain];
    var_120 = [arg3 retain];
    if (r8 != 0x0) {
            rdx = 0x20000000000000 | *(r15 + 0x20)->_collectionViewFlags;
            *(int8_t *)(*(r15 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(*(r15 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            *(r15 + 0x20)->_collectionViewFlags = rdx;
            r14 = [_UICollectionSnapshotView alloc];
            rsi = *(r15 + 0x28);
            if (rsi != 0x0) {
                    [var_50 frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            r12 = [r14 initWithFrame:rdx, rcx];
            [r12 setAutoresizingMask:0x0];
            [r12 setTranslatesAutoresizingMaskIntoConstraints:0x1];
            [r12 _setHostsLayoutEngine:0x1];
            [r12 _markAsDequeued];
            rdx = 0x0;
            r14 = [[var_118 snapshotViewAfterScreenUpdates:rdx] retain];
            if (r12 != 0x0) {
                    rbx = var_70;
                    [rbx bounds];
            }
            else {
                    rbx = var_70;
                    intrinsic_movaps(var_60, 0x0);
                    intrinsic_movaps(var_70, 0x0);
            }
            stack[2008] = *(rbx + 0x18);
            stack[2007] = *(rbx + 0x10);
            rbx = r14;
            var_130 = rbx;
            [rbx setBounds:rdx, rcx];
            [rbx setAutoresizingMask:0x12];
            [r12 addSubview:rbx];
            rcx = *(int8_t *)(*(r15 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rdx = 0xffdfffffffffffff & *(r15 + 0x20)->_collectionViewFlags;
            *(int8_t *)(*(r15 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rcx;
            *(r15 + 0x20)->_collectionViewFlags = rdx;
            var_88 = [*(r15 + 0x20) retain];
            rbx = [r12 retain];
            var_80 = rbx;
            var_78 = [var_118 retain];
            [UIView _performWithoutAnimation:__NSConcreteStackBlock];
            r13 = [rbx retain];
            var_C0 = r13;
            var_B8 = [*(r15 + 0x28) retain];
            var_B0 = [*(r15 + 0x20) retain];
            rdx = __NSConcreteStackBlock;
            [UIView _performWithoutAnimation:rdx];
            r12 = 0x0;
            rbx = var_120;
            if (*(int8_t *)(r15 + 0x50) != 0x0) {
                    r8 = *(r15 + 0x40);
                    rdx = r13;
                    rcx = rbx;
                    r12 = [[var_128 _animationForReusableView:rdx toLayoutAttributes:rcx type:r8] retain];
            }
            rax = [UICollectionViewAnimation alloc];
            intrinsic_movsd(xmm1, *0xc4f410);
            r14 = [rax initWithView:r13 viewType:0x0 finalLayoutAttributes:rbx startFraction:0x0 endFraction:0x0 animateFromCurrentPostion:r12 deleteAfterAnimation:stack[2007] customAnimations:stack[2008]];
            [r14 addStartupHandler:*(r15 + 0x30), rcx, rbx];
            var_F0 = r13;
            rbx = *(r15 + 0x38);
            rdi = r13;
            r15 = [rdi retain];
            var_E8 = [rbx retain];
            [r14 addCompletionHandler:__NSConcreteStackBlock];
            [var_E8 release];
            [var_F0 release];
            [r12 release];
            [var_B0 release];
            [var_B8 release];
            [var_C0 release];
            [var_78 release];
            [var_80 release];
            [var_88 release];
            [r15 release];
            [var_130 release];
            r13 = var_118;
    }
    else {
            r12 = 0x0;
            r13 = var_118;
            r14 = var_120;
            if (*(int8_t *)(r15 + 0x50) != 0x0) {
                    r12 = [[var_128 _animationForReusableView:r13 toLayoutAttributes:r14 type:*(r15 + 0x40)] retain];
            }
            rax = [UICollectionViewAnimation alloc];
            intrinsic_movsd(xmm1, *0xc4f410);
            r14 = [rax initWithView:r13 viewType:*(r15 + 0x48) finalLayoutAttributes:r14 startFraction:var_130 & 0xff endFraction:0x0 animateFromCurrentPostion:r12 deleteAfterAnimation:stack[2007] customAnimations:stack[2008]];
            [r14 addStartupHandler:*(r15 + 0x30)];
            [r14 addCompletionHandler:*(r15 + 0x38)];
            [r12 release];
    }
    [var_120 release];
    [var_128 release];
    [r13 release];
    rdi = r14;
    [rdi autorelease];
    return 0x0;
}

int ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke_2(int arg0) {
    rax = [*(arg0 + 0x20) insertSubview:*(arg0 + 0x28) below:*(arg0 + 0x30)];
    return rax;
}

int ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke.1328(int arg0) {
    [*(arg0 + 0x20) _setLayoutAttributes:*(arg0 + 0x28)];
    r14 = [*(arg0 + 0x30)->_layout retain];
    r15 = [*(arg0 + 0x20) retain];
    if (((r14 != 0x0) && (r15 != 0x0)) && (!(BIT_TEST(*(r15 + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    rdx = 0x1;
            }
            else {
                    rdx = 0x0;
            }
            [r15 _setHasMirrorTransform:rdx];
    }
    [r15 release];
    rdi = r14;
    rax = [rdi release];
    return rax;
}

void ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke.1337(int arg0, int arg1) {
    r14 = arg1;
    [*(arg0 + 0x20) removeFromSuperview];
    rdi = *(arg0 + 0x28);
    if (rdi != 0x0) {
            (*(rdi + 0x10))();
    }
    return;
}

int ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke.1350(int arg0) {
    rax = [*(arg0 + 0x20) _setLayoutAttributes:*(arg0 + 0x28)];
    return rax;
}

int ___213-[UICollectionView _doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:]_block_invoke.1356(int arg0) {
    rax = [*(arg0 + 0x20) _setLayoutAttributes:*(arg0 + 0x28)];
    return rax;
}

void -[UICollectionView _updateBackgroundView](void * self, void * _cmd) {
    [var_40 bounds];
    [self->_backgroundView setFrame:rdx, rcx];
    [self _moveContentSubview:self->_backgroundView toBack:0x1];
    return;
}

void * -[UICollectionView _viewControllerToNotifyOnLayoutSubviews](void * self, void * _cmd) {
    r15 = self;
    r14 = [[self _viewControllerForAncestor] retain];
    if ([r14 isKindOfClass:[UICollectionViewController class]] != 0x0) {
            rbx = [[r14 collectionView] retain];
            [rbx release];
            if (rbx != r15) {
                    rax = [[r15 super] _viewControllerToNotifyOnLayoutSubviews];
                    rax = [rax retain];
            }
            else {
                    rax = [r14 retain];
            }
    }
    else {
            rax = [[r15 super] _viewControllerToNotifyOnLayoutSubviews];
            rax = [rax retain];
    }
    rbx = rax;
    [r14 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void -[UICollectionView _setVisibleView:forLayoutAttributes:](void * self, void * _cmd, void * arg2, void * arg3) {
    var_30 = [arg2 retain];
    var_38 = [arg3 retain];
    r14 = [arg3 representedElementCategory];
    r14 = [[self _visibleViewDictForElementCategory:r14 elementKind:[arg3 __elementKind]] retain];
    rbx = [arg3 __indexPath];
    [var_38 release];
    [r14 setObject:arg2 forKey:rbx];
    [var_30 release];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _applyBlockToAllReusableViews:](void * self, void * _cmd, void * arg2) {
    rax = [arg2 retain];
    rax = [rax retain];
    var_30 = rax;
    var_80 = rax;
    r14 = [rax retain];
    ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke(__NSConcreteStackBlock, self->_visibleCellsDict);
    ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke.1369(__NSConcreteStackBlock, self->_visibleSupplementaryViewsDict);
    ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke.1369(__NSConcreteStackBlock, self->_visibleDecorationViewsDict);
    ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke_2(__NSConcreteStackBlock, self->_cellReuseQueues);
    ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke_2(__NSConcreteStackBlock, self->_supplementaryViewReuseQueues);
    [var_80 release];
    [var_30 release];
    [r14 release];
    return;
}

int ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke(int arg0, int arg1) {
    r12 = arg0;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    r14 = [[arg1 objectEnumerator] retain];
    rbx = [r14 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r13 = *var_E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_E0 != r13) {
                                    objc_enumerationMutation(r14);
                            }
                            (*(*(r12 + 0x20) + 0x10))(*(r12 + 0x20), *(var_E8 + r15 * 0x8));
                            r15 = r15 + 0x1;
                    } while (r15 < rbx);
                    rbx = [r14 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    [r14 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke.1369(int arg0, int arg1) {
    r12 = arg0;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    r14 = [[arg1 objectEnumerator] retain];
    rbx = [r14 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r13 = *var_E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_E0 != r13) {
                                    objc_enumerationMutation(r14);
                            }
                            (*(*(r12 + 0x20) + 0x10))(*(r12 + 0x20), *(var_E8 + r15 * 0x8));
                            r15 = r15 + 0x1;
                    } while (r15 < rbx);
                    rbx = [r14 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    [r14 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___50-[UICollectionView _applyBlockToAllReusableViews:]_block_invoke_2(int arg0, int arg1) {
    rbx = arg0;
    rax = [arg1 retain];
    var_1F0 = rax;
    intrinsic_movaps(var_140, 0x0);
    intrinsic_movaps(var_150, 0x0);
    var_160 = intrinsic_movaps(var_160, 0x0);
    var_170 = intrinsic_movaps(var_170, 0x0);
    rax = [rax objectEnumerator];
    rax = [rax retain];
    var_1E0 = rax;
    rax = [rax countByEnumeratingWithState:var_170 objects:var_B0 count:0x10];
    var_1C8 = rax;
    if (rax != 0x0) {
            var_1D8 = *var_160;
            var_1E8 = @selector(countByEnumeratingWithState:objects:count:);
            do {
                    var_1D0 = @selector(countByEnumeratingWithState:objects:count:);
                    r14 = 0x0;
                    do {
                            if (*var_160 != var_1D8) {
                                    objc_enumerationMutation(var_1E0);
                            }
                            var_1C0 = r14;
                            var_180 = intrinsic_movaps(var_180, 0x0);
                            var_190 = intrinsic_movaps(var_190, 0x0);
                            var_1A0 = intrinsic_movaps(var_1A0, 0x0);
                            var_1B0 = intrinsic_movaps(var_1B0, 0x0);
                            r13 = [*(var_168 + r14 * 0x8) retain];
                            r14 = _objc_msgSend(r13, var_1D0);
                            if (r14 != 0x0) {
                                    r12 = *var_1A0;
                                    do {
                                            r15 = 0x0;
                                            do {
                                                    if (*var_1A0 != r12) {
                                                            objc_enumerationMutation(r13);
                                                    }
                                                    (*(*(rbx + 0x20) + 0x10))(*(rbx + 0x20), *(var_1A8 + r15 * 0x8));
                                                    r15 = r15 + 0x1;
                                            } while (r15 < r14);
                                            r14 = [r13 countByEnumeratingWithState:var_1B0 objects:var_130 count:0x10];
                                    } while (r14 != 0x0);
                            }
                            [r13 release];
                            r14 = var_1C0 + 0x1;
                    } while (r14 < var_1C8);
                    rax = _objc_msgSend(var_1E0, var_1E8);
                    var_1C8 = rax;
            } while (rax != 0x0);
    }
    [var_1E0 release];
    [var_1F0 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

void -[UICollectionView layoutSubviews](void * self, void * _cmd) {
    r13 = self;
    [[r13 super] layoutSubviews];
    rax = r13->_collectionViewFlags;
    if (((rax & 0x24000000000000) == 0x0) && (rax >= 0x0)) {
            rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + r13);
            [rbx release];
            if (rbx != 0x0) {
                    *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) | 0x80;
                    [r13 _reloadDataIfNeeded];
                    rdx = @selector(_visibleBounds);
                    objc_msgSend_stret(var_58, r13, rdx);
                    rcx = var_50;
                    [r13->_collectionViewData validateLayoutInRect:rdx, rcx];
                    xmm0 = intrinsic_movsd(xmm0, var_58);
                    xmm1 = intrinsic_movsd(xmm1, var_50);
                    [r13 _offsetPinnedReorderedItemsWithCurrentContentOffset:rdx];
                    if ((!(BIT_TEST(r13->_collectionViewFlags, 0x2b))) && (r13->_reloadingSuspendedCount == 0x0)) {
                            r14 = objc_autoreleasePoolPush();
                            rdx = 0x1;
                            rbx = [r13 _updateVisibleCellsNow:rdx];
                            if ([r13 _shouldPrefetchCells] != 0x0) {
                                    var_90 = rbx;
                                    rbx = r13 + *_OBJC_IVAR_$_UICollectionView._prefetchVelocityIntegrator;
                                    rdi = r13->_prefetchVelocityIntegrator;
                                    if (rdi == 0x0) {
                                            *rbx = [[_UIVelocityIntegrator alloc] init];
                                            [*rbx release];
                                            xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                                            [*rbx setHysteresisTimeInterval:rdx];
                                            xmm0 = intrinsic_movsd(xmm0, *0xc55218);
                                            [*rbx setResetHysteresisOnSampleThetaDiff:rdx];
                                            objc_initWeak(var_60, r13);
                                            objc_copyWeak(var_68, var_60);
                                            rdx = __NSConcreteStackBlock;
                                            [*rbx setDidResetHysteresisOnThetaDiffHandler:rdx];
                                            objc_destroyWeak(var_68);
                                            objc_destroyWeak(var_60);
                                            rdi = *rbx;
                                    }
                                    intrinsic_movsd(xmm0, var_58);
                                    intrinsic_movsd(xmm1, var_50);
                                    [rdi addSample:rdx];
                                    if ([*rbx hasVelocity] != 0x0) {
                                            [*rbx velocity];
                                            [r13 _pruneCachedPrefetchViewsForVelocity:rdx];
                                            if (var_90 != 0x0) {
                                                    if (sign_extend_64(*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8)) < 0x0) {
                                                            [r13 _performReloadPrefetchIfNeeded];
                                                    }
                                            }
                                            else {
                                                    [*rbx velocity];
                                                    rdx = 0x1;
                                                    [r13 _prefetchItemsForVelocity:rdx maxItemsToPrefetch:rcx];
                                            }
                                    }
                                    else {
                                            if (sign_extend_64(*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8)) < 0x0) {
                                                    [r13 _performReloadPrefetchIfNeeded];
                                            }
                                    }
                            }
                            objc_autoreleasePoolPop(r14);
                    }
                    [r13 _updateBackgroundView];
                    r14 = [[r13 window] retain];
                    rbx = [[r14 screen] retain];
                    if ([rbx supportsFocus] != 0x0) {
                            rdi = rbx;
                            [rdi release];
                            [r14 release];
                            if (!(BIT_TEST(r13->_collectionViewFlags, 0x37))) {
                                    [r13 _highlightFirstVisibleItemIfAppropriate];
                            }
                    }
                    else {
                            [rbx release];
                            [r14 release];
                    }
                    rax = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
                    r13->_collectionViewFlags = 0x80000000000000 | 0x7f7fffffffffffff & r13->_collectionViewFlags;
                    *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = rax & 0x7f;
            }
    }
    return;
}

void ___34-[UICollectionView layoutSubviews]_block_invoke(int arg0) {
    rbx = objc_loadWeakRetained(arg0 + 0x20);
    [rbx _resetCurrentPrefetchContext];
    rdi = rbx;
    [rdi release];
    return;
}

bool -[UICollectionView _visible](void * self, void * _cmd) {
    rbx = self;
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rax = 0x1;
            if (*(int32_t *)__UIApplicationLinkedOnVersion <= 0x6ffff) {
                    [var_28 bounds];
                    rax = CGRectIsEmpty(var_28);
                    rax = rax ^ 0x1;
            }
    }
    else {
            rax = 0x1;
            if (__UIApplicationLinkedOnOrAfter(0x70000) == 0x0) {
                    [var_28 bounds];
                    rax = CGRectIsEmpty(var_28);
                    rax = rax ^ 0x1;
            }
    }
    return rax;
}

void -[UICollectionView setCollectionViewLayout:](void * self, void * _cmd, void * arg2) {
    rbx = _cmd;
    r14 = self;
    r13 = [arg2 retain];
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = r13 != 0x0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    var_30 = rbx;
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r12 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_30 object:r14 file:r12 lineNumber:0xe0b description:@"layout cannot be nil in setCollectionViewLayout:"];
                            [r12 release];
                            [rbx release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r15 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:.__s_category);
                            if (os_log_type_enabled(*(r15 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f426, *(r15 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:", rax + 0xfffffffffffffff0, 0x2);
                            }
                    }
            }
    }
    else {
            rcx = r13 != 0x0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    var_30 = rbx;
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r12 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_30 object:r14 file:r12 lineNumber:0xe0b description:@"layout cannot be nil in setCollectionViewLayout:"];
                            [r12 release];
                            [rbx release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r15 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:.__s_category);
                            if (os_log_type_enabled(*(r15 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f426, *(r15 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:", rax + 0xfffffffffffffff0, 0x2);
                            }
                    }
            }
    }
    [r14 _setCollectionViewLayout:r13 animated:0x0 isInteractive:0x0 completion:0x0];
    [r13 release];
    return;
}

void -[UICollectionView setCollectionViewLayout:animated:](void * self, void * _cmd, void * arg2, bool arg3) {
    r13 = arg3;
    rbx = _cmd;
    r14 = self;
    r15 = [arg2 retain];
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = r15 != 0x0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    var_30 = rbx;
                    if (rcx == 0x0) {
                            r12 = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (r12 != 0x0) {
                                    rdi = r12;
                            }
                            var_34 = r13;
                            r13 = [rdi retain];
                            [r12 release];
                            r12 = [[NSAssertionHandler currentHandler] retain];
                            [r12 handleFailureInMethod:var_30 object:r14 file:r13 lineNumber:0xe11 description:@"layout cannot be nil in setCollectionViewLayout:animated:"];
                            rdi = r13;
                            r13 = var_34;
                            [rdi release];
                            [r12 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r12 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:animated:.__s_category);
                            if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                    rbx = r13;
                                    r13 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f26d, *(r12 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:animated:", rax + 0xfffffffffffffff0, 0x2);
                                    r13 = rbx;
                            }
                    }
            }
    }
    else {
            rcx = r15 != 0x0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    var_30 = rbx;
                    if (rcx == 0x0) {
                            r12 = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (r12 != 0x0) {
                                    rdi = r12;
                            }
                            var_34 = r13;
                            r13 = [rdi retain];
                            [r12 release];
                            r12 = [[NSAssertionHandler currentHandler] retain];
                            [r12 handleFailureInMethod:var_30 object:r14 file:r13 lineNumber:0xe11 description:@"layout cannot be nil in setCollectionViewLayout:animated:"];
                            rdi = r13;
                            r13 = var_34;
                            [rdi release];
                            [r12 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r12 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:animated:.__s_category);
                            if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                    rbx = r13;
                                    r13 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f26d, *(r12 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:animated:", rax + 0xfffffffffffffff0, 0x2);
                                    r13 = rbx;
                            }
                    }
            }
    }
    [r14 _setCollectionViewLayout:r15 animated:r13 & 0xff isInteractive:0x0 completion:0x0];
    [r15 release];
    return;
}

void -[UICollectionView setCollectionViewLayout:animated:completion:](void * self, void * _cmd, void * arg2, bool arg3, void * arg4) {
    var_2C = arg3;
    r13 = _cmd;
    r14 = self;
    r15 = [arg2 retain];
    r12 = [arg4 retain];
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = r15 != 0x0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    var_38 = r13;
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            var_40 = [rdi retain];
                            [rbx release];
                            r13 = [[NSAssertionHandler currentHandler] retain];
                            [r13 handleFailureInMethod:var_38 object:r14 file:var_40 lineNumber:0xe17 description:@"layout cannot be nil in setCollectionViewLayout:animated:completion:"];
                            [var_40 release];
                            [r13 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r13 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:animated:completion:.__s_category);
                            if (os_log_type_enabled(*(r13 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f0a3, *(r13 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:animated:completion:", rax + 0xfffffffffffffff0, 0x2);
                            }
                    }
            }
    }
    else {
            rcx = r15 != 0x0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    var_38 = r13;
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            var_40 = [rdi retain];
                            [rbx release];
                            r13 = [[NSAssertionHandler currentHandler] retain];
                            [r13 handleFailureInMethod:var_38 object:r14 file:var_40 lineNumber:0xe17 description:@"layout cannot be nil in setCollectionViewLayout:animated:completion:"];
                            [var_40 release];
                            [r13 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r13 = ___UILogGetCategoryCachedImpl("Assert", _setCollectionViewLayout:animated:completion:.__s_category);
                            if (os_log_type_enabled(*(r13 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68f0a3, *(r13 + 0x8), 0x10, "layout cannot be nil in setCollectionViewLayout:animated:completion:", rax + 0xfffffffffffffff0, 0x2);
                            }
                    }
            }
    }
    [r14 _setCollectionViewLayout:r15 animated:var_2C & 0xff isInteractive:0x0 completion:r12];
    [r12 release];
    [r15 release];
    return;
}

void -[UICollectionView setCollectionViewLayout:withAnimator:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    [self _setCollectionViewLayout:rbx animated:0x1 isInteractive:0x0 completion:0x0 animator:arg3];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:](void * self, void * _cmd, void * arg2, bool arg3, bool arg4, void * arg5) {
    rbx = [arg2 retain];
    [self _setCollectionViewLayout:rbx animated:arg3 & 0xff isInteractive:arg4 & 0xff completion:arg5 animator:0x0];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:](void * self, void * _cmd, void * arg2, bool arg3, bool arg4, void * arg5, void * arg_0) {
    var_850 = arg4;
    var_840 = arg3;
    r15 = [arg2 retain];
    r13 = [arg5 retain];
    r14 = r15;
    rax = [arg_0 retain];
    rbx = self;
    if (rbx->_layout == r14) goto loc_9730e7;

loc_9710d6:
    var_858 = r13;
    var_848 = rax;
    [rbx _resetPrefetchState];
    rbx->_focusedViewType = 0x0;
    [rbx _setFocusedCellIndexPath:0x0];
    [rbx _setFocusedCell:0x0];
    [r14 _setCollectionView:rbx];
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    var_7F0 = rbx;
                    rbx = [[[[r14 class] invalidationContextClass] alloc] init];
                    [rbx _setInvalidateEverything:0x1];
                    [rbx _setInvalidateDataSourceCounts:0x1];
                    [r14 _invalidateLayoutUsingContext:rbx];
                    if ((var_840 != 0x0) || (var_850 != 0x0)) {
                            [var_7F0 _stopScrollingAndZoomingAnimations];
                    }
                    [rbx release];
                    rbx = var_7F0;
            }
    }
    else {
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    var_7F0 = rbx;
                    rbx = [[[[r14 class] invalidationContextClass] alloc] init];
                    [rbx _setInvalidateEverything:0x1];
                    [rbx _setInvalidateDataSourceCounts:0x1];
                    [r14 _invalidateLayoutUsingContext:rbx];
                    if ((var_840 != 0x0) || (var_850 != 0x0)) {
                            [var_7F0 _stopScrollingAndZoomingAnimations];
                    }
                    [rbx release];
                    rbx = var_7F0;
            }
    }
    if (([rbx _visible] == 0x0) || (!(BIT_TEST(rbx->_collectionViewFlags, 0x37)))) goto loc_971235;

loc_9712d4:
    r13 = rbx;
    rdx = [UICollectionViewTransitionLayout class];
    if ([rbx->_layout isKindOfClass:rdx] == 0x0) {
            [r13->_layout _prepareForTransitionToLayout:r14];
            rdx = r13->_layout;
            [r14 _prepareForTransitionFromLayout:rdx];
    }
    rax = [UICollectionViewData alloc];
    rcx = r14;
    rax = [rax initWithCollectionView:r13 layout:rcx];
    var_860 = rax;
    [rax _prepareToLoadData];
    rdx = [UICollectionViewTransitionLayout class];
    if ([r14 isKindOfClass:rdx] != 0x0) {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            [r14 setTransitionProgress:rdx];
    }
    var_7F8 = r14;
    *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x6) | 0x4;
    r12 = [[r13 indexPathsForSelectedItems] retain];
    r15 = [[NSMutableSet setWithArray:r12, rcx] retain];
    var_888 = r15;
    [r12 release];
    r12 = [[r13 indexPathsForVisibleItems] retain];
    r14 = [[NSMutableSet setWithArray:r12, rcx] retain];
    [r12 release];
    r12 = r14;
    if ([r12 intersectsSet:r15, rcx] != 0x0) {
            rdx = var_888;
            [r12 intersectSet:rdx];
    }
    rbx = r13;
    [var_250 _visibleBounds];
    CGRectGetMidX(var_250);
    var_7D0 = intrinsic_movsd(var_7D0, xmm0);
    CGRectGetMidY(var_250);
    var_7D8 = intrinsic_movsd(var_7D8, xmm0);
    r13 = [r12 count];
    if ((rbx->_collectionViewFlags & 0x10) == 0x0) {
            var_7F0 = rbx;
            rax = 0x0;
            var_808 = rax;
            if ([r12 count] == 0x1) {
                    rdi = [r12 anyObject];
                    r15 = [rdi retain];
            }
            else {
                    var_810 = r13;
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_260, xmm0);
                    intrinsic_movapd(var_270, xmm0);
                    var_280 = intrinsic_movapd(var_280, xmm0);
                    var_290 = intrinsic_movapd(var_290, xmm0);
                    var_880 = r12;
                    rax = [r12 retain];
                    var_7E8 = rax;
                    rcx = var_B0;
                    rax = [rax countByEnumeratingWithState:var_290 objects:rcx count:0x10];
                    var_7B0 = rax;
                    var_830 = 0x0;
                    r15 = var_7F0;
                    if (rax != 0x0) {
                            var_7E0 = *var_280;
                            xmm0 = intrinsic_movsd(xmm0, *0xc4fc18);
                            var_7A0 = intrinsic_movsd(var_7A0, xmm0);
                            var_830 = 0x0;
                            do {
                                    r13 = 0x0;
                                    do {
                                            if (*var_280 != var_7E0) {
                                                    objc_enumerationMutation(var_7E8);
                                            }
                                            r14 = *(var_288 + r13 * 0x8);
                                            r12 = [[r15->_collectionViewData layoutAttributesForItemAtIndexPath:r14] retain];
                                            [r12 center];
                                            xmm0 = intrinsic_subsd(xmm0, var_7D0);
                                            xmm0 = intrinsic_mulsd(xmm0, xmm0);
                                            xmm1 = intrinsic_subsd(xmm1, var_7D8);
                                            xmm0 = intrinsic_cvtsd2ss(0x0, intrinsic_addsd(intrinsic_mulsd(xmm1, xmm1), xmm0));
                                            xmm0 = intrinsic_sqrtss(xmm0, xmm0);
                                            xmm1 = intrinsic_cvtss2sd(0x0, xmm0);
                                            xmm0 = intrinsic_movsd(xmm0, var_7A0);
                                            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                                            if (xmm0 > 0x0) {
                                                    var_7A0 = intrinsic_movsd(var_7A0, xmm1);
                                                    rbx = [r14 retain];
                                                    [var_830 release];
                                                    var_830 = rbx;
                                            }
                                            [r12 release];
                                            r13 = r13 + 0x1;
                                    } while (r13 < var_7B0);
                                    rcx = var_B0;
                                    rax = [var_7E8 countByEnumeratingWithState:var_290 objects:rcx count:0x10];
                                    var_7B0 = rax;
                            } while (rax != 0x0);
                    }
                    var_7F0 = r15;
                    rdi = var_7E8;
                    [rdi release];
                    r12 = var_880;
                    r15 = var_830;
                    r13 = var_810;
            }
            rsi = var_860;
            if (r15 != 0x0) {
                    r14 = [[rsi layoutAttributesForItemAtIndexPath:r15] retain];
                    if (var_808 != 0x0) {
                            if (r14 != 0x0) {
                                    [var_2D0 frame];
                                    xmm0 = intrinsic_movapd(xmm0, var_2D0);
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    intrinsic_movapd(var_2C0, xmm0);
                                    intrinsic_movapd(var_2D0, xmm0);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            }
                            var_7A0 = intrinsic_movapd(var_7A0, xmm0);
                            rbx = [[var_7F0->_collectionViewData layoutAttributesForItemAtIndexPath:r15] retain];
                            if (rbx != 0x0) {
                                    [var_2F0 frame];
                                    xmm0 = intrinsic_movsd(xmm0, var_2F0);
                                    xmm0 = intrinsic_subsd(xmm0, var_250);
                                    var_7B0 = intrinsic_movapd(var_7B0, xmm0);
                                    [var_310 frame];
                                    xmm2 = intrinsic_movapd(xmm2, var_7B0);
                                    xmm0 = intrinsic_movsd(xmm0, var_308);
                            }
                            else {
                                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                    intrinsic_movapd(var_2E0, xmm1);
                                    intrinsic_movapd(var_2F0, xmm1);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    xmm2 = intrinsic_xorpd(xmm2, xmm2);
                                    xmm2 = intrinsic_subsd(xmm2, var_250);
                                    intrinsic_movapd(var_300, xmm1);
                                    intrinsic_movapd(var_310, xmm1);
                            }
                            xmm0 = intrinsic_subsd(xmm0, var_248);
                            xmm1 = intrinsic_movupd(xmm1, var_240);
                            var_2A0 = intrinsic_movapd(var_2A0, xmm1);
                            xmm2 = intrinsic_unpcklpd(xmm2, xmm0);
                            xmm0 = intrinsic_movapd(xmm0, var_7A0);
                            xmm0 = intrinsic_subpd(xmm0, xmm2);
                            var_2B0 = intrinsic_movapd(0x0, xmm0);
                            [rbx release];
                    }
                    else {
                            [r14 center];
                            xmm2 = intrinsic_movdqu(xmm2, var_240);
                            var_2A0 = zero_extend_64(xmm2);
                            xmm3 = intrinsic_pshufd(xmm2, 0x4e);
                            var_298 = zero_extend_64(xmm3);
                            xmm2 = intrinsic_mulpd(xmm2, *(int128_t *)0xc4f660);
                            xmm0 = intrinsic_unpcklpd(xmm0, xmm1);
                            xmm0 = intrinsic_subpd(xmm0, xmm2);
                            var_2B0 = intrinsic_movapd(0x0, xmm0);
                    }
                    rdi = r14;
                    [rdi release];
                    rsi = var_860;
            }
            else {
                    var_298 = var_238;
                    var_2A0 = var_240;
                    var_2A8 = var_248;
                    var_2B0 = var_250;
                    r15 = 0x0;
            }
    }
    else {
            var_7F0 = rbx;
            rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            r15 = [[rbx _indexPathOfReferenceItemForLayoutTransitionInCollectionView:rdx] retain];
            [rbx release];
            rax = COND_BYTE_SET(NE);
            if (r15 != 0x0) {
                    var_808 = 0x1;
                    rsi = var_860;
                    r14 = [[rsi layoutAttributesForItemAtIndexPath:r15] retain];
                    if (var_808 != 0x0) {
                            if (r14 != 0x0) {
                                    [var_2D0 frame];
                                    xmm0 = intrinsic_movapd(xmm0, var_2D0);
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    intrinsic_movapd(var_2C0, xmm0);
                                    intrinsic_movapd(var_2D0, xmm0);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            }
                            var_7A0 = intrinsic_movapd(var_7A0, xmm0);
                            rbx = [[var_7F0->_collectionViewData layoutAttributesForItemAtIndexPath:r15] retain];
                            if (rbx != 0x0) {
                                    [var_2F0 frame];
                                    xmm0 = intrinsic_movsd(xmm0, var_2F0);
                                    xmm0 = intrinsic_subsd(xmm0, var_250);
                                    var_7B0 = intrinsic_movapd(var_7B0, xmm0);
                                    [var_310 frame];
                                    xmm2 = intrinsic_movapd(xmm2, var_7B0);
                                    xmm0 = intrinsic_movsd(xmm0, var_308);
                            }
                            else {
                                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                    intrinsic_movapd(var_2E0, xmm1);
                                    intrinsic_movapd(var_2F0, xmm1);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    xmm2 = intrinsic_xorpd(xmm2, xmm2);
                                    xmm2 = intrinsic_subsd(xmm2, var_250);
                                    intrinsic_movapd(var_300, xmm1);
                                    intrinsic_movapd(var_310, xmm1);
                            }
                            xmm0 = intrinsic_subsd(xmm0, var_248);
                            xmm1 = intrinsic_movupd(xmm1, var_240);
                            var_2A0 = intrinsic_movapd(var_2A0, xmm1);
                            xmm2 = intrinsic_unpcklpd(xmm2, xmm0);
                            xmm0 = intrinsic_movapd(xmm0, var_7A0);
                            xmm0 = intrinsic_subpd(xmm0, xmm2);
                            var_2B0 = intrinsic_movapd(0x0, xmm0);
                            [rbx release];
                    }
                    else {
                            [r14 center];
                            xmm2 = intrinsic_movdqu(xmm2, var_240);
                            var_2A0 = zero_extend_64(xmm2);
                            xmm3 = intrinsic_pshufd(xmm2, 0x4e);
                            var_298 = zero_extend_64(xmm3);
                            xmm2 = intrinsic_mulpd(xmm2, *(int128_t *)0xc4f660);
                            xmm0 = intrinsic_unpcklpd(xmm0, xmm1);
                            xmm0 = intrinsic_subpd(xmm0, xmm2);
                            var_2B0 = intrinsic_movapd(0x0, xmm0);
                    }
                    rdi = r14;
                    [rdi release];
                    rsi = var_860;
            }
            else {
                    var_808 = rax;
                    if ([r12 count] == 0x1) {
                            rdi = [r12 anyObject];
                            r15 = [rdi retain];
                    }
                    else {
                            var_810 = r13;
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            intrinsic_movapd(var_260, xmm0);
                            intrinsic_movapd(var_270, xmm0);
                            var_280 = intrinsic_movapd(var_280, xmm0);
                            var_290 = intrinsic_movapd(var_290, xmm0);
                            var_880 = r12;
                            rax = [r12 retain];
                            var_7E8 = rax;
                            rcx = var_B0;
                            rax = [rax countByEnumeratingWithState:var_290 objects:rcx count:0x10];
                            var_7B0 = rax;
                            var_830 = 0x0;
                            r15 = var_7F0;
                            if (rax != 0x0) {
                                    var_7E0 = *var_280;
                                    xmm0 = intrinsic_movsd(xmm0, *0xc4fc18);
                                    var_7A0 = intrinsic_movsd(var_7A0, xmm0);
                                    var_830 = 0x0;
                                    do {
                                            r13 = 0x0;
                                            do {
                                                    if (*var_280 != var_7E0) {
                                                            objc_enumerationMutation(var_7E8);
                                                    }
                                                    r14 = *(var_288 + r13 * 0x8);
                                                    r12 = [[r15->_collectionViewData layoutAttributesForItemAtIndexPath:r14] retain];
                                                    [r12 center];
                                                    xmm0 = intrinsic_subsd(xmm0, var_7D0);
                                                    xmm0 = intrinsic_mulsd(xmm0, xmm0);
                                                    xmm1 = intrinsic_subsd(xmm1, var_7D8);
                                                    xmm0 = intrinsic_cvtsd2ss(0x0, intrinsic_addsd(intrinsic_mulsd(xmm1, xmm1), xmm0));
                                                    xmm0 = intrinsic_sqrtss(xmm0, xmm0);
                                                    xmm1 = intrinsic_cvtss2sd(0x0, xmm0);
                                                    xmm0 = intrinsic_movsd(xmm0, var_7A0);
                                                    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                                                    if (xmm0 > 0x0) {
                                                            var_7A0 = intrinsic_movsd(var_7A0, xmm1);
                                                            rbx = [r14 retain];
                                                            [var_830 release];
                                                            var_830 = rbx;
                                                    }
                                                    [r12 release];
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_7B0);
                                            rcx = var_B0;
                                            rax = [var_7E8 countByEnumeratingWithState:var_290 objects:rcx count:0x10];
                                            var_7B0 = rax;
                                    } while (rax != 0x0);
                            }
                            var_7F0 = r15;
                            rdi = var_7E8;
                            [rdi release];
                            r12 = var_880;
                            r15 = var_830;
                            r13 = var_810;
                    }
                    rsi = var_860;
                    if (r15 != 0x0) {
                            r14 = [[rsi layoutAttributesForItemAtIndexPath:r15] retain];
                            if (var_808 != 0x0) {
                                    if (r14 != 0x0) {
                                            [var_2D0 frame];
                                            xmm0 = intrinsic_movapd(xmm0, var_2D0);
                                    }
                                    else {
                                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                            intrinsic_movapd(var_2C0, xmm0);
                                            intrinsic_movapd(var_2D0, xmm0);
                                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    }
                                    var_7A0 = intrinsic_movapd(var_7A0, xmm0);
                                    rbx = [[var_7F0->_collectionViewData layoutAttributesForItemAtIndexPath:r15] retain];
                                    if (rbx != 0x0) {
                                            [var_2F0 frame];
                                            xmm0 = intrinsic_movsd(xmm0, var_2F0);
                                            xmm0 = intrinsic_subsd(xmm0, var_250);
                                            var_7B0 = intrinsic_movapd(var_7B0, xmm0);
                                            [var_310 frame];
                                            xmm2 = intrinsic_movapd(xmm2, var_7B0);
                                            xmm0 = intrinsic_movsd(xmm0, var_308);
                                    }
                                    else {
                                            xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                            intrinsic_movapd(var_2E0, xmm1);
                                            intrinsic_movapd(var_2F0, xmm1);
                                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                            xmm2 = intrinsic_xorpd(xmm2, xmm2);
                                            xmm2 = intrinsic_subsd(xmm2, var_250);
                                            intrinsic_movapd(var_300, xmm1);
                                            intrinsic_movapd(var_310, xmm1);
                                    }
                                    xmm0 = intrinsic_subsd(xmm0, var_248);
                                    xmm1 = intrinsic_movupd(xmm1, var_240);
                                    var_2A0 = intrinsic_movapd(var_2A0, xmm1);
                                    xmm2 = intrinsic_unpcklpd(xmm2, xmm0);
                                    xmm0 = intrinsic_movapd(xmm0, var_7A0);
                                    xmm0 = intrinsic_subpd(xmm0, xmm2);
                                    var_2B0 = intrinsic_movapd(0x0, xmm0);
                                    [rbx release];
                            }
                            else {
                                    [r14 center];
                                    xmm2 = intrinsic_movdqu(xmm2, var_240);
                                    var_2A0 = zero_extend_64(xmm2);
                                    xmm3 = intrinsic_pshufd(xmm2, 0x4e);
                                    var_298 = zero_extend_64(xmm3);
                                    xmm2 = intrinsic_mulpd(xmm2, *(int128_t *)0xc4f660);
                                    xmm0 = intrinsic_unpcklpd(xmm0, xmm1);
                                    xmm0 = intrinsic_subpd(xmm0, xmm2);
                                    var_2B0 = intrinsic_movapd(0x0, xmm0);
                            }
                            rdi = r14;
                            [rdi release];
                            rsi = var_860;
                    }
                    else {
                            var_298 = var_238;
                            var_2A0 = var_240;
                            var_2A8 = var_248;
                            var_2B0 = var_250;
                            r15 = 0x0;
                    }
            }
    }
    if (rsi != 0x0) {
            rdi = var_330;
            var_860 = rsi;
            [rdi collectionViewContentRect];
            rax = var_320;
            rbx = var_318;
    }
    else {
            var_860 = rsi;
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_320, xmm0);
            intrinsic_movapd(var_330, xmm0);
            rbx = 0x0;
            rax = 0x0;
    }
    var_890 = rax;
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    var_350 = intrinsic_movapd(var_350, xmm0);
    var_340 = rax;
    var_338 = rbx;
    if (CGRectContainsRect(rdi, rsi) == 0x0) {
            CGRectIntersection(var_5C0, rsi);
            xmm2 = intrinsic_movsd(xmm2, var_2A0);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            xmm2 = intrinsic_ucomisd(xmm2, var_340);
            xmm1 = intrinsic_xorpd(xmm1, xmm1);
            if (xmm2 < 0x0) {
                    xmm1 = intrinsic_movsd(xmm1, var_2B0);
                    xmm3 = intrinsic_movsd(xmm3, var_5B0);
                    xmm2 = intrinsic_ucomisd(xmm2, xmm3);
                    if (xmm2 > 0x0) {
                            xmm2 = intrinsic_subsd(xmm2, xmm3);
                            xmm3 = intrinsic_movapd(xmm3, xmm1);
                            asm { cmpltsd    xmm3, qword [rbp+var_5C0] };
                            xmm4 = intrinsic_movapd(xmm4, xmm3);
                            xmm4 = intrinsic_andpd(xmm4, xmm2);
                            xmm2 = intrinsic_xorpd(xmm2, *(int128_t *)0xc4f600);
                            xmm3 = intrinsic_andnpd(xmm3, xmm2);
                            xmm3 = intrinsic_orpd(xmm3, xmm4);
                            xmm1 = intrinsic_addsd(xmm1, xmm3);
                    }
            }
            var_2B0 = intrinsic_movsd(var_2B0, xmm1);
            xmm1 = intrinsic_movsd(xmm1, var_298);
            xmm1 = intrinsic_ucomisd(xmm1, var_338);
            if (xmm1 < 0x0) {
                    xmm0 = intrinsic_movsd(xmm0, var_2A8);
                    xmm2 = intrinsic_movsd(xmm2, var_5A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                    if (xmm1 > 0x0) {
                            xmm1 = intrinsic_subsd(xmm1, xmm2);
                            xmm2 = intrinsic_movapd(xmm2, xmm0);
                            asm { cmpltsd    xmm2, qword [rbp+var_5B8] };
                            xmm3 = intrinsic_movapd(xmm3, xmm2);
                            xmm3 = intrinsic_andpd(xmm3, xmm1);
                            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                            xmm0 = intrinsic_addsd(xmm0, intrinsic_orpd(intrinsic_andnpd(xmm2, xmm1), xmm3));
                    }
            }
            var_2A8 = intrinsic_movsd(var_2A8, xmm0);
    }
    var_8A8 = rbx;
    if (r13 != 0x0) {
            var_880 = r12;
            xmm0 = intrinsic_movsd(xmm0, var_2B0);
            var_7A0 = intrinsic_movapd(var_7A0, xmm0);
            r13 = var_7F0;
            [var_3B0 contentInset];
            xmm0 = intrinsic_movapd(xmm0, var_7A0);
            xmm0 = intrinsic_subsd(xmm0, var_3A8);
            var_7A0 = intrinsic_movapd(var_7A0, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_2A8);
            var_7B0 = intrinsic_movapd(var_7B0, xmm0);
            [var_3D0 contentInset];
            xmm1 = intrinsic_movapd(xmm1, var_7B0);
            xmm1 = intrinsic_subsd(xmm1, var_3D0);
    }
    else {
            var_880 = r12;
            r13 = var_7F0;
            [var_370 contentInset];
            xmm0 = intrinsic_movsd(xmm0, var_368);
            xmm0 = intrinsic_xorpd(xmm0, *(int128_t *)0xc4f600);
            var_7A0 = intrinsic_movapd(var_7A0, xmm0);
            [var_390 contentInset];
            xmm1 = intrinsic_movsd(xmm1, var_390);
            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
    }
    var_7F0 = r13;
    xmm0 = intrinsic_movapd(xmm0, var_7A0);
    rdx = r15;
    var_830 = r15;
    [var_7F8 transitionContentOffsetForProposedContentOffset:rdx keyItemIndexPath:rcx];
    [var_7F8 targetContentOffsetForProposedContentOffset:rdx];
    [r13 _delegateTargetOffsetForProposedContentOffset:rdx];
    var_898 = intrinsic_movsd(var_898, xmm0);
    var_8A0 = intrinsic_movsd(var_8A0, xmm1);
    var_2B0 = intrinsic_movsd(var_2B0, xmm0);
    var_2A8 = intrinsic_movsd(var_2A8, xmm1);
    var_7A0 = [[var_860 layoutAttributesForElementsInRect:rdx, rcx] retain];
    r15 = [[NSMutableDictionary alloc] init];
    r12 = [[NSMutableDictionary alloc] init];
    r13 = [[NSMutableDictionary alloc] init];
    rax = [r15 retain];
    var_868 = rax;
    var_3E8 = rax;
    rax = [r12 retain];
    var_870 = rax;
    var_3E0 = rax;
    rax = [r13 retain];
    var_878 = rax;
    var_3D8 = rax;
    var_818 = objc_retainBlock(__NSConcreteStackBlock);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_420, xmm0);
    intrinsic_movapd(var_430, xmm0);
    var_440 = intrinsic_movapd(var_440, xmm0);
    var_450 = intrinsic_movapd(var_450, xmm0);
    rax = [var_7A0 retain];
    var_808 = rax;
    rax = [rax countByEnumeratingWithState:var_450 objects:var_130 count:0x10];
    var_7C0 = rax;
    if (rax == 0x0) goto loc_9721dd;

loc_971f1c:
    var_7E0 = *var_440;
    goto loc_971f3b;

loc_971f3b:
    r15 = 0x0;
    goto loc_971fae;

loc_971fae:
    if (*var_440 != var_7E0) {
            objc_enumerationMutation(var_808);
    }
    var_7A0 = [*(var_448 + r15 * 0x8) __indexPath];
    r12 = [*(var_448 + r15 * 0x8) representedElementCategory];
    r13 = [*(var_448 + r15 * 0x8) __elementKind];
    if (r12 == 0x1) goto loc_97208a;

loc_972019:
    var_7B8 = r13;
    var_7B0 = r12;
    r14 = 0x0;
    r13 = 0x0;
    if (r12 != 0x0) goto loc_9720ed;

loc_97203c:
    r13 = [[var_7F0->_layout layoutAttributesForItemAtIndexPath:var_7A0] retain];
    rax = [var_7F8 layoutAttributesForItemAtIndexPath:var_7A0];
    goto loc_9720e2;

loc_9720e2:
    r14 = [rax retain];
    goto loc_9720ed;

loc_9720ed:
    rax = r14 | r13;
    if (rax != 0x0) {
            r12 = [[NSMutableDictionary dictionary] retain];
            if (r14 != 0x0) {
                    [r12 setObject:r14 forKey:@"newLayoutInfos"];
            }
            if (r13 != 0x0) {
                    [r12 setObject:r13 forKey:@"previousLayoutInfos"];
            }
            (*(var_818 + 0x10))(var_818, r12, var_7A0, var_7B8, var_7B0);
            [r12 release];
    }
    [r14 release];
    [r13 release];
    r15 = r15 + 0x1;
    if (r15 < var_7C0) goto loc_971fae;

loc_9721a5:
    rcx = var_130;
    rax = [var_808 countByEnumeratingWithState:var_450 objects:rcx count:0x10];
    var_7C0 = rax;
    if (rax != 0x0) goto loc_971f3b;

loc_9721dd:
    [var_808 release];
    r12 = [var_7F0 retain];
    var_468 = r12;
    rax = [var_7F8 retain];
    var_7A0 = rax;
    var_460 = rax;
    var_7E8 = [var_818 retain];
    var_458 = var_818;
    rbx = objc_retainBlock(__NSConcreteStackBlock);
    (*(rbx + 0x10))(rbx, r12->_visibleCellsDict, @"UICollectionElementKindCell");
    rbx = [rbx retain];
    var_490 = rbx;
    [r12->_visibleSupplementaryViewsDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    rax = [rbx retain];
    var_7F0 = rax;
    var_4B8 = rax;
    [r12->_visibleDecorationViewsDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [r12 _updateBackgroundView];
    r13 = [r12 retain];
    var_4E0 = r13;
    rbx = objc_retainBlock(__NSConcreteStackBlock);
    (*(rbx + 0x10))(rbx, var_868, r12->_visibleCellsDict);
    rbx = [rbx retain];
    var_510 = rbx;
    r12 = [r13 retain];
    var_508 = r12;
    [var_870 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    rax = [rbx retain];
    var_800 = rax;
    var_540 = rax;
    rbx = [r12 retain];
    var_538 = rbx;
    [var_878 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    r12 = [rbx retain];
    var_570 = r12;
    r13 = [var_7A0 retain];
    var_568 = r13;
    [r12 _applyBlockToAllReusableViews:__NSConcreteStackBlock];
    r14 = 0x0;
    xmm0 = zero_extend_64(___Block_byref_object_dispose_);
    xmm1 = intrinsic_punpcklqdq(zero_extend_64(___Block_byref_object_copy_), xmm0);
    intrinsic_movdqu(var_5A8, xmm1);
    [var_5E0 bounds];
    r15 = var_840;
    rax = [UIView alloc];
    stack[1759] = *_CGRectZero;
    var_7A0 = [rax initWithFrame:__NSConcreteStackBlock, rcx];
    rdx = var_7A0;
    [r12 addSubview:rdx];
    rbx = [r12->_layout retain];
    rcx = 0x0;
    if ([var_860 layoutIsPrepared] != 0x0) {
            stack[1759] = var_2B0;
            rdi = r13;
            if ([rdi shouldInvalidateLayoutForBoundsChange:rdx, rcx] != 0x0) {
                    stack[1759] = var_2B0;
                    if (CGRectEqualToRect(rdi, @selector(shouldInvalidateLayoutForBoundsChange:)) != 0x0) {
                            var_7C0 = rbx;
                            var_7D0 = 0x0;
                            var_7E0 = 0x0;
                            rbx = var_8A8;
                            var_7D8 = 0x0;
                    }
                    else {
                            stack[1759] = var_2B0;
                            rax = [r13 invalidationContextForBoundsChange:rdx, rcx];
                            var_7C0 = rbx;
                            rax = [rax retain];
                            var_7D0 = rax;
                            var_7E0 = 0x1;
                            var_7D8 = rax;
                            rbx = var_8A8;
                    }
            }
            else {
                    var_7C0 = rbx;
                    var_7D0 = 0x0;
                    var_7E0 = 0x0;
                    rbx = var_8A8;
                    var_7D8 = 0x0;
            }
    }
    else {
            var_7C0 = rbx;
            var_7D0 = 0x0;
            var_7D8 = 0x0;
            var_7E0 = 0x0;
            rbx = var_8A8;
    }
    rdi = r12;
    rax = [rdi retain];
    var_7B0 = rax;
    var_650 = rax;
    xmm0 = intrinsic_movsd(xmm0, var_898);
    intrinsic_movsd(var_608, xmm0);
    xmm0 = intrinsic_movsd(xmm0, var_8A0);
    intrinsic_movsd(var_600, xmm0);
    var_648 = [r13 retain];
    rax = [var_868 retain];
    var_7B8 = rax;
    var_640 = rax;
    r13 = [var_870 retain];
    var_638 = r13;
    r15 = [var_878 retain];
    var_630 = r15;
    rax = [var_7A0 retain];
    var_7A0 = rax;
    var_628 = rax;
    rbx = r14;
    rax = [var_860 retain];
    var_818 = rax;
    var_620 = rax;
    r14 = [var_7C0 retain];
    var_618 = r14;
    var_7C8 = objc_retainBlock(__NSConcreteStackBlock);
    rax = [var_7B0 retain];
    var_810 = rax;
    var_6C0 = rax;
    rax = [r14 retain];
    var_850 = rax;
    var_6B8 = rax;
    rax = [var_7B8 retain];
    var_820 = rax;
    var_6B0 = rax;
    rax = [r13 retain];
    var_828 = rax;
    var_6A8 = rax;
    rax = [r15 retain];
    var_838 = rax;
    var_6A0 = rax;
    rbx = var_858;
    var_698 = [rbx retain];
    var_7E0 = [var_7D0 retain];
    var_690 = var_7D8;
    rax = [var_7A0 retain];
    var_7D0 = rax;
    var_688 = rax;
    r12 = objc_retainBlock(__NSConcreteStackBlock);
    rax = var_848;
    if (rax != 0x0) {
            r14 = [rax retain];
            var_7A0 = [r14 copy];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_6F0, xmm0);
            intrinsic_movapd(var_700, xmm0);
            var_710 = intrinsic_movapd(var_710, xmm0);
            var_720 = intrinsic_movapd(var_720, xmm0);
            rax = [r14 _animations];
            rax = [rax retain];
            var_7B8 = rax;
            rbx = [rax countByEnumeratingWithState:var_720 objects:var_1B0 count:0x10];
            var_7D8 = r14;
            var_840 = r12;
            if (rbx != 0x0) {
                    var_7B0 = *var_710;
                    do {
                            r14 = 0x0;
                            do {
                                    if (*var_710 != var_7B0) {
                                            objc_enumerationMutation(var_7B8);
                                    }
                                    r12 = [*(var_718 + r14 * 0x8) copy];
                                    [var_7A0 addAnimations:r12];
                                    [r12 release];
                                    r14 = r14 + 0x1;
                            } while (r14 < rbx);
                            rbx = [var_7B8 countByEnumeratingWithState:var_720 objects:var_1B0 count:0x10];
                    } while (rbx != 0x0);
            }
            [var_7B8 release];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_730, xmm0);
            intrinsic_movapd(var_740, xmm0);
            var_750 = intrinsic_movapd(var_750, xmm0);
            var_760 = intrinsic_movapd(var_760, xmm0);
            rax = [var_7D8 _completions];
            rax = [rax retain];
            var_7B8 = rax;
            rbx = [rax countByEnumeratingWithState:var_760 objects:var_230 count:0x10];
            if (rbx != 0x0) {
                    var_7B0 = *var_750;
                    do {
                            r14 = 0x0;
                            do {
                                    if (*var_750 != var_7B0) {
                                            objc_enumerationMutation(var_7B8);
                                    }
                                    r12 = [*(var_758 + r14 * 0x8) copy];
                                    [var_7A0 addCompletion:r12];
                                    [r12 release];
                                    r14 = r14 + 0x1;
                            } while (r14 < rbx);
                            rbx = [var_7B8 countByEnumeratingWithState:var_760 objects:var_230 count:0x10];
                    } while (rbx != 0x0);
            }
            [var_7B8 release];
            [var_7A0 addAnimations:var_7C8];
            r13 = var_858;
            r12 = var_840;
            var_768 = [r12 retain];
            [var_7A0 addCompletion:__NSConcreteStackBlock];
            [var_7A0 startAnimation];
            [var_768 release];
            [var_7A0 release];
            [var_7D8 release];
    }
    else {
            if (var_840 != 0x0) {
                    intrinsic_movsd(xmm0, *0xc4f4c0);
                    intrinsic_pxor(xmm1, xmm1);
                    [UIView animateWithDuration:0x1 delay:var_7C8 options:r12 animations:r9 completion:stack[1759]];
                    r13 = rbx;
            }
            else {
                    (*(var_7C8 + 0x10))(var_7C8);
                    r13 = rbx;
                    (*(r12 + 0x10))(r12, 0x1);
            }
    }
    r14 = [var_810->_layout retain];
    r15 = [var_810 retain];
    if (((r15 != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(r15 + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    [r15 _setHasMirrorTransform:0x1];
            }
            else {
                    [r15 _setHasMirrorTransform:0x0];
            }
    }
    [r15 release];
    [r14 release];
    *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    r15->_collectionViewFlags = 0xfffdffffffffffff & r15->_collectionViewFlags;
    [r15 setNeedsFocusUpdate];
    [r12 release];
    [var_688 release];
    [var_690 release];
    [var_698 release];
    [var_6A0 release];
    [var_6A8 release];
    [var_6B0 release];
    [var_6B8 release];
    [var_6C0 release];
    [var_7C8 release];
    [var_618 release];
    [var_620 release];
    [var_628 release];
    [var_630 release];
    [var_638 release];
    [var_640 release];
    [var_648 release];
    [var_650 release];
    [var_7E0 release];
    [var_850 release];
    [var_7D0 release];
    _Block_object_dispose(0x0, 0x8);
    [0x0 release];
    [var_568 release];
    [var_570 release];
    [var_538 release];
    [var_540 release];
    [var_508 release];
    [var_510 release];
    [var_800 release];
    [var_4E0 release];
    [var_4B8 release];
    [var_490 release];
    [var_7F0 release];
    [var_458 release];
    [var_460 release];
    [var_468 release];
    [var_7E8 release];
    [var_3D8 release];
    [var_3E0 release];
    [var_3E8 release];
    [var_838 release];
    [var_828 release];
    [var_820 release];
    [var_808 release];
    [var_880 release];
    [var_888 release];
    [var_830 release];
    [var_818 release];
    r14 = var_7F8;
    rax = var_848;
    goto loc_9730e7;

loc_9730e7:
    [rax release];
    [r13 release];
    [r14 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_97208a:
    var_7B0 = r12;
    var_7B8 = r13;
    rdx = r13;
    r13 = [[var_7F0->_layout layoutAttributesForSupplementaryViewOfKind:r13 atIndexPath:var_7A0] retain];
    rax = [var_7F8 layoutAttributesForSupplementaryViewOfKind:rdx atIndexPath:var_7A0];
    goto loc_9720e2;

loc_971235:
    [rbx->_layout _setCollectionView:0x0];
    r13 = r14;
    rbx->_layout = [r13 retain];
    [rbx->_layout release];
    [rbx->_layout _setCollectionView:rbx];
    rbx->_collectionViewData = [[UICollectionViewData alloc] initWithCollectionView:rbx layout:rbx->_layout];
    [rbx->_collectionViewData release];
    r14 = r13;
    [rbx _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
    rax = var_848;
    r13 = var_858;
    goto loc_9730e7;
}

void ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke(int arg0, int arg1, int arg2, int arg3, int arg4) {
    rbx = arg4;
    r14 = arg2;
    r15 = arg1;
    r13 = arg0;
    r12 = [arg3 retain];
    if (rbx == 0x1) goto loc_973195;

loc_973174:
    if (rbx != 0x0) goto loc_9731f3;

loc_973179:
    [*(r13 + 0x20) setObject:r15 forKeyedSubscript:r14];
    goto loc_97328d;

loc_97328d:
    rdi = r12;
    [rdi release];
    return;

loc_9731f3:
    rbx = [[*(r13 + 0x30) objectForKeyedSubscript:r12] retain];
    if (rbx == 0x0) goto loc_973220;

loc_973272:
    [rbx setObject:r15 forKeyedSubscript:r14];
    [rbx release];
    goto loc_97328d;

loc_973220:
    var_30 = [[NSMutableDictionary alloc] init];
    [rbx release];
    rdi = *(r13 + 0x30);
    goto loc_973258;

loc_973258:
    rbx = var_30;
    [rdi setObject:rbx forKeyedSubscript:r12];
    goto loc_973272;

loc_973195:
    rbx = [[*(r13 + 0x28) objectForKeyedSubscript:r12] retain];
    if (rbx != 0x0) goto loc_973272;

loc_9731b9:
    var_30 = [[NSMutableDictionary alloc] init];
    [rbx release];
    rdi = *(r13 + 0x28);
    goto loc_973258;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1456(int arg0, int arg1, int arg2) {
    r14 = [arg1 retain];
    r15 = [arg2 retain];
    var_48 = [*(arg0 + 0x20) retain];
    var_40 = [*(arg0 + 0x28) retain];
    var_38 = r15;
    r15 = [r15 retain];
    var_30 = [*(arg0 + 0x30) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [r14 release];
    [var_30 release];
    [var_38 release];
    [var_40 release];
    [var_48 release];
    rax = [r15 release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_2(int arg0, int arg1, int arg2) {
    var_30 = arg1;
    r12 = arg0;
    r15 = [[arg2 _layoutAttributes] retain];
    rbx = [r15 representedElementCategory];
    [r15 release];
    r15 = 0x0;
    if (rbx == 0x1) goto loc_973487;

loc_973434:
    var_38 = rbx;
    r13 = 0x0;
    if (rbx != 0x0) goto loc_9734de;

loc_973447:
    r13 = [[*(r12 + 0x20)->_layout layoutAttributesForItemAtIndexPath:var_30, *_OBJC_IVAR_$_UICollectionView._layout] retain];
    rax = [*(r12 + 0x28) layoutAttributesForItemAtIndexPath:var_30];
    goto loc_9734d3;

loc_9734d3:
    r15 = [rax retain];
    goto loc_9734de;

loc_9734de:
    rax = r15 | r13;
    if (rax != 0x0) {
            r14 = [[NSMutableDictionary alloc] init];
            if (r15 != 0x0) {
                    [r14 setObject:r15 forKeyedSubscript:@"newLayoutInfos"];
            }
            if (r13 != 0x0) {
                    [r14 setObject:r13 forKeyedSubscript:@"previousLayoutInfos"];
            }
            (*(*(r12 + 0x38) + 0x10))(*(r12 + 0x38), r14, var_30, *(r12 + 0x30), var_38);
            [r14 release];
    }
    [r15 release];
    rdi = r13;
    rax = [rdi release];
    return rax;

loc_973487:
    var_38 = rbx;
    r13 = [[*(r12 + 0x20)->_layout layoutAttributesForSupplementaryViewOfKind:*(r12 + 0x30) atIndexPath:var_30] retain];
    rax = [*(r12 + 0x28) layoutAttributesForSupplementaryViewOfKind:*(r12 + 0x30) atIndexPath:var_30];
    goto loc_9734d3;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1464(int arg0, int arg1, int arg2) {
    rax = (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, arg1, *(*(arg0 + 0x20) + 0x10));
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1468(int arg0, int arg1, int arg2) {
    rax = (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, arg1, *(*(arg0 + 0x20) + 0x10));
    return rax;
}
void ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1472(int arg0, int arg1, int arg2) {
    r14 = [arg1 retain];
    rax = [arg2 retain];
    var_38 = rax;
    r12 = [rax retain];
    var_30 = [*(arg0 + 0x20) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [r14 release];
    [var_30 release];
    [var_38 release];
    [r12 release];
    return;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_2.1473(int arg0, int arg1, int arg2) {
    var_80 = arg1;
    r12 = arg0;
    r15 = [[arg2 objectForKey:@"previousLayoutInfos"] retain];
    rax = [arg2 objectForKey:@"newLayoutInfos"];
    var_68 = rax;
    rbx = [rax retain];
    r14 = [[*(r12 + 0x20) objectForKeyedSubscript:arg1] retain];
    if (r15 != 0x0) {
            var_70 = [[r15 _elementKind] retain];
            r13 = [r15 retain];
    }
    else {
            var_70 = [[rbx _elementKind] retain];
            r13 = [rbx retain];
            objc_storeStrong(*(r12 + 0x28) + *_OBJC_IVAR_$_UICollectionView._transitionLayoutAttributes, var_68);
    }
    var_68 = r15;
    if ((r14 != 0x0) || (([rbx isHidden] != 0x0) && ([var_68 isHidden] != 0x0))) goto loc_9738d3;

loc_97396d:
    var_88 = r14;
    if ([rbx _isCell] == 0x0) goto loc_973a40;

loc_97398c:
    var_78 = rbx;
    r14 = [*(r12 + 0x28) _createPreparedCellForItemAtIndexPath:var_80 withLayoutAttributes:r13 applyAttributes:0x1];
    [var_88 release];
    [*(r12 + 0x28)->_visibleCellsDict setObject:r14 forKeyedSubscript:var_80];
    rcx = r12 + 0x28;
    goto loc_9739f0;

loc_9739f0:
    r15 = var_68;
    goto loc_9739f4;

loc_9739f4:
    r12 = var_70;
    goto loc_9739f8;

loc_9739f8:
    *rcx->_transitionLayoutAttributes = 0x0;
    [*rcx->_transitionLayoutAttributes release];
    [r13 release];
    [r12 release];
    [r14 release];
    [var_78 release];
    rax = [r15 release];
    return rax;

loc_973a40:
    var_78 = rbx;
    rcx = r12 + 0x28;
    r15 = var_68;
    if ([rbx _isSupplementaryView] == 0x0) goto loc_973afe;

loc_973a67:
    r14 = [*rcx _createPreparedSupplementaryViewForElementOfKind:var_70 atIndexPath:var_80 withLayoutAttributes:r13 applyAttributes:0x1];
    r12 = var_70;
    [var_88 release];
    rbx = [[*rcx _visibleViewDictForElementCategory:0x1 elementKind:r12] retain];
    [rbx setObject:r14 forKey:var_80];
    [rbx release];
    rcx = rcx;
    goto loc_9739f8;

loc_973afe:
    r14 = var_88;
    goto loc_9739f4;

loc_9738d3:
    var_78 = rbx;
    var_40 = [*(r12 + 0x28) retain];
    var_38 = [r13 retain];
    r14 = [r14 retain];
    [UIView _performWithoutAnimation:__NSConcreteStackBlock];
    [r14 release];
    [var_38 release];
    [var_40 release];
    rcx = r12 + 0x28;
    goto loc_9739f0;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_3(int arg0) {
    rax = [*(arg0 + 0x20) _applyLayoutAttributes:*(arg0 + 0x28) toView:*(arg0 + 0x30)];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1485(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x1 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1489(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x2 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1493(int arg0, int arg1) {
    rax = [arg1 willTransitionFromLayout:*(arg0 + 0x20)->_layout toLayout:*(arg0 + 0x28)];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1502(int arg0) {
    r15 = arg0;
    rdi = *(r15 + 0x20);
    if ((rdi->_collectionViewFlags & 0x20) == 0x0) goto loc_973e30;

loc_973dda:
    rbx = objc_loadWeakRetained(rdi + *_OBJC_IVAR_$_UIScrollView._delegate);
    rdx = *(r15 + 0x20);
    xmm0 = intrinsic_movsd(xmm0, *(r15 + 0x68));
    xmm1 = intrinsic_movsd(xmm1, *(r15 + 0x70));
    intrinsic_movsd(xmm2, *(r15 + 0x78));
    intrinsic_movsd(xmm3, *(r15 + 0x80));
    r14 = [rbx _collectionView:rdx shouldApplyTransitionContentOffset:rcx contentSize:r8];
    [rbx release];
    if (r14 == 0x0) goto loc_973e68;

loc_973e2c:
    rdi = *(r15 + 0x20);
    goto loc_973e30;

loc_973e30:
    xmm0 = intrinsic_movsd(xmm0, *(r15 + 0x68));
    xmm1 = intrinsic_movsd(xmm1, *(r15 + 0x70));
    [rdi setContentOffset:rdx];
    xmm0 = intrinsic_movsd(xmm0, *(r15 + 0x78));
    intrinsic_movsd(xmm1, *(r15 + 0x80));
    [*(r15 + 0x20) setContentSize:rdx];
    goto loc_973e68;

loc_973e68:
    [*(r15 + 0x20) _updateDefaultLayoutMargins];
    if (([*(r15 + 0x20)->_layout _supportsAdvancedTransitionAnimations] != 0x0) && ([*(r15 + 0x28) _supportsAdvancedTransitionAnimations] != 0x0)) {
            var_40 = [*(r15 + 0x20) retain];
            var_38 = [*(r15 + 0x28) retain];
            rbx = objc_retainBlock(__NSConcreteStackBlock);
            (*(rbx + 0x10))(rbx, *(r15 + 0x30), *(r15 + 0x20)->_visibleCellsDict, *_OBJC_IVAR_$_UICollectionView._visibleCellsDict);
            rbx = [rbx retain];
            var_70 = rbx;
            var_68 = [*(r15 + 0x20) retain];
            [*(r15 + 0x38) enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
            var_A0 = rbx;
            rdi = rbx;
            r14 = [rdi retain];
            var_98 = [*(r15 + 0x20) retain];
            [*(r15 + 0x40) enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
            [var_98 release];
            [var_A0 release];
            [var_68 release];
            [var_70 release];
            [r14 release];
            [var_38 release];
            rdi = var_40;
    }
    else {
            var_D0 = [*(r15 + 0x28) retain];
            var_C8 = [*(r15 + 0x20) retain];
            rbx = objc_retainBlock(__NSConcreteStackBlock);
            (*(rbx + 0x10))(rbx, *(r15 + 0x30), *(r15 + 0x20)->_visibleCellsDict, *_OBJC_IVAR_$_UICollectionView._visibleCellsDict);
            rbx = [rbx retain];
            var_100 = rbx;
            var_F8 = [*(r15 + 0x20) retain];
            [*(r15 + 0x38) enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
            var_130 = rbx;
            rdi = rbx;
            r14 = [rdi retain];
            var_128 = [*(r15 + 0x20) retain];
            [*(r15 + 0x40) enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
            [var_128 release];
            [var_130 release];
            [var_F8 release];
            [var_100 release];
            [r14 release];
            [var_C8 release];
            rdi = var_D0;
    }
    [rdi release];
    intrinsic_xorpd(xmm0, xmm0);
    [*(r15 + 0x48) setAlpha:__NSConcreteStackBlock];
    objc_storeStrong(*(r15 + 0x20) + *_OBJC_IVAR_$_UICollectionView._layout, *(r15 + 0x28));
    if (*(int8_t *)(r15 + 0x89) != 0x0) {
            objc_storeStrong(*(*(r15 + 0x60) + 0x8) + 0x28, *(r15 + 0x20)->_collectionViewData);
    }
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._collectionViewData + *(r15 + 0x20), *(r15 + 0x50));
    rdx = [UICollectionViewTransitionLayout class];
    rax = [*(r15 + 0x58) isKindOfClass:rdx];
    if (rax == 0x0) {
            [*(r15 + 0x28) _finalizeLayoutTransition];
            rax = [*(r15 + 0x58) _finalizeLayoutTransition];
    }
    return rax;
}

void ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_2.1505(int arg0, int arg1, int arg2) {
    var_70 = [arg1 retain];
    rax = [arg2 retain];
    var_48 = rax;
    r15 = [rax retain];
    var_40 = [*(arg0 + 0x20) retain];
    var_38 = [*(arg0 + 0x28) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_70 release];
    [var_38 release];
    [var_40 release];
    [var_48 release];
    [r15 release];
    return;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_3.1506(int arg0, int arg1, int arg2) {
    r15 = arg2;
    r12 = arg0;
    var_30 = *___stack_chk_guard;
    rbx = [[*(r12 + 0x20) objectForKeyedSubscript:arg1] retain];
    if (rbx != 0x0) {
            [rbx _addUpdateAnimation];
            [r15 setObject:rbx forKey:@"view"];
            r14 = rbx;
            if (*(int8_t *)(r12 + 0x38) != 0x0) {
                    intrinsic_movaps(var_C0, 0x0);
                    intrinsic_movaps(var_D0, 0x0);
                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                    r13 = [[r15 objectForKeyedSubscript:@"previousLayoutInfos", @selector(objectForKeyedSubscript:)] retain];
                    r15 = [[r15 objectForKeyedSubscript:@"newLayoutInfos"] retain];
                    var_100 = r14;
                    r12 = [[*(r12 + 0x28) _doubleSidedAnimationsForView:r14 withStartingLayoutAttributes:r13 startingLayout:*(r12 + 0x28)->_layout endingLayoutAttributes:r15 endingLayout:*(r12 + 0x30) withAnimationSetup:0x0 animationCompletion:0x0 enableCustomAnimations:0x1 customAnimationsType:0x1] retain];
                    [r15 release];
                    [r13 release];
                    rbx = [r12 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    if (rbx != 0x0) {
                            r14 = *var_E0;
                            do {
                                    r15 = 0x0;
                                    do {
                                            if (*var_E0 != r14) {
                                                    objc_enumerationMutation(r12);
                                            }
                                            [*(var_E8 + r15 * 0x8) start];
                                            r15 = r15 + 0x1;
                                    } while (r15 < rbx);
                                    rbx = [r12 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            } while (rbx != 0x0);
                    }
                    [r12 release];
                    rbx = var_100;
            }
            else {
                    rdi = r15;
                    rbx = [[rdi objectForKeyedSubscript:@"newLayoutInfos", @"view"] retain];
                    [*(r12 + 0x28) _applyLayoutAttributes:rbx toView:r14];
                    [rbx release];
                    rbx = r14;
            }
    }
    rax = [rbx release];
    if (*___stack_chk_guard != var_30) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1518(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x1 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1522(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x2 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

void ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1526(int arg0, int arg1, int arg2) {
    var_68 = [arg1 retain];
    rax = [arg2 retain];
    var_40 = rax;
    r15 = [rax retain];
    var_38 = [*(arg0 + 0x20) retain];
    var_30 = [*(arg0 + 0x28) retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_68 release];
    [var_30 release];
    [var_38 release];
    [var_40 release];
    [r15 release];
    return;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_2.1527(int arg0, int arg1, int arg2) {
    rbx = arg2;
    r12 = arg0;
    r15 = [[*(r12 + 0x20) objectForKeyedSubscript:arg1] retain];
    if (r15 != 0x0) {
            var_30 = rbx;
            rbx = [[rbx objectForKey:@"newLayoutInfos"] retain];
            rcx = rbx;
            r14 = [[*(r12 + 0x28) _animationForReusableView:r15 toLayoutAttributes:rcx type:0x1] retain];
            r13 = [r14 copy];
            [r14 release];
            if (r13 != 0x0) {
                    [r15 _setBaseLayoutAttributes:rbx];
                    (*(r13 + 0x10))(r13, 0x0);
                    rdx = rbx;
                    r12 = rbx;
                    [r15 applyLayoutAttributes:rdx];
            }
            else {
                    rdi = *(r12 + 0x30);
                    rdx = rbx;
                    r12 = rbx;
                    rcx = r15;
                    [rdi _applyLayoutAttributes:rdx toView:rcx];
            }
            [r15 _addUpdateAnimation];
            [var_30 setObject:r15 forKey:@"view"];
            [r13 release];
            [r12 release];
    }
    rdi = r15;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1534(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x1 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1538(int arg0, int arg1, int arg2) {
    rbx = [[*(arg0 + 0x28) _visibleViewDictForElementCategory:0x2 elementKind:arg1] retain];
    (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), arg2, rbx);
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1547(int arg0) {
    r15 = arg0;
    var_2C0 = [*(r15 + 0x28) retain];
    rax = [*(r15 + 0x20) retain];
    var_2B8 = rax;
    [rax _applyBlockToAllReusableViews:__NSConcreteStackBlock];
    intrinsic_movaps(var_2F0, 0x0);
    intrinsic_movaps(var_300, 0x0);
    var_310 = intrinsic_movaps(var_310, 0x0);
    var_320 = intrinsic_movaps(var_320, 0x0);
    rax = [*(r15 + 0x30) objectEnumerator];
    rax = [rax retain];
    var_438 = rax;
    r12 = @selector(countByEnumeratingWithState:objects:count:);
    rdx = var_320;
    rcx = var_B0;
    rax = _objc_msgSend(rax, r12);
    var_428 = rax;
    if (rax != 0x0) {
            var_480 = r15;
            var_430 = *var_310;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_310 != var_430) {
                                    objc_enumerationMutation(var_438);
                            }
                            r15 = [[*(var_318 + r12 * 0x8) objectForKeyedSubscript:@"view"] retain];
                            [r15 _clearUpdateAnimation];
                            [r15 release];
                            r12 = r12 + 0x1;
                    } while (r12 < var_428);
                    r12 = @selector(countByEnumeratingWithState:objects:count:);
                    rdx = var_320;
                    rcx = var_B0;
                    rax = _objc_msgSend(var_438, r12);
                    var_428 = rax;
            } while (rax != 0x0);
            r15 = var_480;
    }
    var_480 = r15;
    [var_438 release];
    intrinsic_movaps(var_330, 0x0);
    intrinsic_movaps(var_340, 0x0);
    var_350 = intrinsic_movaps(var_350, 0x0);
    var_360 = intrinsic_movaps(var_360, 0x0);
    rax = [*(r15 + 0x38) objectEnumerator];
    rax = [rax retain];
    var_470 = rax;
    rdx = var_360;
    rcx = var_130;
    rax = _objc_msgSend(rax, r12, rdx, rcx, 0x10);
    r14 = _objc_msgSend;
    var_458 = rax;
    if (rax != 0x0) {
            var_468 = *var_350;
            var_478 = @selector(countByEnumeratingWithState:objects:count:);
            do {
                    r12 = @selector(countByEnumeratingWithState:objects:count:);
                    var_450 = r12;
                    rbx = 0x0;
                    do {
                            if (*var_350 != var_468) {
                                    objc_enumerationMutation(var_470);
                            }
                            var_448 = rbx;
                            var_370 = intrinsic_movaps(var_370, 0x0);
                            var_380 = intrinsic_movaps(var_380, 0x0);
                            var_390 = intrinsic_movaps(var_390, 0x0);
                            var_3A0 = intrinsic_movaps(var_3A0, 0x0);
                            rax = (r14)(*(var_358 + rbx * 0x8));
                            rax = [rax retain];
                            var_438 = rax;
                            rax = (r14)(rax, r12, var_3A0, var_1B0, 0x10);
                            var_428 = rax;
                            if (rax != 0x0) {
                                    var_430 = *var_390;
                                    do {
                                            rbx = 0x0;
                                            do {
                                                    if (*var_390 != var_430) {
                                                            objc_enumerationMutation(var_438);
                                                    }
                                                    r15 = [(r14)(*(var_398 + rbx * 0x8), @selector(objectForKeyedSubscript:), @"view") retain];
                                                    (r14)(r15, @selector(_clearUpdateAnimation));
                                                    [r15 release];
                                                    rbx = rbx + 0x1;
                                            } while (rbx < var_428);
                                            rax = [var_438 countByEnumeratingWithState:var_3A0 objects:var_1B0 count:0x10];
                                            var_428 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_438 release];
                            rbx = var_448 + 0x1;
                            r12 = var_450;
                    } while (rbx < var_458);
                    rdx = var_360;
                    rcx = var_130;
                    rax = _objc_msgSend(var_470, var_478);
                    var_458 = rax;
                    r12 = @selector(countByEnumeratingWithState:objects:count:);
            } while (rax != 0x0);
    }
    [var_470 release];
    intrinsic_movaps(var_3B0, 0x0);
    intrinsic_movaps(var_3C0, 0x0);
    var_3D0 = intrinsic_movaps(var_3D0, 0x0);
    var_3E0 = intrinsic_movaps(var_3E0, 0x0);
    rax = (r14)(*(var_480 + 0x40), @selector(objectEnumerator), rdx, rcx, 0x10);
    rax = [rax retain];
    var_470 = rax;
    rax = (r14)(rax, r12, var_3E0, var_230, 0x10);
    var_450 = rax;
    if (rax != 0x0) {
            var_468 = *var_3D0;
            var_478 = @selector(countByEnumeratingWithState:objects:count:);
            do {
                    var_458 = @selector(countByEnumeratingWithState:objects:count:);
                    rbx = 0x0;
                    do {
                            if (*var_3D0 != var_468) {
                                    objc_enumerationMutation(var_470);
                            }
                            var_448 = rbx;
                            var_3F0 = intrinsic_movaps(var_3F0, 0x0);
                            var_400 = intrinsic_movaps(var_400, 0x0);
                            var_410 = intrinsic_movaps(var_410, 0x0);
                            var_420 = intrinsic_movaps(var_420, 0x0);
                            rax = (r14)(*(var_3D8 + rbx * 0x8));
                            rax = [rax retain];
                            var_438 = rax;
                            rax = (r14)(rax, var_458, var_420, var_2B0, 0x10);
                            var_428 = rax;
                            if (rax != 0x0) {
                                    var_430 = *var_410;
                                    do {
                                            r15 = 0x0;
                                            do {
                                                    if (*var_410 != var_430) {
                                                            objc_enumerationMutation(var_438);
                                                    }
                                                    r12 = [(r14)(*(var_418 + r15 * 0x8), @selector(objectForKeyedSubscript:), @"view") retain];
                                                    (r14)(r12, @selector(_clearUpdateAnimation));
                                                    [r12 release];
                                                    r15 = r15 + 0x1;
                                            } while (r15 < var_428);
                                            rax = [var_438 countByEnumeratingWithState:var_420 objects:var_2B0 count:0x10];
                                            var_428 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_438 release];
                            rbx = var_448 + 0x1;
                    } while (rbx < var_450);
                    rax = _objc_msgSend(var_470, var_478);
                    var_450 = rax;
            } while (rax != 0x0);
    }
    [var_470 release];
    rbx = var_480;
    rsi = 0xfffbffffffffffff & *(rbx + 0x20)->_collectionViewFlags;
    *(int8_t *)(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    *(rbx + 0x20)->_collectionViewFlags = rsi;
    [*(rbx + 0x20) _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
    rdi = *(rbx + 0x20);
    rax = rdi->_navigationCompletion;
    r15 = 0x1;
    if (rax != 0x0) {
            r15 = (*(rax + 0x10))(rax);
            rdi = *(rbx + 0x20);
    }
    [rdi _setNavigationCompletion:0x0];
    r12 = *(rbx + 0x20);
    rdi = *(rbx + 0x28);
    if (r15 != 0x0) {
            rax = r12->_layout;
            if (rdi != rax) {
                    [rdi _setCollectionView:0x0];
                    rax = *(rbx + 0x20)->_layout;
            }
            [rax _didFinishLayoutTransitionAnimations:0x1];
            rdi = *(rbx + 0x48);
            if (rdi != 0x0) {
                    (*(rdi + 0x10))();
            }
            if (*(int8_t *)(rbx + 0x68) != 0x0) {
                    [*(rbx + 0x20)->_layout _invalidateLayoutUsingContext:*(rbx + 0x50)];
            }
    }
    else {
            r12->_layout = [rdi retain];
            [r12->_layout release];
            objc_storeStrong(*(rbx + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewData, *(*(*(rbx + 0x60) + 0x8) + 0x28));
            [*(rbx + 0x20)->_layout _didFinishLayoutTransitionAnimations:0x0];
            rdi = *(rbx + 0x48);
            if (rdi != 0x0) {
                    (*(rdi + 0x10))();
            }
            [*(rbx + 0x20) layoutIfNeeded];
    }
    [*(rbx + 0x58) removeFromSuperview];
    [var_2B8 release];
    [var_2C0 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke_2.1548(int arg0, int arg1) {
    rax = [arg1 didTransitionFromLayout:*(arg0 + 0x20) toLayout:*(arg0 + 0x28)->_layout];
    return rax;
}

int ___88-[UICollectionView _setCollectionViewLayout:animated:isInteractive:completion:animator:]_block_invoke.1569(int arg0, int arg1) {
    rax = (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), (arg1 == 0x0 ? 0x1 : 0x0) & 0xff);
    return rax;
}

void * -[UICollectionView startInteractiveTransitionToCollectionViewLayout:completion:](void * self, void * _cmd, void * arg2, void * arg3) {
    var_38 = _cmd;
    r14 = self;
    r12 = [arg2 retain];
    var_30 = [arg3 retain];
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = r12 != 0x0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r13 = [rdi retain];
                            r15 = r12;
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_38 object:r14 file:r13 lineNumber:0x102b description:@"layout cannot be nil in startInteractiveTransitionToCollectionViewLayout:"];
                            rsp = (rsp - 0x10) + 0x10;
                            [r13 release];
                            [rbx release];
                            r12 = r15;
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r13 = ___UILogGetCategoryCachedImpl("Assert", _startInteractiveTransitionToCollectionViewLayout:completion:.__s_category);
                            if (os_log_type_enabled(*(r13 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68a732, *(r13 + 0x8), 0x10, "layout cannot be nil in startInteractiveTransitionToCollectionViewLayout:", rax + 0xfffffffffffffff0, 0x2);
                                    rsp = rbx;
                            }
                    }
            }
    }
    else {
            rcx = r12 != 0x0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r13 = [rdi retain];
                            r15 = r12;
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_38 object:r14 file:r13 lineNumber:0x102b description:@"layout cannot be nil in startInteractiveTransitionToCollectionViewLayout:"];
                            rsp = (rsp - 0x10) + 0x10;
                            [r13 release];
                            [rbx release];
                            r12 = r15;
                    }
            }
            else {
                    if (rcx == 0x0) {
                            r13 = ___UILogGetCategoryCachedImpl("Assert", _startInteractiveTransitionToCollectionViewLayout:completion:.__s_category);
                            if (os_log_type_enabled(*(r13 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                    _os_log_impl(0xffffffffff68a732, *(r13 + 0x8), 0x10, "layout cannot be nil in startInteractiveTransitionToCollectionViewLayout:", rax + 0xfffffffffffffff0, 0x2);
                                    rsp = rbx;
                            }
                    }
            }
    }
    if (r14->_isInInteractiveTransition != 0x0) {
            var_40 = r12;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r13 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_38 object:r14 file:r13 lineNumber:0x102e description:@"the collection is already in the middle of an interactive transition"];
            r12 = var_40;
            [r13 release];
            [rbx release];
    }
    r14->_interactiveCompletionHandler = [var_30 copy];
    [r14->_interactiveCompletionHandler release];
    if (([r14 _visible] != 0x0) && ((BIT_TEST(r14->_collectionViewFlags, 0x37)))) {
            r13 = r12;
            rax = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r14);
            var_38 = rax;
            rdx = @selector(collectionView:transitionLayoutForOldLayout:newLayout:);
            if ([rax respondsToSelector:rdx] != 0x0) {
                    rbx = [[r14 collectionViewLayout] retain];
                    rax = [var_38 collectionView:r14 transitionLayoutForOldLayout:rbx newLayout:r13];
                    rax = [rax retain];
            }
            else {
                    r12 = [UICollectionViewTransitionLayout alloc];
                    rbx = [[r14 collectionViewLayout] retain];
                    rax = [r12 initWithCurrentLayout:rbx nextLayout:r13];
            }
            r12 = rax;
            [rbx release];
            [r14 setCollectionViewLayout:r12];
            r14->_isInInteractiveTransition = 0x1;
            r14->_shouldAccumulateTrackedLayoutValues = 0x1;
            [var_38 release];
    }
    else {
            [r14->_layout _setCollectionView:0x0];
            r14->_layout = [r12 retain];
            [r14->_layout release];
            [r14->_layout _setCollectionView:r14];
            r14->_collectionViewData = [[UICollectionViewData alloc] initWithCollectionView:r14 layout:r14->_layout];
            [r14->_collectionViewData release];
            r13 = r12;
            r12 = 0x0;
            [r14 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
    }
    [var_30 release];
    [r13 release];
    rdi = r12;
    rax = [rdi autorelease];
    return rax;
}

void -[UICollectionView _updateTransitionWithProgress:](void * self, void * _cmd, double arg2) {
    var_20 = intrinsic_movsd(var_20, arg2);
    r14 = [[self collectionViewLayout] retain];
    [self->_collectionViewData invalidate:0x1];
    intrinsic_movsd(arg2, var_20);
    [r14 setTransitionProgress:0x1];
    [self _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _cleanUpAfterInteractiveTransitionDidFinish:](void * self, void * _cmd, bool arg2) {
    var_1F8 = arg2;
    r15 = self;
    rbx = [[self collectionViewLayout] retain];
    r12 = [[rbx currentLayout] retain];
    r13 = [[rbx nextLayout] retain];
    if (rbx != 0x0) {
            [var_150 _oldVisibleBounds];
            [var_170 _newVisibleBounds];
    }
    else {
            var_140 = intrinsic_movaps(var_140, 0x0);
            var_150 = intrinsic_movaps(var_150, 0x0);
            var_160 = intrinsic_movaps(var_160, 0x0);
            var_170 = intrinsic_movaps(var_170, 0x0);
    }
    rsi = @selector(setCollectionViewLayout:);
    if (var_1F8 != 0x0) {
            var_208 = rbx;
            rdx = r13;
            _objc_msgSend(r15, rsi);
            rax = var_170;
            rcx = var_168;
    }
    else {
            var_208 = rbx;
            rdx = r12;
            _objc_msgSend(r15, rsi);
            rax = var_150;
            rcx = var_148;
    }
    [r15 setBounds:rdx, rcx];
    var_210 = r12;
    *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    r15->_collectionViewFlags = 0xfffbffffffffffff & r15->_collectionViewFlags;
    rdx = 0x1;
    [r15 _setNeedsVisibleCellsUpdate:rdx withLayoutAttributes:0x1];
    rdi = r15->_interactiveCompletionHandler;
    if (rdi != 0x0) {
            rdx = var_1F8 & 0xff;
            (*(rdi + 0x10))();
            r15->_interactiveCompletionHandler = 0x0;
            [r15->_interactiveCompletionHandler release];
    }
    var_218 = r13;
    r15->_trackedValuesKeys = 0x0;
    [r15->_trackedValuesKeys release];
    r15->_interactiveTransitionValueTrackingDict = 0x0;
    [r15->_interactiveTransitionValueTrackingDict release];
    r15->_shouldAccumulateTrackedLayoutValues = 0x1;
    rbx = objc_retainBlock(^ {/* block implemented at ___64-[UICollectionView _cleanUpAfterInteractiveTransitionDidFinish:]_block_invoke */ } });
    (*(rbx + 0x10))(rbx, r15->_clonedCellsDict);
    intrinsic_movaps(var_180, 0x0);
    intrinsic_movaps(var_190, 0x0);
    var_1A0 = intrinsic_movaps(var_1A0, 0x0);
    var_1B0 = intrinsic_movaps(var_1B0, 0x0);
    r12 = [[r15->_clonedSupplementaryViewsDict objectEnumerator] retain];
    r13 = @selector(countByEnumeratingWithState:objects:count:);
    r14 = _objc_msgSend(r12, r13, var_1B0, var_B0, 0x10);
    if (r14 != 0x0) {
            var_200 = r15;
            r13 = *var_1A0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_1A0 != r13) {
                                    objc_enumerationMutation(r12);
                            }
                            (*(rbx + 0x10))(rbx, *(var_1A8 + r15 * 0x8));
                            r15 = r15 + 0x1;
                    } while (r15 < r14);
                    r14 = [r12 countByEnumeratingWithState:var_1B0 objects:var_B0 count:0x10];
            } while (r14 != 0x0);
            r15 = var_200;
            r13 = @selector(countByEnumeratingWithState:objects:count:);
    }
    var_200 = r15;
    [r12 release];
    intrinsic_movaps(var_1C0, 0x0);
    intrinsic_movaps(var_1D0, 0x0);
    var_1E0 = intrinsic_movaps(var_1E0, 0x0);
    var_1F0 = intrinsic_movaps(var_1F0, 0x0);
    r12 = [[r15->_clonedDecorationViewsDict objectEnumerator] retain];
    r14 = _objc_msgSend(r12, r13);
    if (r14 != 0x0) {
            r13 = *var_1E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_1E0 != r13) {
                                    objc_enumerationMutation(r12);
                            }
                            (*(rbx + 0x10))(rbx, *(var_1E8 + r15 * 0x8));
                            r15 = r15 + 0x1;
                    } while (r15 < r14);
                    r14 = [r12 countByEnumeratingWithState:var_1F0 objects:var_130 count:0x10];
            } while (r14 != 0x0);
    }
    [r12 release];
    var_200->_clonedCellsDict = 0x0;
    [var_200->_clonedCellsDict release];
    var_200->_clonedSupplementaryViewsDict = 0x0;
    [var_200->_clonedSupplementaryViewsDict release];
    var_200->_clonedDecorationViewsDict = 0x0;
    [var_200->_clonedDecorationViewsDict release];
    [rbx release];
    [var_218 release];
    [var_210 release];
    [var_208 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void ___64-[UICollectionView _cleanUpAfterInteractiveTransitionDidFinish:]_block_invoke(void * _block, struct NSMutableDictionary * arg1) {
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    r15 = [[arg1 objectEnumerator] retain];
    rbx = [r15 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r13 = *var_E0;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_E0 != r13) {
                                    objc_enumerationMutation(r15);
                            }
                            [*(var_E8 + r14 * 0x8) removeFromSuperview];
                            r14 = r14 + 0x1;
                    } while (r14 < rbx);
                    rbx = [r15 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    [r15 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:](void * self, void * _cmd, bool arg2, bool arg3) {
    rdi = self;
    r12 = arg3;
    var_160 = arg2;
    r15 = _cmd;
    rdx = *___stack_chk_guard;
    var_30 = rdx;
    rcx = *_OBJC_IVAR_$_UICollectionView._isInInteractiveTransition;
    if (*(int8_t *)(rdi + rcx) == 0x0) {
            var_170 = rdi;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r13 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            r8 = r13;
            [rbx handleFailureInMethod:r15 object:var_170 file:r8 lineNumber:0x108b description:@"the collection was not prepared for an interactive transition. see startInteractiveTransitionToCollectionViewLayout:completion:"];
            [r13 release];
            [rbx release];
            rdx = *___stack_chk_guard;
            rcx = *_OBJC_IVAR_$_UICollectionView._isInInteractiveTransition;
            rdi = var_170;
    }
    rdi->_shouldAccumulateTrackedLayoutValues = 0x0;
    xmm0 = intrinsic_movsd(xmm0, rdi->_currentInteractiveTransitionTimeStamp);
    xmm1 = intrinsic_movsd(xmm1, rdi->_previousInteractiveTransitionTimeStamp);
    xmm2 = intrinsic_xorpd(xmm2, xmm2);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
            xmm2 = intrinsic_movsd(xmm2, rdi->_currentInteractiveTransitionProgress);
            xmm2 = intrinsic_subsd(xmm2, rdi->_previousInteractiveTransitionProgress);
            xmm0 = intrinsic_subsd(xmm0, xmm1);
            xmm2 = intrinsic_divsd(xmm2, xmm0);
    }
    if (r12 != 0x0) {
            var_168 = intrinsic_movsd(var_168, xmm2);
            var_170 = rdi;
            rbx = [rdi retain];
            var_B8 = rbx;
            var_178 = objc_retainBlock(__NSConcreteStackBlock);
            r15 = [rbx retain];
            var_E8 = r15;
            rax = objc_retainBlock(__NSConcreteStackBlock);
            if (var_160 == 0x0) {
                    var_198 = rax;
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
            }
            else {
                    var_198 = rax;
                    xmm0 = intrinsic_movsd(xmm0, *0xc4f410);
            }
            var_160 = intrinsic_movsd(var_160, xmm0);
            rax = [_UIDynamicValueAnimation alloc];
            var_158 = r15;
            xmm0 = intrinsic_movsd(xmm0, r15->_currentInteractiveTransitionProgress);
            intrinsic_movsd(xmm2, *0xc50fa0);
            intrinsic_movsd(xmm1, var_168);
            r13 = [rax initWithValue:rdx velocity:rcx unitSize:r8];
            var_180 = r13;
            xmm0 = intrinsic_movsd(xmm0, var_160, 0x1);
            r14 = [[_UIDynamicAnimationActiveValue upperBoundary:rdx ofType:rcx] retain];
            var_188 = r14;
            xmm0 = intrinsic_movsd(xmm0, var_160, 0x1);
            r12 = [[_UIDynamicAnimationActiveValue lowerBoundary:rdx ofType:rcx] retain];
            var_190 = r12;
            [r13 addActiveValue:r14];
            [r13 addActiveValue:r12];
            r15->_endInteractiveTransitionAnimationGroup = [[_UIDynamicAnimationGroup alloc] init];
            [r15->_endInteractiveTransitionAnimationGroup release];
            [r15->_endInteractiveTransitionAnimationGroup _setUsesNSTimer:0x1];
            [r15->_endInteractiveTransitionAnimationGroup addAnimation:r13];
            rax = [r15 _dynamicAnimationsForTrackValues];
            rax = [rax retain];
            var_160 = rax;
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_120, xmm0);
            intrinsic_movapd(var_130, xmm0);
            var_140 = intrinsic_movapd(var_140, xmm0);
            var_150 = intrinsic_movapd(var_150, xmm0);
            r13 = [rax countByEnumeratingWithState:var_150 objects:var_B0 count:0x10];
            if (r13 != 0x0) {
                    r15 = *var_140;
                    do {
                            r14 = 0x0;
                            do {
                                    if (*var_140 != r15) {
                                            objc_enumerationMutation(var_160);
                                    }
                                    [var_158->_endInteractiveTransitionAnimationGroup addAnimation:*(var_148 + r14 * 0x8)];
                                    r14 = r14 + 0x1;
                            } while (r14 < r13);
                            r13 = [var_160 countByEnumeratingWithState:var_150 objects:var_B0 count:0x10];
                    } while (r13 != 0x0);
            }
            [var_158->_endInteractiveTransitionAnimationGroup runWithGroupApplier:var_178 completion:var_198];
            var_170->_isInInteractiveTransition = 0x0;
            [var_160 release];
            [var_190 release];
            [var_188 release];
            [var_180 release];
            [var_198 release];
            [var_E8 release];
            [var_178 release];
            [var_B8 release];
            if (*___stack_chk_guard != var_30) {
                    __stack_chk_fail();
            }
    }
    else {
            rdi->_isInInteractiveTransition = 0x0;
            if (*___stack_chk_guard == var_30) {
                    [rdi _cleanUpAfterInteractiveTransitionDidFinish:var_160 & 0xff];
            }
            else {
                    __stack_chk_fail();
            }
    }
    return;
}

void ___76-[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:]_block_invoke(int arg0, int arg1) {
    r15 = arg0;
    if (arg1 <= 0x2) {
            r12 = [[*(r15 + 0x20)->_endInteractiveTransitionAnimationGroup animations] retain];
            rbx = [[r12 objectAtIndex:0x0] retain];
            [rbx value];
            var_30 = intrinsic_movsd(var_30, xmm0);
            [rbx release];
            [r12 release];
            intrinsic_movsd(xmm0, var_30);
            [*(r15 + 0x20) _updateTransitionWithProgress:0x0];
            rbx = [[*(r15 + 0x20)->_endInteractiveTransitionAnimationGroup animations] retain];
            r12 = [rbx count];
            [rbx release];
            if (r12 >= 0x2) {
                    rbx = [[*(r15 + 0x20)->_endInteractiveTransitionAnimationGroup animations] retain];
                    r14 = [rbx mutableCopy];
                    [rbx release];
                    [r14 removeObjectAtIndex:0x0, *_OBJC_IVAR_$_UICollectionView._endInteractiveTransitionAnimationGroup];
                    [*(r15 + 0x20) _updateTrackedLayoutValuesWith:r14, *_OBJC_IVAR_$_UICollectionView._endInteractiveTransitionAnimationGroup];
                    rdi = r14;
                    [rdi release];
            }
    }
    return;
}

int ___76-[UICollectionView _finishInteractiveTransitionShouldFinish:finalAnimation:]_block_invoke.1609(int arg0) {
    [*(arg0 + 0x20) _cleanUpAfterInteractiveTransitionDidFinish:*(int8_t *)(arg0 + 0x28) & 0xff];
    *(arg0 + 0x20)->_endInteractiveTransitionAnimationGroup = 0x0;
    rax = [*(arg0 + 0x20)->_endInteractiveTransitionAnimationGroup release];
    return rax;
}

void -[UICollectionView _finishInteractiveTransitionWithFinalAnimation:](void * self, void * _cmd, bool arg2) {
    [self _finishInteractiveTransitionShouldFinish:0x1 finalAnimation:arg2 & 0xff];
    return;
}

void -[UICollectionView _cancelInteractiveTransitionWithFinalAnimation:](void * self, void * _cmd, bool arg2) {
    [self _finishInteractiveTransitionShouldFinish:0x0 finalAnimation:arg2 & 0xff];
    return;
}

void -[UICollectionView finishInteractiveTransition](void * self, void * _cmd) {
    [self _finishInteractiveTransitionShouldFinish:0x1 finalAnimation:0x1];
    return;
}

void -[UICollectionView cancelInteractiveTransition](void * self, void * _cmd) {
    [self _finishInteractiveTransitionShouldFinish:0x0 finalAnimation:0x1];
    return;
}

void * -[UICollectionView _pivotForTransitionFromLayout:toLayout:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = self;
    rbx = 0x0;
    if ((r14->_collectionViewFlags & 0x10) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r14);
            rbx = [[r15 _indexPathOfReferenceItemForLayoutTransitionInCollectionView:r14] retain];
            [r15 release];
    }
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

NSInteger -[UICollectionView numberOfSections](void * self, void * _cmd) {
    [self _reloadDataIfNeeded];
    rax = [self->_collectionViewData numberOfSections];
    return rax;
}

NSInteger -[UICollectionView numberOfItemsInSection:](void * self, void * _cmd, NSInteger arg2) {
    [self _reloadDataIfNeeded];
    rax = [self->_collectionViewData numberOfItemsInSection:arg2];
    return rax;
}

void * -[UICollectionView layoutAttributesForItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    [self _reloadDataIfNeeded];
    rbx = [[self->_collectionViewData layoutAttributesForItemAtIndexPath:arg2] retain];
    r14 = [rbx copy];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView layoutAttributesForSupplementaryElementOfKind:atIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    r12 = [arg2 retain];
    [self _reloadDataIfNeeded];
    rbx = [self->_collectionViewData layoutAttributesForSupplementaryElementOfKind:r12 atIndexPath:arg3];
    [r12 release];
    rbx = [rbx retain];
    r14 = [rbx copy];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView indexPathForItemAtPoint:](void * self, void * _cmd, struct CGPoint arg2) {
    var_118 = intrinsic_movsd(var_118, xmm1, arg2);
    var_120 = intrinsic_movsd(var_120, xmm0);
    [self _reloadDataIfNeeded];
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_C0, xmm0);
    intrinsic_movapd(var_D0, xmm0);
    var_E0 = intrinsic_movapd(var_E0, xmm0);
    var_F0 = intrinsic_movapd(var_F0, xmm0);
    xmm0 = intrinsic_movsd(xmm0, var_120);
    var_110 = intrinsic_movsd(var_110, xmm0);
    xmm0 = intrinsic_movsd(xmm0, var_118);
    var_108 = intrinsic_movsd(var_108, xmm0);
    intrinsic_movups(var_100, intrinsic_movaps(xmm0, *(int128_t *)0xc4f920));
    rax = [self->_collectionViewData layoutAttributesForElementsInRect:rdx, rcx];
    rax = [rax retain];
    var_130 = rax;
    r12 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_118 = 0x0;
    if (r12 != 0x0) {
            r13 = *var_E0;
            var_138 = r13;
            var_118 = 0x0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_E0 != r13) {
                                    objc_enumerationMutation(var_130);
                            }
                            r14 = *(var_E8 + r15 * 0x8);
                            if ([r14 _isCell] != 0x0) {
                                    if (var_118 != 0x0) {
                                            r13 = var_138;
                                            if ([r14 zIndex] > [var_118 zIndex]) {
                                                    rbx = [r14 retain];
                                                    [var_118 release];
                                                    var_118 = rbx;
                                            }
                                    }
                                    else {
                                            r13 = var_138;
                                            rbx = [r14 retain];
                                            [var_118 release];
                                            var_118 = rbx;
                                    }
                            }
                            r15 = r15 + 0x1;
                    } while (r15 < r12);
                    r12 = [var_130 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (r12 != 0x0);
    }
    [var_130 release];
    r14 = [[var_118 indexPath] retain];
    [var_118 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rdi = r14;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void * -[UICollectionView _visibleViewDictForElementCategory:elementKind:](void * self, void * _cmd, NSUInteger arg2, void * arg3) {
    rbx = arg2;
    r14 = self;
    r15 = [arg3 retain];
    if (rbx == 0x1) goto loc_976ec1;

loc_976ea6:
    if (rbx != 0x0) goto loc_976eca;

loc_976eab:
    rbx = [r14->_visibleCellsDict retain];
    goto loc_976f40;

loc_976f40:
    [r15 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;

loc_976eca:
    r13 = *_OBJC_IVAR_$_UICollectionView._visibleDecorationViewsDict;
    goto loc_976ed1;

loc_976ed1:
    rbx = [[*(r14 + r13) objectForKeyedSubscript:r15] retain];
    if (rbx == 0x0) {
            r12 = [[NSMutableDictionary alloc] init];
            [rbx release];
            [*(r14 + r13) setObject:r12 forKeyedSubscript:r15];
            rbx = r12;
    }
    goto loc_976f40;

loc_976ec1:
    r13 = *_OBJC_IVAR_$_UICollectionView._visibleSupplementaryViewsDict;
    goto loc_976ed1;
}

void * -[UICollectionView _indexPathForView:ofType:includePrefetchedCells:](void * self, void * _cmd, void * arg2, NSUInteger arg3, bool arg4) {
    r8 = arg4;
    var_CC = r8;
    var_C8 = self;
    r13 = [arg2 retain];
    [self _reloadDataIfNeeded];
    var_50 = 0x0;
    intrinsic_movdqu(var_40, intrinsic_punpcklqdq(zero_extend_64(___Block_byref_object_copy_), zero_extend_64(___Block_byref_object_dispose_)));
    rbx = [[r13 _layoutAttributes] retain];
    r14 = [[rbx _elementKind] retain];
    rcx = r14;
    r12 = [[var_C8 _visibleViewDictForElementCategory:arg3 elementKind:rcx] retain];
    r13 = [r13 retain];
    var_68 = r13;
    rsi = @selector(enumerateKeysAndObjectsUsingBlock:);
    _objc_msgSend(r12, rsi);
    [r12 release];
    [r14 release];
    [rbx release];
    if (arg3 != 0x0) goto loc_9771ff;

loc_9770d2:
    rax = *(var_50 + 0x28);
    if (rax == 0x0) {
            rcx = var_CC ^ 0x1;
            if (rcx == 0x0) {
                    rcx = var_C8;
                    var_98 = [r13 retain];
                    rsi = @selector(enumerateKeysAndObjectsUsingBlock:);
                    _objc_msgSend(rcx->_prefetchCacheItems, rsi);
                    [var_98 release];
                    rax = *(var_50 + 0x28);
            }
    }
    if (rax != 0x0) goto loc_9771ff;

loc_97718e:
    rsi = @selector(_focusedCell);
    rax = _objc_msgSend(var_C8, rsi);
    rax = [rax retain];
    if (rax == r13) goto loc_9771b4;

loc_9771af:
    rdi = rax;
    goto loc_9771f9;

loc_9771f9:
    [rdi release];
    goto loc_9771ff;

loc_9771ff:
    rbx = [*(var_50 + 0x28) retain];
    [var_68 release];
    _Block_object_dispose(0x0, 0x8);
    [0x0 release];
    [r13 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;

loc_9771b4:
    [r13 release];
    rdi = var_C8;
    if (var_C8->_focusedViewType != 0x1) goto loc_9771ff;

loc_9771d8:
    rsi = @selector(_focusedCellIndexPath);
    rax = _objc_msgSend(rdi, rsi);
    rax = [rax retain];
    rcx = var_50;
    rdi = *(rcx + 0x28);
    *(rcx + 0x28) = rax;
    goto loc_9771f9;
}

void ___68-[UICollectionView _indexPathForView:ofType:includePrefetchedCells:]_block_invoke(int arg0, int arg1, int arg2, int arg3) {
    rsi = arg1;
    rdi = arg0;
    r14 = arg3;
    if (*(rdi + 0x20) == arg2) {
            *(*(*(rdi + 0x28) + 0x8) + 0x28) = [rsi retain];
            [*(*(*(rdi + 0x28) + 0x8) + 0x28) release];
            *(int8_t *)r14 = 0x1;
    }
    return;
}

void ___68-[UICollectionView _indexPathForView:ofType:includePrefetchedCells:]_block_invoke.1641(int arg0, int arg1, int arg2, int arg3) {
    r14 = arg3;
    r12 = arg0;
    r15 = [arg1 retain];
    rbx = [[arg2 view] retain];
    [rbx release];
    if (*(r12 + 0x20) == rbx) {
            *(*(*(r12 + 0x28) + 0x8) + 0x28) = [r15 retain];
            [*(*(*(r12 + 0x28) + 0x8) + 0x28) release];
            *(int8_t *)r14 = 0x1;
    }
    rdi = r15;
    [rdi release];
    return;
}

void * -[UICollectionView indexPathForCell:](void * self, void * _cmd, void * arg2) {
    rax = [self _indexPathForView:arg2 ofType:0x0 includePrefetchedCells:0x0];
    return rax;
}

void * -[UICollectionView _indexPathForCell:includePrefetchedCells:](void * self, void * _cmd, void * arg2, bool arg3) {
    rax = [self _indexPathForView:arg2 ofType:0x0 includePrefetchedCells:arg3 & 0xff];
    return rax;
}

void * -[UICollectionView indexPathForSupplementaryView:](void * self, void * _cmd, void * arg2) {
    r12 = [arg2 retain];
    r15 = [[arg2 _layoutAttributes] retain];
    rbx = [self _indexPathForView:r12 ofType:[r15 representedElementCategory] includePrefetchedCells:0x0];
    [r12 release];
    rbx = [rbx retain];
    [r15 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView cellForItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rax = [self _cellForItemAtIndexPath:arg2 includePrefetchedCells:0x0];
    return rax;
}

void * -[UICollectionView _cellForItemAtIndexPath:includePrefetchedCells:](void * self, void * _cmd, void * arg2, bool arg3) {
    r15 = arg3;
    r12 = self;
    r14 = [arg2 retain];
    rbx = 0x0;
    if (r14 != 0x0) {
            [r12 _reloadDataIfNeeded];
            rax = r12->_currentUpdate;
            if (rax != 0x0) {
                    rdi = rax->_oldModel;
            }
            else {
                    rdi = r12->_collectionViewData;
            }
            rbx = 0x0;
            if ([rdi globalIndexForItemAtIndexPath:r14] != 0x7fffffffffffffff) {
                    if ([r12 _hasFocusedCellForIndexPath:r14 shouldUsePreUpdateData:0x1] != 0x0) {
                            rbx = [r12->_focusedCell retain];
                    }
                    else {
                            rbx = [[r12->_visibleCellsDict objectForKeyedSubscript:r14] retain];
                            if ((rbx == 0x0) && (r15 != 0x0)) {
                                    r15 = [[r12->_prefetchCacheItems objectForKeyedSubscript:r14] retain];
                                    if (r15 != 0x0) {
                                            r12 = [[r15 view] retain];
                                            [rbx release];
                                            rbx = r12;
                                    }
                                    [r15 release];
                            }
                    }
            }
    }
    [r14 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView visibleCells](void * self, void * _cmd) {
    [self _reloadDataIfNeeded];
    rbx = [[[NSMutableArray alloc] init] retain];
    [self->_visibleCellsDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [rbx release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void ___32-[UICollectionView visibleCells]_block_invoke(int arg0) {
    [*(arg0 + 0x20) addObject:rdx];
    return;
}

void * -[UICollectionView preparedCells](void * self, void * _cmd) {
    rbx = [[self visibleCells] retain];
    r15 = [rbx mutableCopy];
    [rbx release];
    rbx = [r15 retain];
    [self->_prefetchCacheItems enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [rbx release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void ___33-[UICollectionView preparedCells]_block_invoke(int arg0) {
    r14 = arg0;
    r12 = [rdx retain];
    rbx = [[r12 view] retain];
    [rbx release];
    if (rbx != 0x0) {
            rbx = [[r12 view] retain];
            [*(r14 + 0x20) addObject:rbx];
            [rbx release];
    }
    rdi = r12;
    [rdi release];
    return;
}

void -[UICollectionView traitCollectionDidChange:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    r15 = [arg2 retain];
    [[r14 super] traitCollectionDidChange:r15];
    if (r15 != 0x0) {
            r12 = [r15 horizontalSizeClass];
            r13 = [[r14 traitCollection] retain];
            var_3C = r12 != [r13 horizontalSizeClass] ? 0x1 : 0x0;
            [r13 release];
            r12 = [r15 verticalSizeClass];
            rbx = [[r14 traitCollection] retain];
            r12 = r12 != [rbx verticalSizeClass] ? 0x1 : 0x0;
            [rbx release];
            rax = var_3C;
    }
    else {
            rax = 0x0;
            r12 = 0x0;
    }
    if ((rax != 0x0) || (r12 != 0x0)) {
            [r14 _resetPrefetchState];
    }
    [r15 release];
    return;
}

void * -[UICollectionView indexPathsForVisibleItems](void * self, void * _cmd) {
    [self _reloadDataIfNeeded];
    rax = [self->_visibleCellsDict allKeys];
    return rax;
}

void * -[UICollectionView supplementaryViewForElementKind:atIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    rax = [self _visibleSupplementaryViewOfKind:arg2 atIndexPath:arg3];
    return rax;
}

void * -[UICollectionView visibleSupplementaryViewsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _visibleSupplementaryViewsOfKind:arg2];
    return rax;
}

void * -[UICollectionView indexPathsForVisibleSupplementaryElementsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _indexPathsForVisibleSupplementaryViewsOfKind:arg2];
    return rax;
}

void * -[UICollectionView _visibleSupplementaryViewsOfKind:isDecorationView:](void * self, void * _cmd, void * arg2, bool arg3) {
    r12 = [arg2 retain];
    [self _reloadDataIfNeeded];
    rbx = [self _visibleViewDictForElementCategory:(arg3 & 0xff) + 0x1 elementKind:r12];
    [r12 release];
    rbx = [rbx retain];
    r14 = [[rbx allValues] retain];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView _visibleSupplementaryViewsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _visibleSupplementaryViewsOfKind:arg2 isDecorationView:0x0];
    return rax;
}

void * -[UICollectionView _visibleDecorationViewsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _visibleSupplementaryViewsOfKind:arg2 isDecorationView:0x1];
    return rax;
}

void * -[UICollectionView _indexPathsForVisibleSupplementaryViewsOfKind:isDecorationView:](void * self, void * _cmd, void * arg2, bool arg3) {
    r12 = [arg2 retain];
    [self _reloadDataIfNeeded];
    rbx = [self _visibleViewDictForElementCategory:(arg3 & 0xff) + 0x1 elementKind:r12];
    [r12 release];
    rbx = [rbx retain];
    r14 = [[rbx allKeys] retain];
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView _indexPathsForVisibleSupplementaryViewsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _indexPathsForVisibleSupplementaryViewsOfKind:arg2 isDecorationView:0x0];
    return rax;
}

void * -[UICollectionView _indexPathsForVisibleDecorationViewsOfKind:](void * self, void * _cmd, void * arg2) {
    rax = [self _indexPathsForVisibleSupplementaryViewsOfKind:arg2 isDecorationView:0x1];
    return rax;
}

void * -[UICollectionView _templateLayoutCellForCellsWithReuseIdentifier:](void * self, void * _cmd, void * arg2) {
    r15 = self;
    r14 = [arg2 retain];
    rbx = 0x0;
    if (r14 == 0x0) goto loc_977d45;

loc_977bc2:
    rax = 0x20000000 & r15->_collectionViewFlags;
    if (rax == 0x0) goto loc_977d45;

loc_977bd3:
    rbx = [[r15->_templateLayoutCells objectForKey:r14] retain];
    if (rbx == 0x0) goto loc_977c4e;

loc_977bfe:
    r15 = [[NSNull null] retain];
    r12 = [rbx isEqual:r15];
    [r15 release];
    if (r12 == 0x0) goto loc_977d45;

loc_977c46:
    rdi = rbx;
    goto loc_977d3d;

loc_977d3d:
    [rdi release];
    rbx = 0x0;
    goto loc_977d45;

loc_977d45:
    [r14 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;

loc_977c4e:
    r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r15);
    var_30 = [[r13 _collectionView:r15 templateLayoutCellForCellsWithReuseIdentifier:r14] retain];
    [rbx release];
    [r13 release];
    rbx = r15->_templateLayoutCells;
    if (rbx == 0x0) {
            r15->_templateLayoutCells = [[NSMutableDictionary alloc] init];
            [r15->_templateLayoutCells release];
            rbx = r15->_templateLayoutCells;
    }
    r15 = var_30;
    if (var_30 == 0x0) goto loc_977d04;

loc_977ce9:
    [rbx setObject:r15 forKey:r14];
    rbx = r15;
    goto loc_977d45;

loc_977d04:
    r15 = [[NSNull null] retain];
    [rbx setObject:r15 forKey:r14];
    rdi = r15;
    goto loc_977d3d;
}

void -[UICollectionView scrollToItemAtIndexPath:atScrollPosition:animated:](void * self, void * _cmd, void * arg2, NSUInteger arg3, bool arg4) {
    var_F4 = arg4;
    r14 = arg3;
    r13 = arg2;
    r15 = self;
    [self _reloadDataIfNeeded];
    if (r13 == 0x0) goto .l1;

loc_977d9e:
    var_100 = r14;
    if ([r13 section] < [r15->_collectionViewData numberOfSections]) {
            r14 = [r13 item];
            rax = [r13 section];
            if (r14 >= [r15->_collectionViewData numberOfItemsInSection:rax]) {
                    rcx = @"attempt to scroll to invalid index path: %@";
                    [NSException raise:*_NSInvalidArgumentException format:rcx];
            }
    }
    else {
            rcx = @"attempt to scroll to invalid index path: %@";
            [NSException raise:*_NSInvalidArgumentException format:rcx];
    }
    r14 = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
    rdx = r13;
    r12 = [[r15->_collectionViewData layoutAttributesForItemAtIndexPath:rdx] retain];
    [var_50 bounds];
    xmm0 = intrinsic_movsd(xmm0, var_50);
    var_D8 = intrinsic_movsd(var_D8, xmm0);
    xmm0 = intrinsic_movsd(xmm0, var_48);
    var_F0 = intrinsic_movsd(var_F0, xmm0);
    rdi = var_70;
    rsi = r15;
    [rdi contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_68);
    xmm1 = intrinsic_movsd(xmm1, var_70);
    xmm2 = intrinsic_movsd(xmm2, var_58);
    xmm2 = intrinsic_unpcklpd(xmm2, xmm1);
    xmm2 = intrinsic_addpd(xmm2, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm1);
    xmm0 = intrinsic_addpd(xmm0, var_50);
    var_50 = intrinsic_movapd(var_50, xmm0);
    xmm0 = intrinsic_movapd(xmm0, var_40);
    xmm0 = intrinsic_subpd(xmm0, xmm2);
    var_40 = intrinsic_movapd(var_40, xmm0);
    if (r12 != 0x0) {
            rdi = var_90;
            rsi = r12;
            [rdi frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_80 = intrinsic_movapd(var_80, xmm0);
            var_90 = intrinsic_movapd(var_90, xmm0);
    }
    xmm1 = intrinsic_movsd(xmm1, var_D8);
    rbx = var_100;
    if ((rbx & 0x1) != 0x0) goto loc_977fb8;

loc_977f22:
    rax = rbx & 0x4;
    if ((rbx & 0x2) != 0x0) goto loc_978017;

loc_977f30:
    if (rax != 0x0) {
            CGRectGetMaxY(rdi);
            var_F0 = intrinsic_movsd(var_F0, xmm0);
            CGRectGetHeight(rdi);
            xmm1 = intrinsic_movsd(xmm1, var_D8);
            xmm2 = intrinsic_movsd(xmm2, var_F0);
            xmm2 = intrinsic_subsd(xmm2, xmm0);
            var_F0 = intrinsic_movsd(var_F0, xmm2);
    }
    goto loc_9780c9;

loc_9780c9:
    rax = rbx & 0x10;
    if ((rbx & 0x8) == 0x0) {
            rcx = rbx & 0x20;
            if (rax != 0x0) {
                    if (rcx != 0x0) {
                            rdi = @class(NSException);
                            rdx = *_NSInvalidArgumentException;
                            rsi = @selector(raise:format:);
                            rcx = @"attempt to use a scroll position with multiple horizontal positioning styles";
                            _objc_msgSend(rdi, rsi);
                    }
                    CGRectGetMidX(rdi);
                    var_D8 = intrinsic_movsd(var_D8, xmm0);
                    CGRectGetWidth(rdi);
                    xmm1 = intrinsic_movapd(xmm1, xmm0);
                    xmm1 = intrinsic_mulsd(xmm1, *0xc4f838);
                    xmm1 = intrinsic_addsd(xmm1, var_D8);
            }
            else {
                    if (rcx != 0x0) {
                            CGRectGetMaxX(rdi);
                            var_D8 = intrinsic_movsd(var_D8, xmm0);
                            CGRectGetWidth(rdi);
                            xmm1 = intrinsic_movsd(xmm1, var_D8);
                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                    }
            }
    }
    else {
            rax = rax == 0x0 ? 0x1 : 0x0;
            if (((rbx & 0x20) != 0x0) || (rax == 0x0)) {
                    rdi = @class(NSException);
                    rdx = *_NSInvalidArgumentException;
                    rsi = @selector(raise:format:);
                    rcx = @"attempt to use a scroll position with multiple horizontal positioning styles";
                    _objc_msgSend(rdi, rsi);
            }
            CGRectGetMinX(rdi);
            xmm1 = intrinsic_movapd(xmm1, xmm0);
    }
    if (rbx == 0x0) {
            var_D8 = intrinsic_movsd(var_D8, xmm1);
            if (CGRectContainsRect(rdi, rsi) == 0x0) {
                    CGRectGetMinY(rdi);
                    var_100 = intrinsic_movsd(var_100, xmm0);
                    CGRectGetMinY(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_100);
                    if (xmm0 > 0x0) {
                            CGRectGetMinY(rdi);
                            var_F0 = intrinsic_movsd(var_F0, xmm0);
                    }
                    else {
                            CGRectGetMaxY(rdi);
                            var_100 = intrinsic_movsd(var_100, xmm0);
                            CGRectGetMaxY(rdi);
                            xmm1 = intrinsic_movsd(xmm1, var_100);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                            if (xmm1 > 0x0) {
                                    CGRectGetMaxY(rdi);
                                    var_F0 = intrinsic_movsd(var_F0, xmm0);
                                    CGRectGetHeight(rdi);
                                    xmm1 = intrinsic_movsd(xmm1, var_F0);
                                    xmm1 = intrinsic_subsd(xmm1, xmm0);
                                    var_F0 = intrinsic_movsd(var_F0, xmm1);
                            }
                    }
                    CGRectGetMinX(rdi);
                    var_100 = intrinsic_movsd(var_100, xmm0);
                    CGRectGetMinX(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_100);
                    if (xmm0 > 0x0) {
                            CGRectGetMinX(rdi);
                            xmm1 = intrinsic_movapd(xmm1, xmm0);
                    }
                    else {
                            CGRectGetMaxX(rdi);
                            var_100 = intrinsic_movsd(var_100, xmm0);
                            CGRectGetMaxX(rdi);
                            xmm1 = intrinsic_movsd(xmm1, var_100);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                            if (xmm1 > 0x0) {
                                    CGRectGetMaxX(rdi);
                                    var_D8 = intrinsic_movsd(var_D8, xmm0);
                                    CGRectGetWidth(rdi);
                                    xmm1 = intrinsic_movsd(xmm1, var_D8);
                                    xmm1 = intrinsic_subsd(xmm1, xmm0);
                            }
                            else {
                                    xmm1 = intrinsic_movsd(xmm1, var_D8);
                            }
                    }
            }
            else {
                    xmm1 = intrinsic_movsd(xmm1, var_D8);
            }
    }
    xmm1 = intrinsic_subsd(xmm1, var_68);
    xmm0 = intrinsic_movsd(xmm0, var_F0);
    xmm0 = intrinsic_subsd(xmm0, var_70);
    var_F0 = intrinsic_movsd(var_F0, xmm0);
    rsi = *(r15 + r14);
    if (rsi != 0x0) {
            var_D8 = intrinsic_movsd(var_D8, xmm1);
            [var_B0 collectionViewContentRect];
    }
    else {
            var_D8 = intrinsic_movsd(var_D8, xmm1);
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_A0 = intrinsic_movapd(var_A0, xmm0);
            var_B0 = intrinsic_movapd(var_B0, xmm0);
    }
    rdi = var_D0;
    [rdi contentInset];
    CGRectGetHeight(rdi);
    xmm0 = intrinsic_addsd(xmm0, var_F0);
    xmm0 = intrinsic_addsd(xmm0, var_D0);
    var_100 = intrinsic_movsd(var_100, xmm0);
    CGRectGetMaxY(rdi);
    xmm1 = intrinsic_movsd(xmm1, var_100);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) {
            CGRectGetMaxY(rdi);
            var_F0 = intrinsic_movsd(var_F0, xmm0);
            CGRectGetHeight(rdi);
            xmm1 = intrinsic_movsd(xmm1, var_F0);
            xmm2 = intrinsic_movsd(xmm2, var_D0);
            xmm0 = intrinsic_addsd(xmm0, xmm2);
            xmm1 = intrinsic_subsd(xmm1, xmm0);
    }
    else {
            xmm2 = intrinsic_movsd(xmm2, var_D0);
            xmm1 = intrinsic_movsd(xmm1, var_F0);
    }
    xmm0 = intrinsic_movapd(xmm0, xmm1);
    asm { cmpltsd    xmm0, xmm2 };
    xmm2 = intrinsic_xorpd(xmm2, *(int128_t *)0xc4f600);
    xmm2 = intrinsic_andpd(xmm2, xmm0);
    xmm0 = intrinsic_andnpd(xmm0, xmm1);
    xmm2 = intrinsic_orpd(xmm2, xmm0);
    var_F0 = intrinsic_movapd(var_F0, xmm2);
    CGRectGetWidth(rdi);
    xmm0 = intrinsic_addsd(xmm0, var_D8);
    xmm0 = intrinsic_addsd(xmm0, var_C8);
    var_100 = intrinsic_movsd(var_100, xmm0);
    CGRectGetMaxX(rdi);
    xmm1 = intrinsic_movsd(xmm1, var_100);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) {
            CGRectGetMaxX(rdi);
            var_D8 = intrinsic_movsd(var_D8, xmm0);
            CGRectGetWidth(rdi);
            xmm2 = intrinsic_movsd(xmm2, var_D8);
            xmm1 = intrinsic_movapd(xmm1, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_C8);
            xmm1 = intrinsic_addsd(xmm1, xmm0);
            xmm2 = intrinsic_subsd(xmm2, xmm1);
    }
    else {
            xmm0 = intrinsic_movsd(xmm0, var_C8);
            xmm2 = intrinsic_movsd(xmm2, var_D8);
    }
    xmm1 = intrinsic_movapd(xmm1, xmm2);
    asm { cmpltsd    xmm1, xmm0 };
    xmm0 = intrinsic_xorpd(xmm0, *(int128_t *)0xc4f600);
    xmm0 = intrinsic_andpd(xmm0, xmm1);
    xmm1 = intrinsic_andnpd(xmm1, xmm2);
    intrinsic_orpd(xmm0, xmm1);
    intrinsic_movaps(xmm1, var_F0, var_F4 & 0xff);
    [r15 setContentOffset:rdx animated:rcx];
    [r12 release];
    return;

.l1:
    return;

loc_978017:
    var_D8 = intrinsic_movsd(var_D8, xmm1);
    if (rax != 0x0) {
            rdi = @class(NSException);
            rdx = *_NSInvalidArgumentException;
            rsi = @selector(raise:format:);
            rcx = @"attempt to use a scroll position with multiple vertical positioning styles";
            _objc_msgSend(rdi, rsi);
    }
    CGRectGetMidY(rdi);
    var_F0 = intrinsic_movsd(var_F0, xmm0);
    CGRectGetHeight(rdi);
    xmm0 = intrinsic_mulsd(xmm0, *0xc4f838);
    xmm0 = intrinsic_addsd(xmm0, var_F0);
    goto loc_9780b9;

loc_9780b9:
    var_F0 = intrinsic_movsd(var_F0, xmm0);
    xmm1 = intrinsic_movsd(xmm1, var_D8);
    goto loc_9780c9;

loc_977fb8:
    if ((rbx & 0x6) != 0x0) {
            rdi = @class(NSException);
            rdx = *_NSInvalidArgumentException;
            rsi = @selector(raise:format:);
            rcx = @"attempt to use a scroll position with multiple vertical positioning styles";
            _objc_msgSend(rdi, rsi);
    }
    CGRectGetMinY(rdi);
    goto loc_9780b9;
}

void -[UICollectionView setContentInset:](void * self, void * _cmd, struct UIEdgeInsets arg2) {
    rbx = self;
    [[rbx super] setContentInset:arg2, rcx];
    if ([UIView _isInAnimationBlock] != 0x0) {
            [rbx layoutBelowIfNeeded];
    }
    return;
}

void -[UICollectionView setContentOffset:animated:](void * self, void * _cmd, struct CGPoint arg2, bool arg3) {
    r14 = arg2;
    var_68 = intrinsic_movsd(var_68, xmm1, arg2, arg3);
    var_60 = intrinsic_movsd(var_60, xmm0);
    rbx = self;
    [self contentOffset];
    xmm2 = intrinsic_movsd(xmm2, var_68);
    xmm0 = intrinsic_ucomisd(xmm0, var_60);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm1 = intrinsic_ucomisd(xmm1, xmm2);
            if ((xmm1 != 0x0) || (!CPU_FLAGS & NP)) {
                    [var_48 bounds];
                    xmm0 = intrinsic_movsd(xmm0, var_60);
                    var_48 = intrinsic_movsd(var_48, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_68);
                    var_40 = intrinsic_movsd(var_40, xmm0);
                    if ([rbx->_collectionViewData layoutIsPrepared] != 0x0) {
                            if ([rbx->_layout shouldInvalidateLayoutForBoundsChange:rdx, rcx] != 0x0) {
                                    r15 = [[rbx->_layout invalidationContextForBoundsChange:rdx, rcx] retain];
                                    rdx = r15;
                                    [rbx->_layout _invalidateLayoutUsingContext:rdx];
                                    [r15 release];
                            }
                    }
                    xmm2 = intrinsic_movsd(xmm2, var_68);
            }
    }
    else {
            [var_48 bounds];
            xmm0 = intrinsic_movsd(xmm0, var_60);
            var_48 = intrinsic_movsd(var_48, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_68);
            var_40 = intrinsic_movsd(var_40, xmm0);
            if ([rbx->_collectionViewData layoutIsPrepared] != 0x0) {
                    if ([rbx->_layout shouldInvalidateLayoutForBoundsChange:rdx, rcx] != 0x0) {
                            r15 = [[rbx->_layout invalidationContextForBoundsChange:rdx, rcx] retain];
                            rdx = r15;
                            [rbx->_layout _invalidateLayoutUsingContext:rdx];
                            [r15 release];
                    }
            }
            xmm2 = intrinsic_movsd(xmm2, var_68);
    }
    intrinsic_movsd(xmm0, var_60, r14 & 0xff);
    intrinsic_movapd(xmm1, xmm2);
    [[rbx super] setContentOffset:rdx animated:rcx];
    return;
}

void * +[UICollectionView _reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = [arg2 retain];
    r12 = [arg3 retain];
    if ((*__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastKind != r14) || (*__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastIdentifier != r12)) {
            rbx = [r14 length];
            rax = [r12 length];
            var_30 = rbx + rax + 0x1;
            r13 = malloc(0x2 + rbx + rax + rbx + rax);
            [r14 getCharacters:r13];
            *(int16_t *)(r13 + rbx * 0x2) = 0x2f;
            [r12 getCharacters:r13 + rbx * 0x2 + 0x2];
            rax = [NSString alloc];
            rax = [rax initWithCharactersNoCopy:r13 length:var_30 freeWhenDone:0x1];
            rdi = *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastReuseKey;
            *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastReuseKey = rax;
            [rdi release];
            rax = [r14 copy];
            rdi = *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastKind;
            *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastKind = rax;
            [rdi release];
            rax = [r12 copy];
            rdi = *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastIdentifier;
            *__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastIdentifier = rax;
            [rdi release];
    }
    r15 = [objc_retainAutorelease(*__reuseKeyForSupplementaryViewOfKind:withReuseIdentifier:.lastReuseKey) retain];
    [r12 release];
    [r14 release];
    rdi = r15;
    rax = [rdi autorelease];
    return rax;
}

int -[UICollectionView _scrollViewWillEndDraggingWithVelocity:targetContentOffset:](int arg0) {
    intrinsic_movaps(xmm3, xmm1);
    intrinsic_movaps(xmm2, xmm0);
    xmm0 = intrinsic_movsd(xmm0, *rdx);
    xmm1 = intrinsic_movsd(xmm1, *(rdx + 0x8));
    rax = [arg0->_layout targetContentOffsetForProposedContentOffset:rdx withScrollingVelocity:rcx];
    *rdx = intrinsic_movsd(*rdx, xmm0);
    *(rdx + 0x8) = intrinsic_movsd(*(rdx + 0x8), xmm1);
    return rax;
}

void -[UICollectionView _registeredSupplementaryViewKind:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    rdi = rbx->_supplementaryViewRegisteredKinds;
    if (rdi == 0x0) {
            rbx->_supplementaryViewRegisteredKinds = [[NSMutableSet set] retain];
            [rbx->_supplementaryViewRegisteredKinds release];
            rdi = rbx->_supplementaryViewRegisteredKinds;
    }
    [rdi addObject:r14];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView registerClass:forCellWithReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = arg2;
    r12 = _cmd;
    r13 = self;
    r15 = [arg3 retain];
    if ([r15 length] == 0x0) {
            r14 = [NSStringFromSelector(r12) retain];
            r15 = r15;
            r13 = r13;
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            [r14 release];
    }
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = rbx != 0x0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x70000) {
                    if (rcx != 0x0) {
                            var_48 = r12;
                            var_40 = r15;
                            r15 = rbx;
                            r14 = 0x1;
                            if ([rbx isSubclassOfClass:[UICollectionViewCell class]] != 0x0) {
                                    var_38 = r15;
                            }
                            else {
                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_50 = [rdi retain];
                                    [rbx release];
                                    r12 = [[NSAssertionHandler currentHandler] retain];
                                    var_38 = r15;
                                    [r12 handleFailureInMethod:var_48 object:r13 file:var_50 lineNumber:0x129c description:@"attempt to register a cell class which is not a subclass of UICollectionViewCell (%@)"];
                                    [var_50 release];
                                    [r12 release];
                            }
                            r15 = var_40;
                    }
                    else {
                            var_38 = rbx;
                            r14 = 0x0;
                    }
            }
            else {
                    if (rcx != 0x0) {
                            var_38 = rbx;
                            r14 = 0x1;
                            if ([rbx isSubclassOfClass:[UICollectionViewCell class]] == 0x0) {
                                    r12 = ___UILogGetCategoryCachedImpl("Assert", _registerClass:forCellWithReuseIdentifier:.__s_category);
                                    if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                            rbx = rsp;
                                            rax = rsp;
                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                            *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                            *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                            *(rax + 0xfffffffffffffff4) = var_38;
                                            _os_log_impl(0xffffffffff68715a, *(r12 + 0x8), 0x10, "attempt to register a cell class which is not a subclass of UICollectionViewCell (%@)", rax + 0xfffffffffffffff0, 0xc);
                                    }
                            }
                    }
                    else {
                            var_38 = rbx;
                            r14 = 0x0;
                    }
            }
    }
    else {
            rcx = rbx != 0x0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x70000) != 0x0) {
                    if (rcx != 0x0) {
                            var_48 = r12;
                            var_40 = r15;
                            r15 = rbx;
                            r14 = 0x1;
                            if ([rbx isSubclassOfClass:[UICollectionViewCell class]] != 0x0) {
                                    var_38 = r15;
                            }
                            else {
                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_50 = [rdi retain];
                                    [rbx release];
                                    r12 = [[NSAssertionHandler currentHandler] retain];
                                    var_38 = r15;
                                    [r12 handleFailureInMethod:var_48 object:r13 file:var_50 lineNumber:0x129c description:@"attempt to register a cell class which is not a subclass of UICollectionViewCell (%@)"];
                                    [var_50 release];
                                    [r12 release];
                            }
                            r15 = var_40;
                    }
                    else {
                            var_38 = rbx;
                            r14 = 0x0;
                    }
            }
            else {
                    if (rcx != 0x0) {
                            var_38 = rbx;
                            r14 = 0x1;
                            if ([rbx isSubclassOfClass:[UICollectionViewCell class]] == 0x0) {
                                    r12 = ___UILogGetCategoryCachedImpl("Assert", _registerClass:forCellWithReuseIdentifier:.__s_category);
                                    if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                            rbx = rsp;
                                            rax = rsp;
                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                            *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                            *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                            *(rax + 0xfffffffffffffff4) = var_38;
                                            _os_log_impl(0xffffffffff68715a, *(r12 + 0x8), 0x10, "attempt to register a cell class which is not a subclass of UICollectionViewCell (%@)", rax + 0xfffffffffffffff0, 0xc);
                                    }
                            }
                    }
                    else {
                            var_38 = rbx;
                            r14 = 0x0;
                    }
            }
    }
    if (r13->_cellClassDict == 0x0) {
            r13->_cellClassDict = [[NSMutableDictionary alloc] init];
            [r13->_cellClassDict release];
    }
    [r13->_cellNibDict removeObjectForKey:r15];
    rdi = r13->_cellClassDict;
    if (r14 != 0x0) {
            [rdi setValue:var_38 forKey:r15];
    }
    else {
            [rdi removeObjectForKey:r15];
    }
    [r15 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView registerClass:forSupplementaryViewOfKind:withReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    var_38 = arg2;
    var_40 = _cmd;
    r13 = self;
    r15 = [arg3 retain];
    rbx = [arg4 retain];
    if ([r15 length] == 0x0) {
            r14 = [NSStringFromSelector(var_40) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid element kind to -[UICollectionView %@]"];
            [r14 release];
    }
    var_30 = rbx;
    if ([rbx length] == 0x0) {
            r12 = [NSStringFromSelector(var_40) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            [r12 release];
    }
    if (r13->_supplementaryViewClassDict == 0x0) {
            r13->_supplementaryViewClassDict = [[NSMutableDictionary alloc] init];
            [r13->_supplementaryViewClassDict release];
    }
    rbx = [[[r13 class] _reuseKeyForSupplementaryViewOfKind:r15 withReuseIdentifier:var_30] retain];
    rdx = rbx;
    [r13->_supplementaryViewNibDict removeObjectForKey:rdx];
    rdi = r13->_supplementaryViewClassDict;
    if (var_38 != 0x0) {
            [rdi setValue:rdx forKey:rbx];
    }
    else {
            [rdi removeObjectForKey:rbx];
    }
    [r13 _registeredSupplementaryViewKind:r15];
    [rbx release];
    [var_30 release];
    rdi = r15;
    [rdi release];
    return;
}

void -[UICollectionView registerNib:forCellWithReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3) {
    r12 = _cmd;
    r13 = self;
    r14 = [arg2 retain];
    r15 = [arg3 retain];
    if ([r15 length] == 0x0) {
            rbx = [NSStringFromSelector(r12) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            [rbx release];
    }
    if (r13->_cellNibDict == 0x0) {
            r13->_cellNibDict = [[NSMutableDictionary alloc] init];
            [r13->_cellNibDict release];
    }
    [r13->_cellClassDict removeObjectForKey:r15];
    rdi = r13->_cellNibDict;
    if (r14 != 0x0) {
            [rdi setValue:r14 forKey:r15];
    }
    else {
            [rdi removeObjectForKey:r15];
    }
    [r15 release];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView registerNib:forSupplementaryViewOfKind:withReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    var_40 = _cmd;
    r13 = self;
    var_38 = [arg2 retain];
    r15 = [arg3 retain];
    rbx = [arg4 retain];
    if ([r15 length] == 0x0) {
            r12 = [NSStringFromSelector(var_40) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid element kind to -[UICollectionView %@]"];
            [r12 release];
    }
    var_30 = rbx;
    if ([rbx length] == 0x0) {
            r14 = [NSStringFromSelector(var_40) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            [r14 release];
    }
    if (r13->_supplementaryViewNibDict == 0x0) {
            r13->_supplementaryViewNibDict = [[NSMutableDictionary alloc] init];
            [r13->_supplementaryViewNibDict release];
    }
    var_40 = r15;
    r15 = [[[r13 class] _reuseKeyForSupplementaryViewOfKind:r15 withReuseIdentifier:var_30] retain];
    [r13->_supplementaryViewClassDict removeObjectForKey:r15];
    r12 = var_38;
    rdi = r13->_supplementaryViewNibDict;
    if (r12 != 0x0) {
            [rdi setValue:r12 forKey:r15];
    }
    else {
            [rdi removeObjectForKey:r15];
    }
    [r13 _registeredSupplementaryViewKind:var_40];
    [r15 release];
    [var_30 release];
    [var_40 release];
    rdi = r12;
    [rdi release];
    return;
}

void -[UICollectionView _setExternalObjectTable:forNibLoadingOfCellWithReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3) {
    r12 = self;
    r14 = [arg2 retain];
    r15 = [arg3 retain];
    rdi = r12->_cellNibExternalObjectsTables;
    if (rdi == 0x0) {
            r12->_cellNibExternalObjectsTables = [[NSMutableDictionary alloc] init];
            [r12->_cellNibExternalObjectsTables release];
            rdi = r12->_cellNibExternalObjectsTables;
    }
    [rdi setObject:r14 forKey:r15];
    [r15 release];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _setExternalObjectTable:forNibLoadingOfSupplementaryViewOfKind:withReuseIdentifier:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    var_30 = arg2;
    r15 = self;
    var_38 = [arg2 retain];
    r13 = [arg3 retain];
    var_40 = [arg4 retain];
    r14 = r15->_supplementaryViewNibExternalObjectsTables;
    if (r14 == 0x0) {
            r15->_supplementaryViewNibExternalObjectsTables = [[NSMutableDictionary alloc] init];
            [r15->_supplementaryViewNibExternalObjectsTables release];
            r14 = r15->_supplementaryViewNibExternalObjectsTables;
    }
    rbx = [[r15 class] _reuseKeyForSupplementaryViewOfKind:r13 withReuseIdentifier:var_40];
    [r13 release];
    rbx = [rbx retain];
    [r14 setObject:var_30 forKey:rbx];
    [var_38 release];
    [rbx release];
    [var_40 release];
    return;
}

void -[UICollectionView _prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:](void * self, void * _cmd, void * arg2, NSUInteger arg3, void * arg4, void * arg5, void * arg_0) {
    rbx = [arg2 retain];
    var_40 = rbx;
    r15 = [arg4 retain];
    r13 = [arg5 retain];
    [self _prepareViewForUse:rbx withElementCategory:arg3 elementKind:r15 reuseIdentifier:r13 indexPath:arg_0 applyDefaultAttributes:0x1];
    r14 = [self _reuseQueueForViewWithElementCategory:arg3 elementKind:r15 reuseIdentifier:r13];
    [r13 release];
    [r15 release];
    rbx = [r14 retain];
    [rbx removeObject:arg2];
    [var_40 release];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:](void * self, void * _cmd, void * arg2, NSUInteger arg3, void * arg4, void * arg5, void * arg_0, bool arg_8) {
    r8 = arg4;
    rcx = arg3;
    var_B8 = rcx;
    r12 = self;
    r14 = [arg2 retain];
    r15 = [r8 retain];
    [r14 _setReuseIdentifier:arg5];
    [r14 setAutoresizingMask:0x0];
    [r14 setTranslatesAutoresizingMaskIntoConstraints:0x1];
    [r14 _setCollectionView:r12];
    if (arg_8 == 0x0) goto loc_979a76;

loc_9798e3:
    rdi = r12->_layout;
    if (rdi != 0x0) {
            rax = [rdi class];
            rax = [rax layoutAttributesClass];
    }
    else {
            rax = [UICollectionViewLayoutAttributes class];
    }
    rcx = arg_0;
    rdx = var_B8;
    if (rdx == 0x1) goto loc_979950;

loc_97992f:
    if (rdx != 0x0) goto loc_979959;

loc_979934:
    var_B8 = r15;
    rdx = rcx;
    rax = [rax layoutAttributesForCellWithIndexPath:rdx];
    goto loc_979973;

loc_979973:
    r15 = [rax retain];
    [r14 center];
    [r15 setCenter:rdx];
    [r14 size];
    [r15 setSize:rdx];
    r12 = [[r14 layer] retain];
    if (r12 != 0x0) {
            rdx = @selector(transform);
            r13 = var_B0;
            objc_msgSend_stret(r13, r12, rdx);
    }
    else {
            r13 = var_B0;
            intrinsic_movaps(var_40, 0x0);
            intrinsic_movaps(var_50, 0x0);
            intrinsic_movaps(var_60, 0x0);
            intrinsic_movaps(var_70, 0x0);
            intrinsic_movaps(var_80, 0x0);
            intrinsic_movaps(var_90, 0x0);
            intrinsic_movaps(var_A0, 0x0);
            intrinsic_movaps(var_B0, 0x0);
    }
    rcx = 0x10;
    *rsp = rep intrinsic_movsq(*rsp, *r13);
    [r15 setTransform3D:rdx];
    [r12 release];
    [r14 alpha];
    [r15 setAlpha:rdx];
    [r14 _setLayoutAttributes:r15];
    [r15 release];
    r15 = var_B8;
    goto loc_979a76;

loc_979a76:
    [r14 _setHostsLayoutEngine:0x1, rcx, r8];
    [r14 _markAsDequeued];
    [r15 release];
    [r14 release];
    return;

loc_979959:
    rsi = @selector(layoutAttributesForDecorationViewOfKind:withIndexPath:);
    goto loc_979960;

loc_979960:
    rdx = r15;
    var_B8 = r15;
    rax = _objc_msgSend(rax, rsi);
    goto loc_979973;

loc_979950:
    rsi = @selector(layoutAttributesForSupplementaryViewOfKind:withIndexPath:);
    goto loc_979960;
}

void * -[UICollectionView _reuseDictionaryForCell:](void * self, void * _cmd, bool arg2) {
    rdi = self;
    if (arg2 != 0x0) {
            rax = *_OBJC_IVAR_$_UICollectionView._cellReuseQueues;
    }
    else {
            rax = *_OBJC_IVAR_$_UICollectionView._supplementaryViewReuseQueues;
    }
    rax = [*(rdi + rax) retain];
    rax = [rax autorelease];
    return rax;
}

void * -[UICollectionView _reuseQueueForViewWithElementCategory:elementKind:reuseIdentifier:](void * self, void * _cmd, NSUInteger arg2, void * arg3, void * arg4) {
    r13 = arg2;
    r12 = self;
    var_30 = [arg3 retain];
    r15 = [arg4 retain];
    if (r13 != 0x0) {
            rax = [r12 class];
            rax = [rax _reuseKeyForSupplementaryViewOfKind:var_30 withReuseIdentifier:r15];
            rax = [rax retain];
    }
    else {
            rax = [r15 retain];
    }
    r14 = rax;
    rdx = (r13 == 0x0 ? 0x1 : 0x0) & 0xff;
    rbx = [[r12 _reuseDictionaryForCell:rdx] retain];
    r12 = [[rbx objectForKey:r14] retain];
    [rbx release];
    [r14 release];
    [r15 release];
    [var_30 release];
    rdi = r12;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, NSUInteger arg5) {
    r8 = arg4;
    rbx = arg5;
    var_D8 = r8;
    var_E0 = _cmd;
    r13 = self;
    r12 = [arg2 retain];
    r15 = [arg3 retain];
    if (rbx != 0x0) {
            rax = [r13 class];
            var_A0 = r12;
            var_B0 = r15;
            rax = [rax _reuseKeyForSupplementaryViewOfKind:r12 withReuseIdentifier:r15];
            rax = [rax retain];
    }
    else {
            var_A0 = r12;
            var_B0 = r15;
            rax = [r15 retain];
    }
    r15 = rax;
    r12 = r13;
    r14 = rbx;
    rbx = [[r12 _reuseDictionaryForCell:(r14 == 0x0 ? 0x1 : 0x0) & 0xff] retain];
    rdx = r15;
    var_A8 = [[rbx objectForKey:rdx] retain];
    rdi = r12->_transitionLayoutAttributes;
    r13 = r12;
    if (rdi != 0x0) {
            var_C8 = r14;
            var_D0 = rbx;
            var_B8 = [rdi retain];
            r12 = var_A0;
    }
    else {
            if (r14 != 0x0) {
                    rdi = r13->_collectionViewData;
                    var_C8 = r14;
                    r12 = var_A0;
                    if (r14 == 0x2) {
                            var_D0 = rbx;
                            rsi = @selector(layoutAttributesForDecorationViewOfKind:atIndexPath:);
                            rdx = var_B0;
                    }
                    else {
                            var_D0 = rbx;
                            rsi = @selector(layoutAttributesForSupplementaryElementOfKind:atIndexPath:);
                            rdx = r12;
                    }
                    var_B8 = [_objc_msgSend(rdi, rsi) retain];
            }
            else {
                    var_C8 = r14;
                    var_D0 = rbx;
                    var_B8 = 0x0;
                    r12 = var_A0;
                    if ((*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x2) == 0x0) {
                            var_C0 = r15;
                            r14 = [var_D8 retain];
                            if ((r13->_dataSourceToLayoutIndexPathMappingDict != 0x0) && ([r13 _isReordering] != 0x0)) {
                                    rbx = [[r13->_dataSourceToLayoutIndexPathMappingDict objectForKeyedSubscript:r14] retain];
                                    rdi = r14;
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    r15 = [rdi retain];
                                    rdi = r14;
                                    [rdi release];
                                    [rbx release];
                                    r14 = r15;
                            }
                            rdx = r14;
                            var_B8 = [[r13->_collectionViewData layoutAttributesForItemAtIndexPath:rdx] retain];
                            [r14 release];
                            r15 = var_C0;
                    }
            }
    }
    var_A0 = r12;
    if (([var_A8 count] == 0x0) || ((*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x2) != 0x0)) goto loc_979eec;

loc_979e8c:
    var_C0 = r15;
    r15 = objc_retainAutorelease([[var_A8 lastObject] retain]);
    [r15 prepareForReuse];
    rsi = @selector(removeLastObject);
    _objc_msgSend(var_A8, rsi);
    [r15 release];
    goto loc_97a5c2;

loc_97a5c2:
    if ((*(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0x2) == 0x0) {
            [r13 retain];
            var_70 = [var_B8 retain];
            rsi = @selector(_performWithoutAnimation:);
            rdx = __NSConcreteStackBlock;
            _objc_msgSend(@class(UIView), rsi);
            [var_70 release];
            [r13 release];
    }
    r14 = [r13->_layout retain];
    rbx = [r15 retain];
    if (((rbx != 0x0) && (r14 != 0x0)) && (!(BIT_TEST(*(rbx + *_OBJC_IVAR_$_UIView._viewFlags + 0x8), 0x32)))) {
            if ([r14 _wantsRightToLeftHorizontalMirroringIfNeeded] != 0x0) {
                    rdx = 0x1;
            }
            else {
                    rdx = 0x0;
            }
            [rbx _setHasMirrorTransform:rdx];
    }
    [rbx release];
    [r14 release];
    r12 = [rbx retain];
    goto loc_97a6f8;

loc_97a6f8:
    [var_B8 release];
    [var_A8 release];
    [var_D0 release];
    [var_C0 release];
    [var_B0 release];
    [var_A0 release];
    rdi = r12;
    rax = [rdi autorelease];
    return rax;

loc_979eec:
    var_C0 = r15;
    r12 = 0x0;
    rbx = var_C8;
    if (rbx == 0x2) goto loc_97a6f8;

loc_979f07:
    rcx = _OBJC_IVAR_$_UICollectionView._supplementaryViewNibDict;
    if (rbx == 0x0) {
            rcx = _OBJC_IVAR_$_UICollectionView._cellNibDict;
    }
    r12 = [*(r13 + *rcx) retain];
    r14 = r13;
    r15 = var_C0;
    rax = [r12 objectForKey:r15];
    rax = [rax retain];
    var_E8 = rax;
    if (rax != 0x0) {
            var_F8 = r12;
            rcx = _OBJC_IVAR_$_UICollectionView._supplementaryViewNibExternalObjectsTables;
            if (rbx == 0x0) {
                    rcx = _OBJC_IVAR_$_UICollectionView._cellNibExternalObjectsTables;
            }
            r12 = r14;
            rax = [*(r14 + *rcx) retain];
            var_108 = rax;
            rbx = [[rax objectForKey:r15] retain];
            rax = 0x0;
            if (rbx != 0x0) {
                    rax = [NSDictionary dictionaryWithObject:rbx forKey:@"UINibExternalObjects"];
                    rax = [rax retain];
            }
            var_118 = rax;
            var_110 = rbx;
            r15 = 0x0;
            rcx = rax;
            rax = [var_E8 instantiateWithOwner:0x0 options:rcx];
            rax = [rax retain];
            var_100 = rax;
            r13 = r12;
            if ([rax count] == 0x1) {
                    r15 = 0x0;
                    rbx = [[[var_100 objectAtIndex:0x0] retain] autorelease];
                    if (rbx != 0x0) {
                            r14 = _objc_msgSend;
                            rdx = [UICollectionReusableView class];
                            r15 = rbx;
                            if ([rbx isKindOfClass:rdx] == 0x0) {
                                    var_F0 = r15;
                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx] retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    r14 = [rdi retain];
                                    [rbx release];
                                    rbx = [[NSAssertionHandler currentHandler] retain];
                                    rdx = var_E0;
                                    rcx = r13;
                                    r8 = r14;
                                    [rbx handleFailureInMethod:rdx object:rcx file:r8 lineNumber:0x1360 description:@"invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a UICollectionReusableView instance", var_B0];
                                    rdi = r14;
                                    r14 = _objc_msgSend;
                                    r15 = var_F0;
                                    [rdi release];
                                    [rbx release];
                            }
                    }
                    else {
                            var_F0 = r15;
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r14 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            rdx = var_E0;
                            rcx = r13;
                            r8 = r14;
                            [rbx handleFailureInMethod:rdx object:rcx file:r8 lineNumber:0x1360 description:@"invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a UICollectionReusableView instance", var_B0];
                            rdi = r14;
                            r14 = _objc_msgSend;
                            r15 = var_F0;
                            [rdi release];
                            [rbx release];
                    }
            }
            else {
                    var_F0 = r15;
                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx] retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    r14 = [rdi retain];
                    [rbx release];
                    rbx = [[NSAssertionHandler currentHandler] retain];
                    rdx = var_E0;
                    rcx = r13;
                    r8 = r14;
                    [rbx handleFailureInMethod:rdx object:rcx file:r8 lineNumber:0x1360 description:@"invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a UICollectionReusableView instance", var_B0];
                    rdi = r14;
                    r14 = _objc_msgSend;
                    r15 = var_F0;
                    [rdi release];
                    [rbx release];
            }
            var_F0 = r15;
            rax = (r14)(r15, @selector(reuseIdentifier), rdx, rcx, r8);
            r15 = r14;
            r14 = [rax retain];
            if (((r15)(r14, @selector(length), rdx, rcx, r8) != 0x0) && ([r14 isEqualToString:var_B0] == 0x0)) {
                    rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    var_120 = [rdi retain];
                    [rbx release];
                    r12 = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    (r15)(r12, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_E0, r13, var_120, 0x1362, @"view reuse identifier in nib (%@) does not match the identifier used to register the nib (%@)", r14, var_B0);
                    [var_120 release];
                    [r12 release];
            }
            [r14 release];
            [var_100 release];
            [var_118 release];
            [var_110 release];
            [var_108 release];
            r12 = var_F0;
    }
    else {
            var_F8 = r12;
            rcx = _OBJC_IVAR_$_UICollectionView._supplementaryViewClassDict;
            if (rbx == 0x0) {
                    rcx = _OBJC_IVAR_$_UICollectionView._cellClassDict;
            }
            var_F0 = r14;
            r14 = [*(r14 + *rcx) retain];
            rdx = r15;
            r15 = objc_unsafeClaimAutoreleasedReturnValue([r14 objectForKey:rdx]);
            rbx = var_B8;
            if (rbx != 0x0) {
                    [var_50 frame];
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_40 = intrinsic_movapd(var_40, xmm0);
                    var_50 = intrinsic_movapd(var_50, xmm0);
            }
            [rbx size];
            var_40 = intrinsic_movsd(var_40, xmm0);
            var_38 = intrinsic_movsd(var_38, xmm1);
            rax = [r15 alloc];
            r15 = _objc_msgSend;
            r12 = [[rax initWithFrame:rdx, rcx] autorelease];
            [r14 release];
            r13 = var_F0;
    }
    if (r12 == 0x0) {
            rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            var_F0 = [rdi retain];
            [rbx release];
            r14 = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
            (r15)(r14, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_E0, r13, var_F0, 0x136b, @"could not dequeue a view of kind: %@ with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard", var_A0, var_B0);
            [var_F0 release];
            [r14 release];
    }
    rsi = @selector(_prepareViewForUse:withElementCategory:elementKind:reuseIdentifier:indexPath:applyDefaultAttributes:);
    rdx = r12;
    r14 = r12;
    _objc_msgSend(r13, rsi);
    if (var_C8 == 0x0) {
            rax = !r13->_collectionViewFlags;
            rcx = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
            rax = rax & 0x20000000 | rcx & 0x2;
            if (rax == 0x0) {
                    rbx = [r14 retain];
                    rsi = @selector(_templateLayoutCellForCellsWithReuseIdentifier:);
                    rdx = var_B0;
                    rax = _objc_msgSend(r13, rsi);
                    rax = [rax retain];
                    if (rax != 0x0) {
                            var_100 = rbx;
                            var_E0 = rax;
                            var_F0 = [(r15)(rbx, @selector(contentView), rdx) retain];
                            rbx = [(r15)(var_E0, @selector(contentView), rdx) retain];
                            (r15)(var_F0, @selector(_setTemplateLayoutView:), rbx);
                            [rbx release];
                            [var_F0 release];
                            rsi = @selector(_setLayoutEngineSuspended:);
                            rdx = 0x1;
                            rbx = var_100;
                            _objc_msgSend(rbx, rsi);
                            rax = var_E0;
                    }
                    [rax release];
                    [rbx release];
            }
    }
    [var_E8 release];
    [var_F8 release];
    r15 = r14;
    goto loc_97a5c2;
}

void ___88-[UICollectionView _dequeueReusableViewOfKind:withIdentifier:forIndexPath:viewCategory:]_block_invoke(int arg0) {
    rbx = arg0;
    [*(rbx + 0x20) _applyLayoutAttributes:*(rbx + 0x28) toView:*(rbx + 0x30)];
    if (*(int8_t *)(rbx + 0x40) != 0x0) {
            if ([*(rbx + 0x20)->_indexPathsForSelectedItems containsObject:*(rbx + 0x38)] != 0x0) {
                    [*(rbx + 0x30) _setSelected:0x1 animated:0x0];
            }
            if ([*(rbx + 0x20)->_indexPathsForHighlightedItems containsObject:*(rbx + 0x38)] != 0x0) {
                    rdi = *(rbx + 0x30);
                    [rdi _setHighlighted:0x1 animated:0x0];
            }
    }
    return;
}

void * -[UICollectionView dequeueReusableCellWithReuseIdentifier:forIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = arg3;
    r12 = _cmd;
    r15 = self;
    r13 = [arg2 retain];
    if ([r13 length] == 0x0) {
            r12 = [NSStringFromSelector(r12) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            [r12 release];
    }
    rbx = [[r15 _dequeueReusableViewOfKind:@"UICollectionElementKindCell" withIdentifier:r13 forIndexPath:r14 viewCategory:0x0] retain];
    [r13 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r15 = arg4;
    var_30 = _cmd;
    r13 = self;
    r12 = [arg2 retain];
    r14 = [arg3 retain];
    if ([r12 length] == 0x0) {
            var_38 = r13;
            r13 = r15;
            r15 = [NSStringFromSelector(var_30) retain];
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid element kind to -[UICollectionView %@]"];
            rdi = r15;
            r15 = r13;
            r13 = var_38;
            [rdi release];
    }
    if ([r14 length] == 0x0) {
            rbx = r13;
            r13 = [NSStringFromSelector(var_30) retain];
            r15 = r15;
            [NSException raise:*_NSInvalidArgumentException format:@"must pass a valid reuse identifier to -[UICollectionView %@]"];
            rdi = r13;
            r13 = rbx;
            [rdi release];
    }
    rbx = [[r13 _dequeueReusableViewOfKind:r12 withIdentifier:r14 forIndexPath:r15 viewCategory:0x1] retain];
    [r14 release];
    [r12 release];
    rdi = rbx;
    rax = [rdi autorelease];
    return rax;
}

void * -[UICollectionView _createTemplateLayoutCellForCellsWithIdentifier:](void * self, void * _cmd, void * arg2) {
    self->_collectionViewFlags = self->_collectionViewFlags;
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int32_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) | 0x2;
    rax = [self _dequeueReusableViewOfKind:@"UICollectionElementKindCell" withIdentifier:arg2 forIndexPath:0x0 viewCategory:0x0];
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xfd;
    return rax;
}



bool -[UICollectionView _isViewInReuseQueue:](void * self, void * _cmd, void * arg2) {
    r15 = self;
    r14 = [arg2 retain];
    r13 = [[r14 reuseIdentifier] retain];
    if (r13 != 0x0) {
            r12 = [[r15->_cellReuseQueues objectForKey:r13] retain];
            if (r12 != 0x0) {
                    r15 = [r12 containsObject:r14];
            }
            else {
                    r15 = 0x0;
            }
            [r12 release];
    }
    else {
            r15 = 0x0;
    }
    [r13 release];
    [r14 release];
    rax = r15;
    return rax;
}

void -[UICollectionView _reuseCell:](void * self, void * _cmd, void * arg2) {
    [self _reuseCell:arg2 notifyDidEndDisplaying:0x1];
    return;
}

void -[UICollectionView _reuseCell:notifyDidEndDisplaying:](void * self, void * _cmd, void * arg2, bool arg3) {
    var_104 = arg3;
    r12 = _cmd;
    r14 = self;
    var_30 = *___stack_chk_guard;
    r13 = [arg2 retain];
    if ([r13 isKindOfClass:[_UICollectionSnapshotView class]] == 0x0) goto loc_97ac22;

loc_97ac0c:
    NSLog(@"_reuseCell should not try to reuse %@", r13);
    goto loc_97b10b;

loc_97b10b:
    [r13 release];
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;

loc_97ac22:
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
            rax = [r13 _isInUpdateAnimation];
            if (rbx >= 0x70000) {
                    if (rax != 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            var_110 = r14;
                            r14 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:r12 object:var_110 file:r14 lineNumber:0x13d1 description:@"attempting to reuse a cell that's still in an update animation: %@"];
                            rdi = r14;
                            r14 = var_110;
                            [rdi release];
                            [rbx release];
                    }
            }
            else {
                    if (rax != 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __reuseCell:notifyDidEndDisplaying:.__s_category);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r15 = r14;
                                    r14 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                    *(rax + 0xfffffffffffffff4) = r13;
                                    _os_log_impl(0xffffffffff685267, *(rbx + 0x8), 0x10, "attempting to reuse a cell that's still in an update animation: %@", rax + 0xfffffffffffffff0, 0xc);
                                    r14 = r15;
                            }
                    }
            }
    }
    else {
            rbx = __UIApplicationLinkedOnOrAfter(0x70000);
            rax = [r13 _isInUpdateAnimation];
            if (rbx != 0x0) {
                    if (rax != 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            var_110 = r14;
                            r14 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:r12 object:var_110 file:r14 lineNumber:0x13d1 description:@"attempting to reuse a cell that's still in an update animation: %@"];
                            rdi = r14;
                            r14 = var_110;
                            [rdi release];
                            [rbx release];
                    }
            }
            else {
                    if (rax != 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __reuseCell:notifyDidEndDisplaying:.__s_category);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r15 = r14;
                                    r14 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                    *(rax + 0xfffffffffffffff4) = r13;
                                    _os_log_impl(0xffffffffff685267, *(rbx + 0x8), 0x10, "attempting to reuse a cell that's still in an update animation: %@", rax + 0xfffffffffffffff0, 0xc);
                                    r14 = r15;
                            }
                    }
            }
    }
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rbx = [r14->_reorderedItems retain];
    var_100 = rbx;
    r15 = [rbx countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (r15 == 0x0) goto loc_97af25;

loc_97ae20:
    var_110 = r14;
    var_F8 = r13;
    r13 = *var_E0;
    goto loc_97ae46;

loc_97ae46:
    rbx = 0x0;
    goto loc_97ae4f;

loc_97ae4f:
    if (*var_E0 != r13) {
            objc_enumerationMutation(var_100);
    }
    r12 = [[*(var_E8 + rbx * 0x8) cell] retain];
    [r12 release];
    if (r12 == var_F8) goto loc_97af02;

loc_97ae98:
    rbx = rbx + 0x1;
    if (rbx < r15) goto loc_97ae4f;

loc_97aea0:
    rbx = var_100;
    r15 = [rbx countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (r15 != 0x0) goto loc_97ae46;

loc_97aed7:
    [rbx release];
    r13 = var_F8;
    r14 = var_110;
    if (r12 != r13) {
            if (((r14->_firstResponderView != r13) && (r14->_focusedCell != r13)) && ([r13 _isFocusedOrAncestorOfFocusedView] == 0x0)) {
                    r12 = [[r13 reuseIdentifier] retain];
                    var_110 = r14;
                    r14 = [[r14->_cellReuseQueues objectForKey:r12] retain];
                    if ((r12 != 0x0) && (r14 == 0x0)) {
                            var_F8 = r13;
                            r13 = [[NSMutableArray alloc] init];
                            [r14 release];
                            [var_110->_cellReuseQueues setValue:r13 forKey:r12];
                            r14 = r13;
                            r13 = var_F8;
                    }
                    __reuseViewWithReuseQueue(r13, r14);
                    if ((var_104 != 0x0) && ((var_110->_collectionViewFlags & 0x4) != 0x0)) {
                            var_100 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + var_110);
                            var_F8 = r13;
                            r13 = [[r13 _layoutAttributes] retain];
                            r15 = [[r13 indexPath] retain];
                            [var_100 collectionView:var_110 didEndDisplayingCell:var_F8 forItemAtIndexPath:r15, rbx];
                            [r15 release];
                            rdi = r13;
                            r13 = var_F8;
                            [rdi release];
                            [var_100 release];
                    }
                    [r14 release];
                    [r12 release];
            }
    }
    goto loc_97b10b;

loc_97af02:
    [var_100 release];
    r13 = var_F8;
    goto loc_97b10b;

loc_97af25:
    [rbx release];
    if (((r14->_firstResponderView != r13) && (r14->_focusedCell != r13)) && ([r13 _isFocusedOrAncestorOfFocusedView] == 0x0)) {
            r12 = [[r13 reuseIdentifier] retain];
            var_110 = r14;
            r14 = [[r14->_cellReuseQueues objectForKey:r12] retain];
            if ((r12 != 0x0) && (r14 == 0x0)) {
                    var_F8 = r13;
                    r13 = [[NSMutableArray alloc] init];
                    [r14 release];
                    [var_110->_cellReuseQueues setValue:r13 forKey:r12];
                    r14 = r13;
                    r13 = var_F8;
            }
            __reuseViewWithReuseQueue(r13, r14);
            if ((var_104 != 0x0) && ((var_110->_collectionViewFlags & 0x4) != 0x0)) {
                    var_100 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + var_110);
                    var_F8 = r13;
                    r13 = [[r13 _layoutAttributes] retain];
                    r15 = [[r13 indexPath] retain];
                    [var_100 collectionView:var_110 didEndDisplayingCell:var_F8 forItemAtIndexPath:r15, rbx];
                    [r15 release];
                    rdi = r13;
                    r13 = var_F8;
                    [rdi release];
                    [var_100 release];
            }
            [r14 release];
            [r12 release];
    }
    goto loc_97b10b;
}

void -[UICollectionView _reuseSupplementaryView:](void * self, void * _cmd, void * arg2) {
    r12 = _cmd;
    var_38 = self;
    var_30 = *___stack_chk_guard;
    r15 = [arg2 retain];
    if ([r15 isKindOfClass:[_UICollectionSnapshotView class]] != 0x0) {
            NSLog(@"_reuseSupplementaryView should not try to reuse %@", r15);
    }
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
            rax = [r15 _isInUpdateAnimation];
            if (rbx >= 0x70000) {
                    var_40 = r12;
                    if (rax != 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r13 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_40 object:var_38 file:r13 lineNumber:0x13f8 description:@"attempting to reuse a view that's still in an update animation: %@", r15];
                            rdi = r13;
                            [rdi release];
                            [rbx release];
                    }
            }
            else {
                    if (rax != 0x0) {
                            r12 = ___UILogGetCategoryCachedImpl("Assert", __reuseSupplementaryView:.__s_category);
                            if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                    *(rax + 0xfffffffffffffff4) = r15;
                                    _os_log_impl(0xffffffffff684b59, *(r12 + 0x8), 0x10, "attempting to reuse a view that's still in an update animation: %@", rax + 0xfffffffffffffff0, 0xc);
                            }
                    }
            }
    }
    else {
            rbx = __UIApplicationLinkedOnOrAfter(0x70000);
            rax = [r15 _isInUpdateAnimation];
            if (rbx != 0x0) {
                    var_40 = r12;
                    if (rax != 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r13 = [rdi retain];
                            [rbx release];
                            rbx = [[NSAssertionHandler currentHandler] retain];
                            [rbx handleFailureInMethod:var_40 object:var_38 file:r13 lineNumber:0x13f8 description:@"attempting to reuse a view that's still in an update animation: %@", r15];
                            rdi = r13;
                            [rdi release];
                            [rbx release];
                    }
            }
            else {
                    if (rax != 0x0) {
                            r12 = ___UILogGetCategoryCachedImpl("Assert", __reuseSupplementaryView:.__s_category);
                            if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                    *(rax + 0xfffffffffffffff4) = r15;
                                    _os_log_impl(0xffffffffff684b59, *(r12 + 0x8), 0x10, "attempting to reuse a view that's still in an update animation: %@", rax + 0xfffffffffffffff0, 0xc);
                            }
                    }
            }
    }
    rbx = var_38;
    if (((rbx->_firstResponderView != r15) && (rbx->_focusedCell != r15)) && ([r15 _isFocusedOrAncestorOfFocusedView] == 0x0)) {
            r12 = [rbx class];
            rax = [r15 _layoutAttributes];
            rax = [rax retain];
            var_48 = rax;
            rbx = [[rax _elementKind] retain];
            rax = [r15 reuseIdentifier];
            rax = [rax retain];
            r12 = [[r12 _reuseKeyForSupplementaryViewOfKind:rbx withReuseIdentifier:rax] retain];
            var_40 = r12;
            [rax release];
            [rbx release];
            [var_48 release];
            r13 = var_38;
            rbx = [[r13->_supplementaryViewReuseQueues objectForKey:r12, *_OBJC_IVAR_$_UICollectionView._supplementaryViewReuseQueues] retain];
            if ((r12 != 0x0) && (rbx == 0x0)) {
                    rdi = rbx;
                    rbx = [[NSMutableArray alloc] init];
                    [rdi release];
                    [r13->_supplementaryViewReuseQueues setObject:rbx forKey:var_40];
            }
            __reuseViewWithReuseQueue(r15, rbx);
            r12 = r13;
            if ((r12->_collectionViewFlags & 0x8) != 0x0) {
                    var_50 = rbx;
                    rbx = [[r15 _layoutAttributes] retain];
                    var_48 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r12);
                    var_60 = [[rbx _elementKind] retain];
                    r13 = [[rbx indexPath] retain];
                    [var_48 collectionView:r12 didEndDisplayingSupplementaryView:r15 forElementOfKind:var_60 atIndexPath:r13];
                    [r13 release];
                    [var_60 release];
                    [var_48 release];
                    [rbx release];
                    rbx = var_50;
            }
            rdi = rbx;
            [rdi release];
            [var_40 release];
    }
    [r15 release];
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void * -[UICollectionView _currentUpdate](void * self, void * _cmd) {
    rax = objc_retainAutoreleaseReturnValue(self->_currentUpdate);
    return rax;
}

void * -[UICollectionView _arrayForUpdateAction:](void * self, void * _cmd, int arg2) {
    rax = arg2;
    if (arg2 <= 0x3) {
            rax = sign_extend_64(*(int32_t *)(0x97b7dc + rax * 0x4));
            rax = (rax + 0x97b7dc)();
    }
    else {
            rax = [0x0 autorelease];
    }
    return rax;
}

void -[UICollectionView _updateSections:updateAction:](void * self, void * _cmd, void * arg2, int arg3) {
    r12 = arg3;
    r15 = self;
    var_40 = [arg2 retain];
    if ([r15 _visible] != 0x0) {
            [r15 _reloadDataIfNeeded];
            rcx = 0x200000000000000 & r15->_collectionViewFlags;
            var_80 = rcx;
            if (rcx == 0x0) {
                    [r15 _setupCellAnimations];
            }
            var_88 = r15;
            rdx = r12;
            var_48 = [[r15 _arrayForUpdateAction:rdx] retain];
            r15 = [var_40 firstIndex];
            if (r15 != 0x7fffffffffffffff) {
                    var_58 = r12;
                    do {
                            r12 = [UICollectionViewUpdateItem alloc];
                            rbx = [[NSIndexPath indexPathForRow:0x7fffffffffffffff inSection:r15] retain];
                            rcx = rbx;
                            var_38 = [r12 initWithAction:var_58 forIndexPath:rcx];
                            [rbx release];
                            [var_48 addObject:var_38, rcx];
                            rdx = r15;
                            r15 = [var_40 indexGreaterThanIndex:rdx, rcx];
                            [var_38 release];
                    } while (r15 != 0x7fffffffffffffff);
            }
            if (var_80 == 0x0) {
                    [var_88 _endItemAnimationsWithInvalidationContext:0x0];
            }
            [var_48 release];
    }
    else {
            *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r15->_collectionViewFlags = 0x8000000000000 | r15->_collectionViewFlags;
    }
    [var_40 release];
    return;
}

void -[UICollectionView insertSections:](void * self, void * _cmd, void * arg2) {
    [self _updateSections:arg2 updateAction:0x0];
    return;
}

void -[UICollectionView deleteSections:](void * self, void * _cmd, void * arg2) {
    [self _updateSections:arg2 updateAction:0x1];
    return;
}

void -[UICollectionView reloadSections:](void * self, void * _cmd, void * arg2) {
    [self _updateSections:arg2 updateAction:0x2];
    return;
}

void -[UICollectionView moveSection:toSection:](void * self, void * _cmd, NSInteger arg2, NSInteger arg3) {
    var_48 = [[self _arrayForUpdateAction:0x3] retain];
    var_40 = [UICollectionViewUpdateItem alloc];
    r15 = [[NSIndexPath indexPathForRow:0x7fffffffffffffff inSection:arg2] retain];
    rbx = [[NSIndexPath indexPathForRow:0x7fffffffffffffff inSection:arg3] retain];
    r14 = [var_40 initWithInitialIndexPath:r15 finalIndexPath:rbx updateAction:0x3];
    r12 = self;
    [rbx release];
    [r15 release];
    rsi = @selector(addObject:);
    r15 = var_48;
    rdx = r14;
    _objc_msgSend(var_48, rsi);
    if (!(BIT_TEST(r12->_collectionViewFlags, 0x39))) {
            [r12 _setupCellAnimations];
            rsi = @selector(_endItemAnimationsWithInvalidationContext:);
            rdx = 0x0;
            _objc_msgSend(r12, rsi, rdx, rcx, 0x3);
    }
    [r14 release];
    rdi = r15;
    [rdi release];
    return;
}

void -[UICollectionView _updateRowsAtIndexPaths:updateAction:](void * self, void * _cmd, void * arg2, int arg3) {
    r15 = arg3;
    rbx = self;
    r14 = [arg2 retain];
    var_30 = r14;
    if ([rbx _visible] != 0x0) {
            [rbx _reloadDataIfNeeded];
            rcx = 0x200000000000000 & rbx->_collectionViewFlags;
            var_70 = rcx;
            if (rcx == 0x0) {
                    [rbx _setupCellAnimations];
            }
            var_78 = rbx;
            var_38 = [[rbx _arrayForUpdateAction:r15] retain];
            rax = [r14 count];
            var_40 = rax;
            if (rax != 0x0) {
                    var_58 = r15;
                    rbx = 0x0;
                    do {
                            r14 = [[r14 objectAtIndex:rbx, rcx] retain];
                            rax = [UICollectionViewUpdateItem alloc];
                            rcx = r14;
                            r15 = [rax initWithAction:var_58 forIndexPath:rcx];
                            [var_38 addObject:r15, rcx];
                            [r15 release];
                            rdi = r14;
                            r14 = var_30;
                            [rdi release];
                            rbx = rbx + 0x1;
                    } while (var_40 != rbx);
            }
            rbx = var_38;
            if (var_70 == 0x0) {
                    [var_78 _endItemAnimationsWithInvalidationContext:0x0];
            }
            [rbx release];
    }
    else {
            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            rbx->_collectionViewFlags = 0x8000000000000 | rbx->_collectionViewFlags;
    }
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView insertItemsAtIndexPaths:](void * self, void * _cmd, void * arg2) {
    [self _updateRowsAtIndexPaths:arg2 updateAction:0x0];
    return;
}

void -[UICollectionView deleteItemsAtIndexPaths:](void * self, void * _cmd, void * arg2) {
    [self _updateRowsAtIndexPaths:arg2 updateAction:0x1];
    return;
}

void -[UICollectionView reloadItemsAtIndexPaths:](void * self, void * _cmd, void * arg2) {
    [self _updateRowsAtIndexPaths:arg2 updateAction:0x2];
    return;
}

void -[UICollectionView moveItemAtIndexPath:toIndexPath:](void * self, void * _cmd, void * arg2, void * arg3) {
    r13 = self;
    r14 = [[self _arrayForUpdateAction:0x3] retain];
    rcx = arg3;
    rbx = [[UICollectionViewUpdateItem alloc] initWithInitialIndexPath:arg2 finalIndexPath:rcx updateAction:0x3];
    rdx = rbx;
    [r14 addObject:rdx];
    if (!(BIT_TEST(r13->_collectionViewFlags, 0x39))) {
            [r13 _setupCellAnimations];
            [r13 _endItemAnimationsWithInvalidationContext:0x0, rcx, 0x3];
    }
    [rbx release];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _setupCellAnimations](void * self, void * _cmd) {
    [self _updateVisibleCellsNow:0x0];
    [self->_collectionViewData _prepareToLoadData];
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    self->_collectionViewFlags = 0x200000000000000 | self->_collectionViewFlags;
    [self _suspendReloads];
    return;
}

void -[UICollectionView _endItemAnimationsWithInvalidationContext:](void * self, void * _cmd, void * arg2) {
    [self _endItemAnimationsWithInvalidationContext:arg2 tentativelyForReordering:0x0];
    return;
}
void -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:](void * self, void * _cmd, void * arg2, bool arg3) {
    [self _endItemAnimationsWithInvalidationContext:arg2 tentativelyForReordering:arg3 & 0xff animator:0x0];
    return;
}

void -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:](void * self, void * _cmd, void * arg2, bool arg3, void * arg4) {
    var_5B4 = arg3;
    var_4E0 = _cmd;
    rbx = self;
    var_5A8 = [arg2 retain];
    var_5B0 = [arg4 retain];
    [rbx _resetPrefetchState];
    rcx = rbx->_updateCount + 0x1;
    rbx->_updateCount = rcx;
    var_238 = *_CGRectUnion;
    var_240 = *_CGRectStandardize;
    var_248 = *_CGRectOffset;
    var_250 = *_CGRectNull;
    if (rbx->_collectionViewData == 0x0) goto loc_9804c6;

loc_97bf74:
    r14 = rbx;
    rbx = [[rbx _screen] retain];
    r13 = [[rbx focusedView] retain];
    [rbx release];
    r15 = r14;
    if ([r14 isAncestorOfItem:r13] != 0x0) {
            if (r13 != 0x0) {
                    [var_270 bounds];
            }
            else {
                    var_260 = intrinsic_movaps(var_260, 0x0);
                    var_270 = intrinsic_movaps(var_270, 0x0);
            }
            r14 = [[r15 window] retain];
            if (r13 != 0x0) {
                    rbx = var_290;
                    [rbx convertRect:r13 toView:r14, r8];
                    rsp = (rsp - 0x20) + 0x20;
            }
            else {
                    rbx = var_290;
                    intrinsic_movaps(var_280, 0x0);
                    intrinsic_movaps(var_290, 0x0);
            }
            var_238 = *(rbx + 0x18);
            var_240 = *(rbx + 0x10);
            rcx = *(rbx + 0x8);
            var_248 = rcx;
            var_250 = *rbx;
            [r14 release];
    }
    var_5D0 = r13;
    var_4D8 = r15;
    r13 = r15;
    rax = [r13->_collectionViewData retain];
    var_598 = rax;
    [rax setLayoutLocked:0x1, rcx];
    r13->_collectionViewData = [[UICollectionViewData alloc] initWithCollectionView:r13 layout:r13->_layout];
    [r13->_collectionViewData release];
    var_5A0 = [[NSMutableArray alloc] init];
    rbx = [[r13 _arrayForUpdateAction:0x1, r13->_layout] retain];
    var_578 = [[rbx sortedArrayUsingSelector:@selector(inverseCompareIndexPaths:), r13->_layout] retain];
    [rbx release];
    rbx = [[r13 _arrayForUpdateAction:0x0, r13->_layout] retain];
    var_580 = [[rbx sortedArrayUsingSelector:@selector(compareIndexPaths:), r13->_layout] retain];
    [rbx release];
    rbx = [[r13->_reloadItems sortedArrayUsingSelector:@selector(compareIndexPaths:), r13->_layout] retain];
    var_458 = [rbx mutableCopy];
    [rbx release];
    rbx = [[r13->_moveItems sortedArrayUsingSelector:@selector(compareIndexPaths:), r13->_layout] retain];
    var_528 = [rbx mutableCopy];
    rdi = rbx;
    [rdi release];
    r13->_originalDeleteItems = [var_578 copy];
    [r13->_originalDeleteItems release];
    rdi = r13->_originalInsertItems;
    r13->_originalInsertItems = [var_580 copy];
    r13 = _objc_msgSend;
    [rdi release];
    var_5C0 = [[NSMutableArray alloc] init];
    var_5C8 = [[NSMutableArray alloc] init];
    intrinsic_movaps(var_2A0, 0x0);
    intrinsic_movaps(var_2B0, 0x0);
    var_2C0 = intrinsic_movaps(var_2C0, 0x0);
    var_2D0 = intrinsic_movaps(var_2D0, 0x0);
    rax = [var_458 retain];
    var_590 = rax;
    rcx = var_B0;
    rax = [rax countByEnumeratingWithState:var_2D0 objects:rcx count:0x10];
    var_530 = rax;
    if (rax != 0x0) {
            var_588 = *var_2C0;
            do {
                    rdx = 0x0;
                    do {
                            if (*var_2C0 != var_588) {
                                    objc_enumerationMutation(var_590);
                                    rdx = rdx;
                            }
                            var_520 = rdx;
                            var_470 = *(var_2C8 + rdx * 0x8);
                            rbx = objc_unsafeClaimAutoreleasedReturnValue((r13)(*(var_2C8 + rdx * 0x8), @selector(_indexPath), rdx));
                            var_478 = rbx;
                            r14 = (r13)(rbx, @selector(section), rdx);
                            var_4F8 = r14;
                            rbx = (r13)(rbx, @selector(item), rdx);
                            var_500 = rbx;
                            var_2E0 = intrinsic_movaps(var_2E0, 0x0);
                            var_2F0 = intrinsic_movaps(var_2F0, 0x0);
                            var_300 = intrinsic_movaps(var_300, 0x0);
                            var_310 = intrinsic_movaps(var_310, 0x0);
                            rax = [var_578 retain];
                            var_4B0 = rax;
                            rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_310, var_130, 0x10);
                            var_488 = rax;
                            var_4B8 = rbx;
                            var_460 = r14;
                            if (rax != 0x0) {
                                    var_4A0 = *var_300;
                                    var_4B8 = var_500;
                                    var_460 = var_4F8;
                                    do {
                                            r14 = @selector(_isSectionOperation);
                                            var_4A8 = r14;
                                            rbx = 0x0;
                                            do {
                                                    if (*var_300 != var_4A0) {
                                                            objc_enumerationMutation(var_4B0);
                                                    }
                                                    r13 = *(var_308 + rbx * 0x8);
                                                    var_468 = rbx;
                                                    var_458 = objc_unsafeClaimAutoreleasedReturnValue([r13 _indexPath]);
                                                    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                                                            rbx = *(int32_t *)__UIApplicationLinkedOnVersion;
                                                            rax = [var_458 isEqual:var_478];
                                                            if (rbx >= 0x70000) {
                                                                    if (rax != 0x0) {
                                                                            r14 = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                                            rdi = @"<Unknown File>";
                                                                            if (r14 != 0x0) {
                                                                                    rdi = r14;
                                                                            }
                                                                            r15 = [rdi retain];
                                                                            [r14 release];
                                                                            r14 = [[NSAssertionHandler currentHandler] retain];
                                                                            [r14 handleFailureInMethod:var_4E0 object:var_4D8 file:r15 lineNumber:0x14e2 description:@"attempt to delete and reload the same index path (%@)", var_458];
                                                                            rsp = (rsp - 0x10) + 0x10;
                                                                            rdi = r14;
                                                                            r14 = var_4A8;
                                                                            [rdi release];
                                                                            [r15 release];
                                                                    }
                                                            }
                                                            else {
                                                                    if (rax != 0x0) {
                                                                            rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category);
                                                                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                                                    r14 = rsp;
                                                                                    rax = rsp;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                                                                    *(rax + 0xfffffffffffffff4) = var_458;
                                                                                    _os_log_impl(0xffffffffff683811, *(rbx + 0x8), 0x10, "attempt to delete and reload the same index path (%@)", rax + 0xfffffffffffffff0, 0xc);
                                                                                    rsp = r14;
                                                                                    r14 = var_4A8;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    else {
                                                            rbx = __UIApplicationLinkedOnOrAfter(0x70000);
                                                            rax = [var_458 isEqual:var_478];
                                                            if (rbx != 0x0) {
                                                                    if (rax != 0x0) {
                                                                            r14 = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                                            rdi = @"<Unknown File>";
                                                                            if (r14 != 0x0) {
                                                                                    rdi = r14;
                                                                            }
                                                                            r15 = [rdi retain];
                                                                            [r14 release];
                                                                            r14 = [[NSAssertionHandler currentHandler] retain];
                                                                            [r14 handleFailureInMethod:var_4E0 object:var_4D8 file:r15 lineNumber:0x14e2 description:@"attempt to delete and reload the same index path (%@)", var_458];
                                                                            rsp = (rsp - 0x10) + 0x10;
                                                                            rdi = r14;
                                                                            r14 = var_4A8;
                                                                            [rdi release];
                                                                            [r15 release];
                                                                    }
                                                            }
                                                            else {
                                                                    if (rax != 0x0) {
                                                                            rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category);
                                                                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                                                    r14 = rsp;
                                                                                    rax = rsp;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x2;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x40;
                                                                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                                                                    *(rax + 0xfffffffffffffff4) = var_458;
                                                                                    _os_log_impl(0xffffffffff683811, *(rbx + 0x8), 0x10, "attempt to delete and reload the same index path (%@)", rax + 0xfffffffffffffff0, 0xc);
                                                                                    rsp = r14;
                                                                                    r14 = var_4A8;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    if (_objc_msgSend(r13, r14) != 0x0) {
                                                            r14 = var_4A8;
                                                            if ([var_458 section] != [var_478 section]) {
                                                                    if (_objc_msgSend(r13, r14) != 0x0) {
                                                                            var_460 = var_460 - (([var_458 section] <= var_460 ? 0x1 : 0x0) & 0xff);
                                                                    }
                                                                    if (((_objc_msgSend(var_470, r14) == 0x0) && (_objc_msgSend(r13, r14) == 0x0)) && ([var_458 section] == var_460)) {
                                                                            var_4B8 = var_4B8 - (([var_458 item] <= var_4B8 ? 0x1 : 0x0) & 0xff);
                                                                    }
                                                            }
                                                    }
                                                    else {
                                                            if (_objc_msgSend(r13, r14) != 0x0) {
                                                                    var_460 = var_460 - (([var_458 section] <= var_460 ? 0x1 : 0x0) & 0xff);
                                                            }
                                                            if (((_objc_msgSend(var_470, r14) == 0x0) && (_objc_msgSend(r13, r14) == 0x0)) && ([var_458 section] == var_460)) {
                                                                    var_4B8 = var_4B8 - (([var_458 item] <= var_4B8 ? 0x1 : 0x0) & 0xff);
                                                            }
                                                    }
                                                    rbx = var_468 + 0x1;
                                            } while (rbx < var_488);
                                            rax = [var_4B0 countByEnumeratingWithState:var_310 objects:var_130 count:0x10];
                                            var_488 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_4B0 release];
                            var_320 = intrinsic_movaps(var_320, 0x0);
                            var_330 = intrinsic_movaps(var_330, 0x0);
                            var_340 = intrinsic_movaps(var_340, 0x0);
                            var_350 = intrinsic_movaps(var_350, 0x0);
                            rax = [var_580 retain];
                            var_488 = rax;
                            rax = [rax countByEnumeratingWithState:var_350 objects:var_1B0 count:0x10];
                            var_458 = rax;
                            if (rax != 0x0) {
                                    var_478 = *var_340;
                                    do {
                                            r13 = 0x0;
                                            do {
                                                    if (*var_340 != var_478) {
                                                            objc_enumerationMutation(var_488);
                                                    }
                                                    r12 = *(var_348 + r13 * 0x8);
                                                    r14 = objc_unsafeClaimAutoreleasedReturnValue([r12 _indexPath]);
                                                    if ([r12 _isSectionOperation] != 0x0) {
                                                            var_460 = var_460 + (([r14 section] <= var_460 ? 0x1 : 0x0) & 0xff);
                                                    }
                                                    if ((([var_470 _isSectionOperation] == 0x0) && ([r12 _isSectionOperation] == 0x0)) && ([r14 section] == var_460)) {
                                                            var_4B8 = var_4B8 + (([r14 item] <= var_4B8 ? 0x1 : 0x0) & 0xff);
                                                    }
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_458);
                                            rax = [var_488 countByEnumeratingWithState:var_350 objects:var_1B0 count:0x10];
                                            var_458 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_488 release];
                            r12 = [UICollectionViewUpdateItem alloc];
                            r14 = [[NSIndexPath indexPathForRow:var_500 inSection:var_4F8] retain];
                            rbx = [r12 initWithAction:0x1 forIndexPath:r14];
                            var_458 = rbx;
                            [r14 release];
                            [var_4D8->_deleteItems addObject:rbx];
                            r15 = [UICollectionViewUpdateItem alloc];
                            r13 = _objc_msgSend;
                            rbx = [[NSIndexPath indexPathForRow:var_4B8 inSection:var_460] retain];
                            r15 = [r15 initWithAction:0x0 forIndexPath:rbx];
                            [rbx release];
                            rbx = [[r15 _indexPath] retain];
                            [var_470 _setNewIndexPath:rbx];
                            rdi = rbx;
                            [rdi release];
                            [var_4D8->_insertItems addObject:r15];
                            [r15 release];
                            [var_458 release];
                            rdx = var_520 + 0x1;
                    } while (rdx < var_530);
                    rcx = var_B0;
                    rax = [var_590 countByEnumeratingWithState:var_2D0 objects:rcx count:0x10];
                    var_530 = rax;
            } while (rax != 0x0);
    }
    r8 = 0x10;
    [var_590 release];
    r15 = [(r13)(var_4D8->_deleteItems, @selector(sortedArrayUsingSelector:), @selector(inverseCompareIndexPaths:), rcx, r8) retain];
    var_4E8 = (r13)(r15, @selector(mutableCopy), @selector(inverseCompareIndexPaths:), rcx, r8);
    [var_578 release];
    [r15 release];
    r13 = r13;
    r14 = [(r13)(var_4D8->_insertItems, @selector(sortedArrayUsingSelector:), @selector(compareIndexPaths:), rcx, r8) retain];
    var_550 = (r13)(r14, @selector(mutableCopy), @selector(compareIndexPaths:), rcx, r8);
    [var_580 release];
    rdi = r14;
    r14 = var_4E8;
    [rdi release];
    if ((r13)(r14, @selector(count), @selector(compareIndexPaths:), rcx, r8) != 0x0) {
            r15 = @selector(count);
            var_4F0 = r15;
            r12 = 0x0;
            rbx = 0x0;
            do {
                    var_4C0 = rbx;
                    rdx = r12;
                    rax = (r13)(r14, @selector(objectAtIndexedSubscript:), rdx);
                    rax = [rax retain];
                    var_4B8 = rax;
                    r14 = objc_unsafeClaimAutoreleasedReturnValue((r13)(rax, @selector(_indexPath)));
                    var_460 = r14;
                    var_490 = (r13)(r14, @selector(section));
                    rbx = var_528;
                    rax = (r13)(rbx, r15);
                    r15 = r13;
                    if (rax != 0x0) {
                            r13 = 0x0;
                            do {
                                    r12 = [(r15)(rbx, @selector(objectAtIndexedSubscript:), r13) retain];
                                    rbx = [(r15)(r12, @selector(_indexPath)) retain];
                                    rdx = r14;
                                    r14 = (r15)(rbx, @selector(isEqual:), rdx);
                                    [rbx release];
                                    if (r14 != 0x0) {
                                            var_458 = r12;
                                            var_498 = (r15)(r12, @selector(_isSectionOperation), rdx);
                                            rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                            rdi = @"<Unknown File>";
                                            if (rbx != 0x0) {
                                                    rdi = rbx;
                                            }
                                            r12 = [rdi retain];
                                            [rbx release];
                                            r14 = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                            if (var_498 != 0x0) {
                                                    rsp = rsp - 0x10;
                                                    stack[1857] = @"attempt to perform a delete and a move from the same section (%ld)";
                                                    r9 = 0x150f;
                                            }
                                            else {
                                                    rsp = rsp - 0x10;
                                                    stack[1857] = @"attempt to perform a delete and a move from the same index path (%@)";
                                                    r9 = 0x1512;
                                            }
                                            rdx = var_4E0;
                                            rcx = var_4D8;
                                            r8 = r12;
                                            [r14 handleFailureInMethod:rdx object:rcx file:r8 lineNumber:r9 description:stack[1857]];
                                            rsp = rsp + 0x10;
                                            [r14 release];
                                            [r12 release];
                                            rbx = var_528;
                                    }
                                    else {
                                            var_458 = r12;
                                            rbx = var_528;
                                            if ([var_4B8 _isSectionOperation] != 0x0) {
                                                    r12 = [(r15)(var_458, @selector(_indexPath)) retain];
                                                    r14 = (r15)(r12, @selector(section));
                                                    [r12 release];
                                                    if (var_490 == r14) {
                                                            rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                                            rdi = @"<Unknown File>";
                                                            if (rbx != 0x0) {
                                                                    rdi = rbx;
                                                            }
                                                            r12 = [rdi retain];
                                                            [rbx release];
                                                            rbx = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                                            rdx = var_4E0;
                                                            rcx = var_4D8;
                                                            r8 = r12;
                                                            (r15)(rbx, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x1516, @"cannot move an item from a deleted section (%ld)", var_490);
                                                            rsp = (rsp - 0x10) + 0x10;
                                                            rdi = rbx;
                                                            rbx = var_528;
                                                            [rdi release];
                                                            [r12 release];
                                                    }
                                            }
                                    }
                                    r13 = r13 + 0x1;
                                    [var_458 release];
                                    r14 = var_460;
                            } while (r13 < [rbx count]);
                    }
                    r13 = r15;
                    r12 = (r13)(var_4B8, @selector(_isSectionOperation), rdx);
                    r15 = var_598;
                    rax = (r13)(r15, @selector(numberOfSections), rdx);
                    if (r12 != 0x0) {
                            var_528 = rbx;
                            if (var_490 >= rax) {
                                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    r14 = [rdi retain];
                                    rdi = rbx;
                                    [rdi release];
                                    r12 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rcx = var_4D8;
                                    r8 = r14;
                                    (r13)(r12, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x151c, @"attempt to delete section %ld, but there are only %ld sections before the update", var_490, (r13)(r15, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                                    rsp = (rsp - 0x20) + 0x20;
                                    [r12 release];
                                    [r14 release];
                            }
                            r14 = var_4E8;
                            if (_objc_msgSend(r14, var_4F0) != 0x0) {
                                    r12 = 0x0;
                                    r15 = 0x0;
                                    do {
                                            var_458 = @selector(objectAtIndexedSubscript:);
                                            rdx = r12;
                                            rbx = r13;
                                            r13 = [(r13)(r14, var_458, rdx) retain];
                                            if ((rbx)(r13, @selector(_isSectionOperation)) == 0x0) {
                                                    r14 = [(rbx)(r13, @selector(_indexPath), rdx) retain];
                                                    var_470 = (rbx)(r14, @selector(section), rdx);
                                                    rdi = r14;
                                                    r14 = var_4E8;
                                                    [rdi release];
                                                    if (var_470 == var_490) {
                                                            [r14 removeObjectAtIndex:r12];
                                                            rcx = var_4C0 - ((r15 < var_4C0 ? 0x1 : 0x0) & 0xff);
                                                            var_4C0 = rcx;
                                                    }
                                                    else {
                                                            r15 = r15 + 0x1;
                                                    }
                                            }
                                            else {
                                                    r15 = r15 + 0x1;
                                            }
                                            [r13 release];
                                            r12 = sign_extend_64(r15);
                                            r13 = rbx;
                                    } while (r12 < [r14 count]);
                            }
                    }
                    else {
                            var_528 = rbx;
                            if (var_490 >= rax) {
                                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_458 = [rdi retain];
                                    [rbx release];
                                    r15 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    stack[1856] = (r13)(r14, @selector(item), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                                    r14 = r14;
                                    rdx = var_4E0;
                                    rcx = var_4D8;
                                    r8 = var_458;
                                    (r13)(r15, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x152d, @"attempt to delete item %ld from section %ld, but there are only %ld sections before the update", stack[1856], var_490, (r13)(var_598, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                                    rsp = (rsp - 0x20) + 0x20;
                                    rdi = r15;
                                    r15 = var_598;
                                    [rdi release];
                                    [var_458 release];
                            }
                            var_460 = r14;
                            r12 = @selector(numberOfItemsInSection:);
                            if ((r13)(r14, @selector(item), rdx, rcx, r8) >= (r13)(r15, r12, (r13)(r14, @selector(section), rdx, rcx, r8), rcx, r8)) {
                                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_458 = [rdi retain];
                                    rdi = rbx;
                                    [rdi release];
                                    var_468 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rcx = var_4D8;
                                    r8 = var_458;
                                    (r13)(var_468, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x152e, @"attempt to delete item %ld from section %ld which only contains %ld items before the update", (r13)(var_460, @selector(item), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"), var_490, (r13)(r15, r12, var_490));
                                    rsp = (rsp - 0x20) + 0x20;
                                    [var_468 release];
                                    [var_458 release];
                            }
                            r14 = var_4E8;
                    }
                    rbx = var_4C0 + 0x1;
                    [var_4B8 release];
                    r12 = sign_extend_64(rbx);
                    r15 = var_4F0;
            } while (r12 < _objc_msgSend(r14, r15));
    }
    var_4E8 = r14;
    r14 = var_550;
    r12 = var_528;
    if ([r14 count] != 0x0) {
            var_4F0 = @selector(section);
            r15 = @selector(count);
            var_508 = r15;
            rbx = 0x0;
            var_4D0 = 0x0;
            do {
                    rdx = rbx;
                    rax = (r13)(r14, @selector(objectAtIndexedSubscript:), rdx);
                    rax = [rax retain];
                    var_458 = rax;
                    rax = (r13)(rax, @selector(_indexPath));
                    rax = objc_unsafeClaimAutoreleasedReturnValue(rax);
                    var_518 = rax;
                    var_500 = (r13)(rax, var_4F0);
                    r14 = r13;
                    if ((r13)(r12, r15) != 0x0) {
                            r15 = @selector(_indexPath);
                            var_470 = r15;
                            rbx = 0x0;
                            do {
                                    var_468 = rbx;
                                    rdi = r12;
                                    r12 = r14;
                                    r13 = [(r12)(rdi, @selector(objectAtIndexedSubscript:), rbx) retain];
                                    r14 = [(r12)(r13, @selector(_newIndexPath)) retain];
                                    rbx = [(r12)(var_458, r15) retain];
                                    rdx = rbx;
                                    r15 = (r12)(r14, @selector(isEqual:), rdx);
                                    rdi = rbx;
                                    [rdi release];
                                    [r14 release];
                                    if (r15 != 0x0) {
                                            var_460 = r13;
                                            r14 = (r12)(r13, @selector(_isSectionOperation), rdx);
                                            rbx = [(r12)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                            rdi = @"<Unknown File>";
                                            if (rbx != 0x0) {
                                                    rdi = rbx;
                                            }
                                            rdx = "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m";
                                            r13 = [rdi retain];
                                            [rbx release];
                                            r15 = [(r12)(@class(NSAssertionHandler), @selector(currentHandler), rdx) retain];
                                            rbx = [(r12)(var_458, var_470, rdx) retain];
                                            if (r14 != 0x0) {
                                                    rsp = rsp - 0x10;
                                                    stack[1858] = (r12)(rbx, @selector(section), rdx);
                                                    rdx = var_4E0;
                                                    r8 = r13;
                                                    (r12)(r15, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, var_4D8, r8, 0x153e, @"attempt to perform an insert and a move to the same section (%ld)", stack[1858]);
                                                    r14 = r12;
                                            }
                                            else {
                                                    r14 = r12;
                                                    rsp = rsp - 0x10;
                                                    rdx = var_4E0;
                                                    r8 = r13;
                                                    [r15 handleFailureInMethod:rdx object:var_4D8 file:r8 lineNumber:0x1541 description:@"attempt to perform an insert and a move to the same index path (%@)"];
                                            }
                                            rsp = rsp + 0x10;
                                            rdi = rbx;
                                            [rdi release];
                                            [r15 release];
                                            [r13 release];
                                    }
                                    else {
                                            var_460 = r13;
                                            r14 = r12;
                                            rbx = var_458;
                                            if ([rbx _isSectionOperation] != 0x0) {
                                                    rax = (r14)(rbx, var_470);
                                                    rax = [rax retain];
                                                    var_4C0 = rax;
                                                    var_4C8 = (r14)(rax, @selector(section));
                                                    r13 = rbx;
                                                    r15 = [(r14)(var_460, @selector(_newIndexPath)) retain];
                                                    r12 = (r14)(r15, @selector(section));
                                                    [r15 release];
                                                    [var_4C0 release];
                                                    if (var_4C8 == r12) {
                                                            rbx = [(r14)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                                            rdi = @"<Unknown File>";
                                                            if (rbx != 0x0) {
                                                                    rdi = rbx;
                                                            }
                                                            var_4C0 = [rdi retain];
                                                            [rbx release];
                                                            r15 = [(r14)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                                            r13 = [(r14)(r13, var_470, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                                            rdx = var_4E0;
                                                            r8 = var_4C0;
                                                            (r14)(r15, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, var_4D8, r8, 0x1545, @"cannot move an item into a newly inserted section (%ld)", (r14)(r13, @selector(section), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                                                            rsp = (rsp - 0x10) + 0x10;
                                                            [r13 release];
                                                            [r15 release];
                                                            [var_4C0 release];
                                                    }
                                            }
                                    }
                                    rbx = var_468 + 0x1;
                                    [var_460 release];
                                    r12 = var_528;
                                    r15 = var_470;
                            } while (rbx < [r12 count]);
                    }
                    if ([var_458 _isSectionOperation] != 0x0) {
                            rcx = var_500;
                            r13 = r14;
                            if (rcx >= [var_4D8->_collectionViewData numberOfSections]) {
                                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    r14 = [rdi retain];
                                    [rbx release];
                                    r15 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rcx = var_4D8;
                                    r8 = r14;
                                    (r13)(r15, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x154b, @"attempt to insert section %ld but there are only %ld sections after the update", var_500, (r13)(var_4D8->_collectionViewData, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                                    rsp = (rsp - 0x20) + 0x20;
                                    [r15 release];
                                    [r14 release];
                            }
                            r14 = var_550;
                            if (_objc_msgSend(r14, var_508) != 0x0) {
                                    r12 = @selector(count);
                                    var_498 = r12;
                                    r15 = 0x0;
                                    var_468 = 0x0;
                                    do {
                                            rdx = r15;
                                            rax = (r13)(r14, @selector(objectAtIndexedSubscript:), rdx);
                                            rax = [rax retain];
                                            var_460 = rax;
                                            if ((r13)(rax, @selector(_isSectionOperation)) == 0x0) {
                                                    rax = (r13)(var_460, @selector(_indexPath), rdx);
                                                    rax = [rax retain];
                                                    var_480 = rax;
                                                    var_488 = (r13)(rax, @selector(section), rdx);
                                                    rbx = r14;
                                                    r14 = [(r13)(var_458, @selector(_indexPath), rdx) retain];
                                                    var_490 = (r13)(r14, @selector(section), rdx);
                                                    rdi = r14;
                                                    r14 = rbx;
                                                    [rdi release];
                                                    [var_480 release];
                                                    r12 = var_498;
                                                    if (var_488 == var_490) {
                                                            [r14 removeObjectAtIndex:r15];
                                                            rbx = var_468;
                                                            rcx = var_4D0 - ((rbx < var_4D0 ? 0x1 : 0x0) & 0xff);
                                                            var_4D0 = rcx;
                                                    }
                                                    else {
                                                            rbx = var_468 + 0x1;
                                                    }
                                            }
                                            else {
                                                    rbx = var_468 + 0x1;
                                            }
                                            var_468 = rbx;
                                            [var_460 release];
                                            r15 = sign_extend_64(rbx);
                                    } while (r15 < _objc_msgSend(r14, r12));
                            }
                    }
                    else {
                            r13 = var_518;
                            r12 = var_4F0;
                            r15 = r14;
                            rbx = (r15)(r13, r12);
                            rcx = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
                            if (rbx >= (r15)(*(var_4D8 + rcx), @selector(numberOfSections))) {
                                    rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_460 = [rdi retain];
                                    [rbx release];
                                    rbx = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    rdx = var_4E0;
                                    rcx = var_4D8;
                                    r8 = var_460;
                                    (r15)(rbx, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x155c, @"attempt to insert item %ld into section %ld, but there are only %ld sections after the update", (r15)(r13, @selector(item), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"), (r15)(r13, var_4F0, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"), (r15)(var_4D8->_collectionViewData, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                                    rsp = (rsp - 0x20) + 0x20;
                                    rdi = rbx;
                                    r12 = var_4F0;
                                    [rdi release];
                                    [var_460 release];
                            }
                            r14 = (r15)(r13, @selector(item), rdx, rcx, r8);
                            rcx = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
                            COND = r14 >= (r15)(*(var_4D8 + rcx), @selector(numberOfItemsInSection:), (r15)(r13, r12, rdx, rcx, r8), rcx, r8);
                            r14 = r12;
                            if (!COND) {
                                    var_4F0 = r14;
                            }
                            else {
                                    rbx = [(r15)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                                    rdi = @"<Unknown File>";
                                    if (rbx != 0x0) {
                                            rdi = rbx;
                                    }
                                    var_460 = [rdi retain];
                                    [rbx release];
                                    var_468 = [(r15)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                                    var_470 = (r15)(r13, @selector(item), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                                    var_478 = (r15)(r13, r14, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                                    rdx = (r15)(r13, r14, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                                    var_4F0 = r14;
                                    rcx = var_4D8;
                                    r8 = var_460;
                                    (r15)(var_468, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x155d, @"attempt to insert item %ld into section %ld, but there are only %ld items in section %ld after the update", var_470, var_478, (r15)(var_4D8->_collectionViewData, @selector(numberOfItemsInSection:), rdx), (r15)(r13, r14, rdx));
                                    rsp = (rsp - 0x30) + 0x30;
                                    [var_468 release];
                                    [var_460 release];
                            }
                            r13 = r15;
                            r14 = var_550;
                    }
                    rbx = var_4D0 + 0x1;
                    var_4D0 = rbx;
                    [var_458 release];
                    rbx = sign_extend_64(rbx);
                    r15 = var_508;
                    r12 = var_528;
            } while (rbx < _objc_msgSend(r14, r15));
    }
    var_550 = r14;
    var_528 = r12;
    if ([r12 count] == 0x0) goto loc_97f000;

loc_97e28c:
    var_508 = @selector(section);
    rdx = 0x0;
    goto loc_97e344;

loc_97e344:
    var_4D0 = rdx;
    rbx = [(r13)(r12, @selector(objectAtIndexedSubscript:), rdx) retain];
    var_4A8 = rbx;
    r15 = objc_unsafeClaimAutoreleasedReturnValue((r13)(rbx, @selector(_indexPath), rdx));
    var_470 = r15;
    var_468 = objc_unsafeClaimAutoreleasedReturnValue((r13)(rbx, @selector(_newIndexPath), rdx));
    r14 = (r13)(rbx, @selector(_isSectionOperation), rdx);
    r12 = var_508;
    rbx = (r13)(r15, r12, rdx);
    r15 = var_598;
    rax = (r13)(r15, @selector(numberOfSections), rdx);
    if (r14 != 0x0) {
            if (rbx >= rax) {
                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    var_458 = [rdi retain];
                    [rbx release];
                    rbx = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    stack[1856] = (r13)(var_470, r12, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                    r12 = r12;
                    rdx = var_4E0;
                    rcx = var_4D8;
                    r8 = var_458;
                    (r13)(rbx, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x1569, @"attempt to move section %ld, but there are only %ld sections before the update", stack[1856], (r13)(var_598, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                    rsp = (rsp - 0x20) + 0x20;
                    [rbx release];
                    [var_458 release];
            }
            var_508 = r12;
            rbx = (r13)(var_468, r12, rdx, rcx, r8);
            rcx = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
            if (rbx >= (r13)(*(var_4D8 + rcx), @selector(numberOfSections), rdx, rcx, r8)) {
                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    var_458 = [rdi retain];
                    [rbx release];
                    r12 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rcx = var_4D8;
                    r8 = var_458;
                    (r13)(r12, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x156a, @"attempt to to move section %ld to section %ld, but there are only %ld sections after the update", (r13)(var_470, var_508, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"), (r13)(var_468, var_508, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"), (r13)(var_4D8->_collectionViewData, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                    rsp = (rsp - 0x20) + 0x20;
                    [r12 release];
                    [var_458 release];
            }
    }
    else {
            if (rbx >= rax) {
                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    r14 = [rdi retain];
                    rdi = rbx;
                    [rdi release];
                    r12 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdx = var_4E0;
                    rcx = var_4D8;
                    r8 = r14;
                    (r13)(r12, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x156d, @"attempt to move index path (%@) from a section that does not exist - there are only %ld sections before the update", var_470, (r13)(r15, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                    rsp = (rsp - 0x20) + 0x20;
                    rdi = r12;
                    r12 = var_508;
                    [rdi release];
                    [r14 release];
            }
            r14 = (r13)(var_470, @selector(item), rdx, rcx, r8);
            rdx = (r13)(var_470, r12, rdx, rcx, r8);
            rax = (r13)(r15, @selector(numberOfItemsInSection:), rdx, rcx, r8);
            r15 = r13;
            if (r14 >= rax) {
                    r14 = r15;
                    rbx = [(r14)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    var_458 = [rdi retain];
                    rdi = rbx;
                    [rdi release];
                    r13 = [(r14)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdx = (r14)(var_470, r12, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                    rbx = r12;
                    r12 = (r14)(var_598, @selector(numberOfItemsInSection:), rdx);
                    stack[1858] = (r14)(var_470, rbx, rdx);
                    stack[1857] = r12;
                    r12 = rbx;
                    rdx = var_4E0;
                    rcx = var_4D8;
                    r8 = var_458;
                    (r14)(r13, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x156e, @"attempt to move index path (%@) that does not exist - there are only %ld items in section %ld before the update", var_470, stack[1857], stack[1858]);
                    r15 = r14;
                    rsp = (rsp - 0x20) + 0x20;
                    [r13 release];
                    [var_458 release];
            }
            r14 = r12;
            r12 = var_468;
            r13 = r15;
            r15 = (r13)(r12, r14, rdx, rcx, r8);
            rcx = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
            if (r15 >= (r13)(*(var_4D8 + rcx), @selector(numberOfSections), rdx, rcx, r8)) {
                    r12 = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                    rdi = @"<Unknown File>";
                    if (r12 != 0x0) {
                            rdi = r12;
                    }
                    r14 = [rdi retain];
                    [r12 release];
                    r12 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdx = var_4E0;
                    rcx = var_4D8;
                    rbx = r14;
                    r8 = rbx;
                    (r13)(r12, @selector(handleFailureInMethod:object:file:lineNumber:description:), rdx, rcx, r8, 0x156f, @"attempt to move index path (%@) to index path (%@) in section that does not exist - there are only %ld sections after the update", var_470, var_468, (r13)(var_4D8->_collectionViewData, @selector(numberOfSections), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"));
                    rsp = (rsp - 0x20) + 0x20;
                    r14 = var_508;
                    [r12 release];
                    r12 = var_468;
                    [rbx release];
            }
            var_468 = r12;
            var_508 = r14;
            r15 = (r13)(r12, @selector(item), rdx, rcx, r8);
            rcx = *_OBJC_IVAR_$_UICollectionView._collectionViewData;
            if (r15 >= (r13)(*(var_4D8 + rcx), @selector(numberOfItemsInSection:), (r13)(r12, r14, rdx, rcx, r8), rcx, r8)) {
                    rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m", rcx) retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    var_458 = [rdi retain];
                    r14 = r13;
                    [rbx release];
                    var_460 = [(r14)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
                    rdx = (r14)(var_468, var_508, "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m");
                    rcx = var_4D8;
                    r8 = var_458;
                    (r14)(var_460, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x1570, @"attempt to move index path (%@) to index path (%@) that does not exist - there are only %ld items in section %ld after the update", var_470, var_468, (r14)(var_4D8->_collectionViewData, @selector(numberOfItemsInSection:), rdx), (r14)(var_468, var_508, rdx));
                    rsp = (rsp - 0x30) + 0x30;
                    [var_460 release];
                    [var_458 release];
                    r13 = r14;
            }
    }
    rbx = var_4D0 + 0x1;
    var_4D0 = rbx;
    r12 = var_528;
    if (rbx >= [r12 count]) goto loc_97efd3;

loc_97eb0e:
    r14 = var_4D0;
    rbx = var_4D0;
    goto loc_97ebb4;

loc_97ebb4:
    var_458 = rbx;
    rbx = [(r13)(r12, @selector(objectAtIndexedSubscript:), r14) retain];
    var_460 = rbx;
    r12 = objc_unsafeClaimAutoreleasedReturnValue((r13)(rbx, @selector(_indexPath)));
    var_478 = r12;
    r15 = objc_unsafeClaimAutoreleasedReturnValue((r13)(rbx, @selector(_newIndexPath)));
    rax = (r13)(var_470, @selector(isEqual:), r12);
    r12 = r13;
    r13 = rax;
    rax = (r12)(var_468, @selector(isEqual:), r15);
    rbx = r12;
    if (r13 == 0x0) goto loc_97ec78;

loc_97ec48:
    if (rax == 0x0) goto loc_97eda0;

loc_97ec50:
    r12 = var_528;
    [r12 removeObjectAtIndex:r14];
    r13 = rbx;
    rbx = var_458;
    goto loc_97efaa;

loc_97efaa:
    [var_460 release];
    r14 = sign_extend_64(rbx);
    if (r14 < [r12 count]) goto loc_97ebb4;

loc_97efd3:
    [var_4A8 release];
    rdx = var_4D0;
    if (rdx < [r12 count]) goto loc_97e344;

loc_97f000:
    var_528 = r12;
    (r13)(var_5C0, @selector(addObjectsFromArray:), var_4E8);
    (r13)(var_5C8, @selector(addObjectsFromArray:), var_550);
    r15 = [(r13)(var_5C0, @selector(sortedArrayUsingSelector:), @selector(inverseCompareIndexPaths:)) retain];
    (r13)(var_5A0, @selector(addObjectsFromArray:), r15);
    rdi = r15;
    [rdi release];
    (r13)(var_5A0, @selector(addObjectsFromArray:), r12);
    r12 = [(r13)(var_5C8, @selector(sortedArrayUsingSelector:), @selector(compareIndexPaths:)) retain];
    rdx = r12;
    (r13)(var_5A0, @selector(addObjectsFromArray:), rdx);
    [r12 release];
    r14 = var_5A8;
    if (r14 == 0x0) {
            rbx = (r13)((r13)((r13)((r13)(var_4D8->_layout, @selector(class), rdx), @selector(invalidationContextClass), rdx), @selector(alloc), rdx), @selector(init), rdx);
            [r14 release];
            r14 = rbx;
    }
    if ((var_5B4 == 0x0) && ([var_5A0 count] != 0x0)) {
            [r14 _setInvalidateDataSourceCounts:0x1];
    }
    rdx = var_5A0;
    (r13)(r14, @selector(_setUpdateItems:), rdx);
    if (((r13)(var_4D8->_layout, @selector(_estimatesSizes), rdx) != 0x0) && ((r13)(r14, @selector(isKindOfClass:), (r13)(@class(UICollectionViewFlowLayoutInvalidationContext), @selector(class), rdx)) != 0x0)) {
            rbx = [r14 retain];
            [rbx _setRetainExistingSizingInfoForEstimates:0x1];
            [rbx release];
    }
    rbx = var_4D8;
    (r13)(rbx->_layout, @selector(_invalidateLayoutUsingContext:), r14);
    (r13)(rbx->_collectionViewData, @selector(_prepareToLoadData), r14);
    [var_370 visibleBounds];
    (r13)(rbx->_collectionViewData, @selector(validateLayoutInRect:), @selector(visibleBounds));
    rsp = (rsp - 0x20) + 0x20;
    [var_390 bounds];
    var_398 = var_378;
    var_3A0 = var_380;
    var_3A8 = var_388;
    var_3B0 = var_390;
    rsi = rbx->_collectionViewData;
    if (rsi != 0x0) {
            [var_3D0 collectionViewContentRect];
    }
    else {
            var_3C0 = intrinsic_movaps(var_3C0, 0x0);
            var_3D0 = intrinsic_movaps(var_3D0, 0x0);
    }
    r15 = var_598;
    var_5A8 = r14;
    [var_3F0 contentInset];
    xmm0 = intrinsic_movsd(0x0, var_3F0);
    xmm3 = intrinsic_movsd(xmm3, var_3E8);
    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
    xmm0 = intrinsic_xorpd(xmm0, xmm4);
    xmm1 = intrinsic_movsd(xmm1, var_3D8);
    xmm1 = intrinsic_xorpd(xmm1, xmm4);
    xmm2 = intrinsic_movsd(xmm2, var_3E0);
    intrinsic_xorpd(xmm2, xmm4);
    intrinsic_xorpd(xmm3, xmm4);
    rdi = var_410;
    _UIRectInset(rdi);
    var_3B8 = var_3F8;
    var_3C0 = var_400;
    var_3C8 = var_408;
    var_3D0 = var_410;
    rcx = var_408;
    rsp = ((rsp - 0x20) + 0x20 - 0x40) + 0x40;
    if (CGRectContainsRect(rdi, rbx) == 0x0) {
            CGRectGetMaxY(rdi);
            var_458 = intrinsic_movsd(var_458, xmm0);
            CGRectGetMaxY(rdi);
            rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
            xmm1 = intrinsic_movsd(xmm1, var_458);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 > 0x0) {
                    CGRectGetHeight(rdi);
                    var_458 = intrinsic_movsd(var_458, xmm0);
                    CGRectGetHeight(rdi);
                    rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
                    xmm1 = intrinsic_movsd(xmm1, var_458);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 > 0x0) {
                            CGRectGetMaxY(rdi);
                            var_458 = intrinsic_movsd(var_458, xmm0);
                            CGRectGetMaxY(rdi);
                            rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
                            xmm1 = intrinsic_movsd(xmm1, var_458);
                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                            xmm0 = intrinsic_movsd(xmm0, var_3A8);
                            xmm0 = intrinsic_subsd(xmm0, xmm1);
                            var_3A8 = intrinsic_movsd(var_3A8, xmm0);
                    }
            }
            CGRectGetMaxX(rdi);
            var_458 = intrinsic_movsd(var_458, xmm0);
            rcx = var_3C8;
            CGRectGetMaxX(rdi);
            rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
            xmm1 = intrinsic_movsd(xmm1, var_458);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 > 0x0) {
                    CGRectGetWidth(rdi);
                    var_458 = intrinsic_movsd(var_458, xmm0);
                    rcx = var_388;
                    CGRectGetWidth(rdi);
                    rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
                    xmm1 = intrinsic_movsd(xmm1, var_458);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 > 0x0) {
                            CGRectGetMaxX(rdi);
                            var_458 = intrinsic_movsd(var_458, xmm0);
                            rcx = var_3C8;
                            CGRectGetMaxX(rdi);
                            rsp = ((rsp - 0x20) + 0x20 - 0x20) + 0x20;
                            xmm1 = intrinsic_movsd(xmm1, var_458);
                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                            xmm0 = intrinsic_movsd(xmm0, var_3B0);
                            xmm0 = intrinsic_subsd(xmm0, xmm1);
                            var_3B0 = intrinsic_movsd(var_3B0, xmm0);
                    }
            }
    }
    rsp = (rsp - 0x40) + 0x40;
    rbx->_currentUpdate = (r13)((r13)(@class(UICollectionViewUpdate), @selector(alloc), @selector(contentInset), rcx), @selector(initWithCollectionView:updateItems:oldModel:newModel:oldVisibleBounds:newVisibleBounds:), rbx, var_5A0, r15, rbx->_collectionViewData, var_390, var_388, var_380, var_378, var_3B0, var_3A8, var_3A0, var_398);
    [rbx->_currentUpdate release];
    r12 = r15;
    objc_storeStrong(rbx->_currentUpdate + *_OBJC_IVAR_$_UICollectionViewUpdate._newFocusedIndexPath, rbx->_focusedCellIndexPath);
    objc_storeStrong(rbx->_currentUpdate + *_OBJC_IVAR_$_UICollectionViewUpdate._oldFocusedIndexPath, rbx->_focusedCellIndexPath);
    rbx->_currentUpdate->_newFocusedViewType = rbx->_focusedViewType;
    rbx->_currentUpdate->_oldFocusedViewType = rbx->_focusedViewType;
    r13 = (r13)(r12, @selector(numberOfSections), *_OBJC_IVAR_$_UICollectionViewUpdate._oldFocusedViewType, rbx->_currentUpdate);
    r14 = calloc(0x8, r13);
    if (r13 > 0x0) {
            rbx = 0x0;
            do {
                    *(r14 + rbx * 0x8) = [r12 numberOfItemsInSection:rbx];
                    rbx = rbx + 0x1;
            } while (r13 != rbx);
    }
    var_500 = r14;
    rbx = [var_4D8->_collectionViewData numberOfSections];
    var_4F0 = rbx;
    var_4A0 = calloc(0x8, rbx);
    var_4B0 = calloc(0x8, r13);
    var_4C8 = calloc(0x8, rbx);
    var_4D0 = calloc(0x8, r13);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_420, xmm0);
    intrinsic_movapd(var_430, xmm0);
    var_440 = intrinsic_movapd(var_440, xmm0);
    var_450 = intrinsic_movapd(var_450, xmm0);
    rax = [var_5A0 retain];
    var_490 = rax;
    rax = [rax countByEnumeratingWithState:var_450 objects:var_230 count:0x10];
    var_468 = rax;
    var_4B8 = 0x0;
    var_498 = r13;
    var_4A8 = 0x0;
    rbx = r13;
    var_480 = rbx;
    if (rax == 0x0) goto loc_97fc5a;

loc_97fa3b:
    var_488 = *var_440;
    var_4B8 = 0x0;
    var_498 = rbx;
    var_4A8 = 0x0;
    goto loc_97fa73;

loc_97fa73:
    r13 = 0x0;
    goto loc_97fabc;

loc_97fabc:
    if (*var_440 != var_488) {
            objc_enumerationMutation(var_490);
    }
    r15 = *(var_448 + r13 * 0x8);
    rbx = [[r15 _indexPath] retain];
    r12 = [rbx section];
    [rbx release];
    rbx = [r15 _isSectionOperation];
    rax = [r15 _action];
    if (rbx == 0x0) goto loc_97fb69;

loc_97fb37:
    if (rax != 0x0) {
            if ([r15 _action] == 0x1) {
                    var_4B8 = var_4B8 + 0x1;
                    var_498 = var_498 - 0x1;
            }
    }
    else {
            var_4A8 = var_4A8 + 0x1;
            var_498 = var_498 + 0x1;
    }
    goto loc_97fc0b;

loc_97fc0b:
    rbx = var_480;
    r13 = r13 + 0x1;
    if (r13 < var_468) goto loc_97fabc;

loc_97fc22:
    rax = [var_490 countByEnumeratingWithState:var_450 objects:var_230 count:0x10];
    var_468 = rax;
    if (rax != 0x0) goto loc_97fa73;

loc_97fc5a:
    [var_490 release];
    r13 = rbx;
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            rcx = var_498 == var_4F0 ? 0x1 : 0x0;
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x20200) {
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r15 = [rdi retain];
                            rdi = rbx;
                            [rdi release];
                            r12 = [[NSAssertionHandler currentHandler] retain];
                            [r12 handleFailureInMethod:var_4E0 object:var_4D8 file:r15 lineNumber:0x15f2 description:@"Invalid update: invalid number of sections.  The number of sections contained in the collection view after the update (%d) must be equal to the number of sections contained in the collection view before the update (%d), plus or minus the number of sections…", var_4F0, r13, var_4A8, var_4B8];
                            rsp = (rsp - 0x30) + 0x30;
                            [r12 release];
                            [r15 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1882);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r15 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x4;
                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x4;
                                    *(int32_t *)(rax + 0xffffffffffffffe4) = var_4F0;
                                    *(int8_t *)(rax + 0xffffffffffffffe8) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe9) = 0x4;
                                    *(int32_t *)(rax + 0xffffffffffffffea) = r13;
                                    *(int8_t *)(rax + 0xffffffffffffffee) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffef) = 0x4;
                                    *(int32_t *)(rax + 0xfffffffffffffff0) = var_4A8;
                                    *(int8_t *)(rax + 0xfffffffffffffff4) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff5) = 0x4;
                                    *(int32_t *)(rax + 0xfffffffffffffff6) = var_4B8;
                                    _os_log_impl(0xffffffffff6801e4, *(rbx + 0x8), 0x10, "Invalid update: invalid number of sections.  The number of sections contained in the collection view after the update (%d) must be equal to the number of sections contained in the collection view before the update (%d), plus or minus the number of sections…", rax + 0xffffffffffffffe0, 0x1a);
                                    rsp = r15;
                            }
                    }
            }
    }
    else {
            rcx = var_498 == var_4F0 ? 0x1 : 0x0;
            if (__UIApplicationLinkedOnOrAfter(0x20200) != 0x0) {
                    if (rcx == 0x0) {
                            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                            rdi = @"<Unknown File>";
                            if (rbx != 0x0) {
                                    rdi = rbx;
                            }
                            r15 = [rdi retain];
                            rdi = rbx;
                            [rdi release];
                            r12 = [[NSAssertionHandler currentHandler] retain];
                            [r12 handleFailureInMethod:var_4E0 object:var_4D8 file:r15 lineNumber:0x15f2 description:@"Invalid update: invalid number of sections.  The number of sections contained in the collection view after the update (%d) must be equal to the number of sections contained in the collection view before the update (%d), plus or minus the number of sections…", var_4F0, r13, var_4A8, var_4B8];
                            rsp = (rsp - 0x30) + 0x30;
                            [r12 release];
                            [r15 release];
                    }
            }
            else {
                    if (rcx == 0x0) {
                            rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1882);
                            if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                    r15 = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xffffffffffffffe0) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe1) = 0x4;
                                    *(int8_t *)(rax + 0xffffffffffffffe2) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe3) = 0x4;
                                    *(int32_t *)(rax + 0xffffffffffffffe4) = var_4F0;
                                    *(int8_t *)(rax + 0xffffffffffffffe8) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffe9) = 0x4;
                                    *(int32_t *)(rax + 0xffffffffffffffea) = r13;
                                    *(int8_t *)(rax + 0xffffffffffffffee) = 0x0;
                                    *(int8_t *)(rax + 0xffffffffffffffef) = 0x4;
                                    *(int32_t *)(rax + 0xfffffffffffffff0) = var_4A8;
                                    *(int8_t *)(rax + 0xfffffffffffffff4) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff5) = 0x4;
                                    *(int32_t *)(rax + 0xfffffffffffffff6) = var_4B8;
                                    _os_log_impl(0xffffffffff6801e4, *(rbx + 0x8), 0x10, "Invalid update: invalid number of sections.  The number of sections contained in the collection view after the update (%d) must be equal to the number of sections contained in the collection view before the update (%d), plus or minus the number of sections…", rax + 0xffffffffffffffe0, 0x1a);
                                    rsp = r15;
                            }
                    }
            }
    }
    var_488 = 0x1;
    if (var_4F0 > 0x0) {
            r15 = *_OBJC_IVAR_$_UICollectionView._currentUpdate;
            var_4B8 = r15;
            var_488 = 0x1;
            r12 = 0x0;
            do {
                    rdx = var_4D8;
                    r13 = *(*(rdx + r15)->_newSectionMap + r12 * 0x8);
                    if (r13 != 0x7fffffffffffffff) {
                            rbx = *(var_500 + r13 * 0x8);
                            rdi = [rdx->_collectionViewData numberOfItemsInSection:r12];
                            r8 = *(var_4A0 + r12 * 0x8);
                            rsi = *(var_4B0 + r13 * 0x8);
                            rdx = *(var_4C8 + r12 * 0x8);
                            rcx = *(var_4D0 + r13 * 0x8);
                            if (rdi < 0x0) {
                                    var_458 = rbx;
                                    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                                            var_480 = rdi;
                                            var_478 = r8;
                                            var_470 = rsi;
                                            var_468 = rdx;
                                            var_460 = rcx;
                                            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x20200) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_510 = [rdi retain];
                                                    [rbx release];
                                                    rcx = [[NSAssertionHandler currentHandler] retain];
                                                    var_488 = 0x0;
                                                    [rcx handleFailureInMethod:var_4E0 object:var_4D8 file:var_510 lineNumber:0x15fe description:@"Invalid update: invalid number of items in section %d.  Attempt to delete more items than exist in section.", r13];
                                                    rsp = (rsp - 0x10) + 0x10;
                                                    [rcx release];
                                                    [var_510 release];
                                            }
                                            else {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1885);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            r15 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                                            *(int8_t *)(rax + 0xfffffffffffffff2) = 0x0;
                                                            var_488 = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff3) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff4) = r13;
                                                            _os_log_impl(0xffffffffff67ff19, *(rbx + 0x8), 0x10, "Invalid update: invalid number of items in section %d.  Attempt to delete more items than exist in section.", rax + 0xfffffffffffffff0, 0x8);
                                                            rsp = r15;
                                                    }
                                                    else {
                                                            var_488 = 0x0;
                                                    }
                                            }
                                    }
                                    else {
                                            var_480 = rdi;
                                            var_478 = r8;
                                            var_470 = rsi;
                                            var_468 = rdx;
                                            var_460 = rcx;
                                            if (__UIApplicationLinkedOnOrAfter(0x20200) != 0x0) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_510 = [rdi retain];
                                                    [rbx release];
                                                    rcx = [[NSAssertionHandler currentHandler] retain];
                                                    var_488 = 0x0;
                                                    [rcx handleFailureInMethod:var_4E0 object:var_4D8 file:var_510 lineNumber:0x15fe description:@"Invalid update: invalid number of items in section %d.  Attempt to delete more items than exist in section.", r13];
                                                    rsp = (rsp - 0x10) + 0x10;
                                                    [rcx release];
                                                    [var_510 release];
                                            }
                                            else {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1885);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            r15 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                                            *(int8_t *)(rax + 0xfffffffffffffff2) = 0x0;
                                                            var_488 = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff3) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff4) = r13;
                                                            _os_log_impl(0xffffffffff67ff19, *(rbx + 0x8), 0x10, "Invalid update: invalid number of items in section %d.  Attempt to delete more items than exist in section.", rax + 0xfffffffffffffff0, 0x8);
                                                            rsp = r15;
                                                    }
                                                    else {
                                                            var_488 = 0x0;
                                                    }
                                            }
                                    }
                                    r15 = var_4B8;
                                    rbx = var_458;
                                    rcx = var_460;
                                    rdx = var_468;
                                    rsi = var_470;
                                    r8 = var_478;
                                    rdi = var_480;
                            }
                            if (rdi != (r8 + rbx - rsi) + rdx - rcx) {
                                    var_480 = rdi;
                                    var_478 = r8;
                                    var_470 = rsi;
                                    var_468 = rdx;
                                    var_460 = rcx;
                                    var_458 = rbx;
                                    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
                                            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x20200) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_510 = [rdi retain];
                                                    [rbx release];
                                                    r15 = [[NSAssertionHandler currentHandler] retain];
                                                    var_488 = 0x0;
                                                    [r15 handleFailureInMethod:var_4E0 object:var_4D8 file:var_510 lineNumber:0x1602 description:@"Invalid update: invalid number of items in section %d.  The number of items contained in an existing section after the update (%d) must be equal to the number of items contained in that section before the update (%d), plus or minus the number of items inse…", r12, var_480, var_458, var_478, var_470, var_468, var_460];
                                                    rsp = (rsp - 0x40) + 0x40;
                                                    [r15 release];
                                                    [var_510 release];
                                            }
                                            else {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1888);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            r13 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xffffffffffffffd0) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd1) = 0x7;
                                                            *(int8_t *)(rax + 0xffffffffffffffd2) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd3) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffd4) = r12;
                                                            *(int8_t *)(rax + 0xffffffffffffffd8) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd9) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffda) = var_480;
                                                            *(int8_t *)(rax + 0xffffffffffffffde) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffdf) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffe0) = var_458;
                                                            *(int8_t *)(rax + 0xffffffffffffffe4) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffe5) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffe6) = var_478;
                                                            *(int8_t *)(rax + 0xffffffffffffffea) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffeb) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffec) = var_470;
                                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff2) = var_468;
                                                            *(int8_t *)(rax + 0xfffffffffffffff6) = 0x0;
                                                            var_488 = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff7) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff8) = var_460;
                                                            _os_log_impl(0xffffffffff67fc82, *(rbx + 0x8), 0x10, "Invalid update: invalid number of items in section %d.  The number of items contained in an existing section after the update (%d) must be equal to the number of items contained in that section before the update (%d), plus or minus the number of items inse…", rax + 0xffffffffffffffd0, 0x2c);
                                                            rsp = r13;
                                                    }
                                                    else {
                                                            var_488 = 0x0;
                                                    }
                                            }
                                    }
                                    else {
                                            if (__UIApplicationLinkedOnOrAfter(0x20200) != 0x0) {
                                                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                                                    rdi = @"<Unknown File>";
                                                    if (rbx != 0x0) {
                                                            rdi = rbx;
                                                    }
                                                    var_510 = [rdi retain];
                                                    [rbx release];
                                                    r15 = [[NSAssertionHandler currentHandler] retain];
                                                    var_488 = 0x0;
                                                    [r15 handleFailureInMethod:var_4E0 object:var_4D8 file:var_510 lineNumber:0x1602 description:@"Invalid update: invalid number of items in section %d.  The number of items contained in an existing section after the update (%d) must be equal to the number of items contained in that section before the update (%d), plus or minus the number of items inse…", r12, var_480, var_458, var_478, var_470, var_468, var_460];
                                                    rsp = (rsp - 0x40) + 0x40;
                                                    [r15 release];
                                                    [var_510 release];
                                            }
                                            else {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:.__s_category.1888);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            r13 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xffffffffffffffd0) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd1) = 0x7;
                                                            *(int8_t *)(rax + 0xffffffffffffffd2) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd3) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffd4) = r12;
                                                            *(int8_t *)(rax + 0xffffffffffffffd8) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffd9) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffda) = var_480;
                                                            *(int8_t *)(rax + 0xffffffffffffffde) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffdf) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffe0) = var_458;
                                                            *(int8_t *)(rax + 0xffffffffffffffe4) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffe5) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffe6) = var_478;
                                                            *(int8_t *)(rax + 0xffffffffffffffea) = 0x0;
                                                            *(int8_t *)(rax + 0xffffffffffffffeb) = 0x4;
                                                            *(int32_t *)(rax + 0xffffffffffffffec) = var_470;
                                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff2) = var_468;
                                                            *(int8_t *)(rax + 0xfffffffffffffff6) = 0x0;
                                                            var_488 = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff7) = 0x4;
                                                            *(int32_t *)(rax + 0xfffffffffffffff8) = var_460;
                                                            _os_log_impl(0xffffffffff67fc82, *(rbx + 0x8), 0x10, "Invalid update: invalid number of items in section %d.  The number of items contained in an existing section after the update (%d) must be equal to the number of items contained in that section before the update (%d), plus or minus the number of items inse…", rax + 0xffffffffffffffd0, 0x2c);
                                                            rsp = r13;
                                                    }
                                                    else {
                                                            var_488 = 0x0;
                                                    }
                                            }
                                    }
                                    r15 = var_4B8;
                            }
                    }
                    r12 = r12 + 0x1;
            } while (var_4F0 != r12);
    }
    free(var_500);
    free(var_4A0);
    free(var_4B0);
    free(var_4C8);
    free(var_4D0);
    r8 = var_5B0;
    if ((var_488 & 0x1) != 0x0) {
            [var_4D8 _updateWithItems:var_5A0 tentativelyForReordering:var_5B4 & 0xff animator:r8];
    }
    [var_5C8 release];
    [var_5C0 release];
    [var_528 release];
    [var_590 release];
    [var_550 release];
    [var_4E8 release];
    [var_490 release];
    [var_598 release];
    [var_5D0 release];
    rbx = var_4D8;
    rcx = rbx->_updateCount;
    goto loc_9804c6;

loc_9804c6:
    rbx->_updateCount = rcx - 0x1;
    rbx->_insertItems = 0x0;
    [rbx->_insertItems release];
    rbx->_deleteItems = 0x0;
    [rbx->_deleteItems release];
    rbx->_reloadItems = 0x0;
    [rbx->_reloadItems release];
    rbx->_moveItems = 0x0;
    [rbx->_moveItems release];
    rbx->_originalDeleteItems = 0x0;
    [rbx->_originalDeleteItems release];
    rbx->_originalInsertItems = 0x0;
    [rbx->_originalInsertItems release];
    rcx = 0xfdffffffffffffff & rbx->_collectionViewFlags;
    *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    rbx->_collectionViewFlags = rcx;
    [rbx _resumeReloads];
    rdx = rbx;
    if (!(BIT_TEST(rdx->_collectionViewFlags, 0x3c))) {
            [rdx _updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:rdx, rcx];
            [rdx setNeedsFocusUpdate];
            rdx = rdx;
            *(int8_t *)(rdx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) = *(int8_t *)(rdx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x7) & 0xef;
    }
    rdi = rdx->_postUpdateBlock;
    if (rdi != 0x0) {
            rbx = objc_retainBlock(rdi);
            rdx->_postUpdateBlock = 0x0;
            [rdx->_postUpdateBlock release];
            (*(rbx + 0x10))(rbx);
            [rbx release];
    }
    [var_5B0 release];
    [var_5A8 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_97fb69:
    if (rax == 0x0) goto loc_97fba0;

loc_97fb6e:
    rbx = @selector(_action);
    if (_objc_msgSend(r15, rbx) != 0x1) goto loc_97fbad;

loc_97fb87:
    rax = var_4B0;
    goto loc_97fba7;

loc_97fba7:
    *(rax + r12 * 0x8) = *(rax + r12 * 0x8) + 0x1;
    goto loc_97fc0b;

loc_97fbad:
    if (_objc_msgSend(r15, rbx) == 0x3) {
            rbx = [[r15 _newIndexPath] retain];
            r15 = [rbx section];
            [rbx release];
            if (r12 != r15) {
                    *(var_4D0 + r12 * 0x8) = *(var_4D0 + r12 * 0x8) + 0x1;
                    *(var_4C8 + r15 * 0x8) = *(var_4C8 + r15 * 0x8) + 0x1;
            }
    }
    goto loc_97fc0b;

loc_97fba0:
    rax = var_4A0;
    goto loc_97fba7;

loc_97eda0:
    r12 = rbx;
    r13 = (r12)(var_4A8, @selector(_isSectionOperation));
    rbx = [(r12)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
    rdi = @"<Unknown File>";
    if (rbx != 0x0) {
            rdi = rbx;
    }
    rdx = "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m";
    var_478 = [rdi retain];
    [rbx release];
    r14 = [(r12)(@class(NSAssertionHandler), @selector(currentHandler), rdx) retain];
    if (r13 != 0x0) {
            var_500 = (r12)(var_470, @selector(section), rdx);
            r13 = (r12)(var_468, @selector(section), rdx);
            rsp = rsp - 0x20;
            stack[1858] = (r12)(r15, @selector(section), rdx);
            rcx = var_4D8;
            r15 = var_478;
            r8 = r15;
            (r12)(r14, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_4E0, rcx, r8, 0x157f, @"attempt to move section %ld to both section %ld and section %ld", var_500, r13, stack[1858]);
    }
    else {
            rsp = rsp - 0x20;
            rcx = var_4D8;
            r15 = var_478;
            r8 = r15;
            [r14 handleFailureInMethod:var_4E0 object:rcx file:r8 lineNumber:0x1582 description:@"attempt to move item at index path %@ to both %@ and %@"];
    }
    rsp = rsp + 0x20;
    [r14 release];
    [r15 release];
    r13 = r12;
    goto loc_97ef9b;

loc_97ef9b:
    rbx = var_458 + 0x1;
    r12 = var_528;
    goto loc_97efaa;

loc_97ec78:
    r13 = rbx;
    if (rax != 0x0) {
            r15 = (r13)(var_4A8, @selector(_isSectionOperation));
            rbx = [(r13)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            rdx = "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m";
            r12 = [rdi retain];
            [rbx release];
            r14 = [(r13)(@class(NSAssertionHandler), @selector(currentHandler), rdx) retain];
            if (r15 != 0x0) {
                    var_500 = (r13)(var_470, @selector(section), rdx);
                    r15 = r12;
                    r12 = (r13)(var_478, @selector(section), rdx);
                    stack[1858] = (r13)(var_468, @selector(section), rdx);
                    rsi = @selector(handleFailureInMethod:object:file:lineNumber:description:);
                    rdx = var_4E0;
                    rcx = var_4D8;
                    r8 = r15;
                    (r13)(r14, rsi, rdx, rcx, r8, 0x1588, @"attempt to move both section %ld and section %ld to section %ld", var_500, r12, stack[1858]);
                    rsp = (rsp - 0x20) + 0x20;
                    [r14 release];
                    rdi = r15;
            }
            else {
                    rsi = @selector(handleFailureInMethod:object:file:lineNumber:description:);
                    rdx = var_4E0;
                    rcx = var_4D8;
                    r8 = r12;
                    _objc_msgSend(r14, rsi, rdx, rcx);
                    rsp = (rsp - 0x20) + 0x20;
                    [r14 release];
                    rdi = r12;
            }
            [rdi release];
    }
    goto loc_97ef9b;
}

void -[UICollectionView _updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:](void * self, void * _cmd, struct CGRect arg2) {
    rdx = arg2;
    r12 = self;
    if (CGRectIsNull(self) == 0x0) {
            if ([r12->_focusedCellIndexPath section] < [r12 numberOfSections]) {
                    rdx = [r12->_focusedCellIndexPath section];
                    r15 = [r12 numberOfItemsInSection:rdx];
                    if (r15 != 0x0) {
                            if (r15 <= [r12->_focusedCellIndexPath row]) {
                                    rbx = [[NSIndexPath indexPathForRow:r15 - 0x1 inSection:[r12->_focusedCellIndexPath section]] retain];
                                    [r12 _setFocusedCellIndexPath:rbx];
                                    [rbx release];
                            }
                    }
                    else {
                            r13 = [[r12 window] retain];
                            rbx = [[r13 _focusEngine] retain];
                            rcx = *(arg_0 + 0x8);
                            r14 = [[rbx _closestFocusableViewToRect:r12 inView:rcx] retain];
                            [rbx release];
                            rdi = r13;
                            [rdi release];
                            rdx = r14;
                            rbx = 0x0;
                            if ([r12 isAncestorOfItem:rdx] != 0x0) {
                                    rdx = [UICollectionViewCell class];
                                    if ([r14 isKindOfClass:rdx, rcx] != 0x0) {
                                            rdx = r14;
                                            rbx = [[r12 indexPathForCell:rdx] retain];
                                    }
                                    else {
                                            rbx = 0x0;
                                            if ([r14 isKindOfClass:[UICollectionReusableView class]] != 0x0) {
                                                    rdx = r14;
                                                    rbx = [[r12 indexPathForSupplementaryView:rdx] retain];
                                            }
                                    }
                            }
                            [r12 _setFocusedCellIndexPath:rdx];
                            [rbx release];
                            [r14 release];
                    }
            }
            else {
                    r13 = [[r12 window] retain];
                    rbx = [[r13 _focusEngine] retain];
                    rcx = *(arg_0 + 0x8);
                    r14 = [[rbx _closestFocusableViewToRect:r12 inView:rcx] retain];
                    [rbx release];
                    rdi = r13;
                    [rdi release];
                    rdx = r14;
                    rbx = 0x0;
                    if ([r12 isAncestorOfItem:rdx] != 0x0) {
                            rdx = [UICollectionViewCell class];
                            if ([r14 isKindOfClass:rdx, rcx] != 0x0) {
                                    rdx = r14;
                                    rbx = [[r12 indexPathForCell:rdx] retain];
                            }
                            else {
                                    rbx = 0x0;
                                    if ([r14 isKindOfClass:[UICollectionReusableView class]] != 0x0) {
                                            rdx = r14;
                                            rbx = [[r12 indexPathForSupplementaryView:rdx] retain];
                                    }
                            }
                    }
                    [r12 _setFocusedCellIndexPath:rdx];
                    [rbx release];
                    [r14 release];
            }
    }
    return;
}

void -[UICollectionView _prepareLayoutForUpdates](void * self, void * _cmd) {
    r12 = [[NSMutableArray alloc] init];
    r15 = [[self->_originalDeleteItems sortedArrayUsingSelector:rdx] retain];
    [r12 addObjectsFromArray:r15];
    [r15 release];
    rbx = [[self->_originalInsertItems sortedArrayUsingSelector:@selector(compareIndexPaths:)] retain];
    [r12 addObjectsFromArray:rbx];
    [rbx release];
    rbx = [[self->_reloadItems sortedArrayUsingSelector:@selector(compareIndexPaths:)] retain];
    [r12 addObjectsFromArray:rbx];
    [rbx release];
    rbx = [[self->_moveItems sortedArrayUsingSelector:@selector(compareIndexPaths:)] retain];
    [r12 addObjectsFromArray:rbx];
    [rbx release];
    [self->_layout prepareForCollectionViewUpdates:r12];
    rdi = r12;
    [rdi release];
    return;
}

void * -[UICollectionView _viewAnimationsForCurrentUpdate](void * self, void * _cmd) {
    var_B38 = [[self _visibleViews] retain];
    r13 = [self retain];
    var_BB8 = r13;
    var_4B8 = r13;
    r15 = objc_retainBlock(__NSConcreteStackBlock);
    r12 = [[NSMutableDictionary alloc] init];
    var_BC0 = r12;
    r14 = [[NSMutableDictionary alloc] init];
    var_BD8 = r14;
    var_BC8 = [[NSMutableDictionary alloc] init];
    (*(r15 + 0x10))(r15, r13->_visibleCellsDict, r12, 0x0);
    rdi = r14;
    rax = [rdi retain];
    var_AE8 = rax;
    var_4E8 = rax;
    rbx = [r15 retain];
    var_4E0 = rbx;
    [r13->_visibleSupplementaryViewsDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    rax = [var_BC8 retain];
    var_AF0 = rax;
    var_518 = rax;
    rax = [rbx retain];
    var_BD0 = rax;
    var_510 = rax;
    [r13->_visibleDecorationViewsDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    r12 = [[NSMutableArray alloc] init];
    var_B58 = [[NSMutableIndexSet alloc] init];
    var_B88 = [[NSMutableIndexSet alloc] init];
    [var_558 _visibleBounds];
    r15 = [r13 retain];
    var_A00 = r15;
    var_568 = r15;
    rax = [r12 retain];
    var_AA0 = rax;
    var_560 = rax;
    var_B40 = objc_retainBlock(__NSConcreteStackBlock);
    intrinsic_movaps(var_5A0, 0x0);
    intrinsic_movaps(var_5B0, 0x0);
    var_5C0 = intrinsic_movaps(var_5C0, 0x0);
    var_5D0 = intrinsic_movaps(var_5D0, 0x0);
    rax = [r15->_deleteItems retain];
    r13 = _objc_msgSend;
    var_B28 = rax;
    rax = [rax countByEnumeratingWithState:var_5D0 objects:var_B0 count:0x10];
    var_AF8 = rax;
    if (rax != 0x0) {
            r14 = *var_5C0;
            var_B20 = r14;
            do {
                    rbx = 0x0;
                    do {
                            if (*var_5C0 != r14) {
                                    objc_enumerationMutation(var_B28);
                            }
                            r12 = *(var_5C8 + rbx * 0x8);
                            var_AD8 = rbx;
                            if ([r12 _isSectionOperation] != 0x0) {
                                    rbx = [(r13)(r12, @selector(_indexPath)) retain];
                                    var_A08 = (r13)(rbx, @selector(section));
                                    [rbx release];
                                    rcx = r15;
                                    r15 = (r13)(r15->_currentUpdate->_oldModel, @selector(numberOfItemsInSection:), var_A08, *_OBJC_IVAR_$_UICollectionViewUpdate._oldModel);
                                    r12 = [(r13)(@class(NSIndexPath), @selector(indexPathForRow:inSection:), 0x0, var_A08) retain];
                                    rbx = (r13)(rcx->_currentUpdate->_oldModel, @selector(globalIndexForItemAtIndexPath:), r12);
                                    rdi = r12;
                                    r12 = var_B40;
                                    [rdi release];
                                    if (r15 > 0x0) {
                                            do {
                                                    (*(r12 + 0x10))(r12, rbx);
                                                    rbx = rbx + 0x1;
                                                    r15 = r15 - 0x1;
                                            } while (r15 != 0x0);
                                    }
                                    var_5E0 = intrinsic_movaps(var_5E0, 0x0);
                                    var_5F0 = intrinsic_movaps(var_5F0, 0x0);
                                    var_600 = intrinsic_movaps(var_600, 0x0);
                                    var_610 = intrinsic_movaps(var_610, 0x0);
                                    r15 = var_A00;
                                    rax = (r13)(r15->_currentUpdate->_oldModel, @selector(existingSupplementaryLayoutAttributesInSection:), var_A08, *_OBJC_IVAR_$_UICollectionViewUpdate._oldModel);
                                    rax = [rax retain];
                                    var_AA8 = rax;
                                    rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_610, var_130, 0x10);
                                    r12 = r13;
                                    var_A48 = rax;
                                    if (rax != 0x0) {
                                            var_A58 = *var_600;
                                            do {
                                                    rbx = 0x0;
                                                    do {
                                                            if (*var_600 != var_A58) {
                                                                    objc_enumerationMutation(var_AA8);
                                                            }
                                                            r13 = *(var_608 + rbx * 0x8);
                                                            rdx = r13;
                                                            rax = [r15 _visibleViewForLayoutAttributes:rdx];
                                                            if (rax != 0x0) {
                                                                    var_A30 = rbx;
                                                                    var_A28 = rax;
                                                                    r14 = (r12)(r13, @selector(_isDecorationView), rdx);
                                                                    rbx = [(r12)(r13, @selector(_elementKind), rdx) retain];
                                                                    var_A20 = r13;
                                                                    r12 = [(r12)(r13, @selector(indexPath), rdx) retain];
                                                                    rdi = r15->_layout;
                                                                    if (r14 != 0x0) {
                                                                            rsi = @selector(finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:);
                                                                    }
                                                                    else {
                                                                            rsi = @selector(finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:);
                                                                    }
                                                                    rdx = rbx;
                                                                    r14 = [[_objc_msgSend(rdi, rsi) retain] retain];
                                                                    r15 = rbx;
                                                                    [r14 release];
                                                                    [r12 release];
                                                                    [r15 release];
                                                                    rcx = var_A00;
                                                                    r13 = var_A20;
                                                                    if (r14 == 0x0) {
                                                                            rdi = r14;
                                                                            r14 = [r13 copy];
                                                                            [rdi release];
                                                                            [r14 setAlpha:rdx];
                                                                            rcx = rcx;
                                                                    }
                                                                    var_A40 = r14;
                                                                    r12 = _objc_msgSend;
                                                                    rbx = [[rcx->_layout _animationForReusableView:var_A28 toLayoutAttributes:r14 type:0x2] retain];
                                                                    var_A38 = rbx;
                                                                    rax = [UICollectionViewAnimation alloc];
                                                                    xmm1 = intrinsic_movsd(xmm1, *0xc4f410, var_A28, 0x2, r14, 0x1, 0x1, rbx);
                                                                    rsp = (rsp - 0x10) + 0x10;
                                                                    var_A28 = [rax initWithView:var_A28 viewType:r14 finalLayoutAttributes:0x2 startFraction:r9 endFraction:stack[1663] animateFromCurrentPostion:stack[1664] deleteAfterAnimation:stack[1665] customAnimations:stack[1666]];
                                                                    r15 = [r13 representedElementCategory];
                                                                    r14 = [[r13 _elementKind] retain];
                                                                    r15 = [[var_A00 _visibleViewDictForElementCategory:r15 elementKind:r14] retain];
                                                                    rbx = [[r13 indexPath] retain];
                                                                    [r15 removeObjectForKey:rbx];
                                                                    rdi = rbx;
                                                                    [rdi release];
                                                                    rdi = r15;
                                                                    r15 = var_A00;
                                                                    [rdi release];
                                                                    [r14 release];
                                                                    [var_AA0 addObject:var_A28];
                                                                    [var_A28 release];
                                                                    [var_A38 release];
                                                                    [var_A40 release];
                                                                    rbx = var_A30;
                                                            }
                                                            rbx = rbx + 0x1;
                                                    } while (rbx < var_A48);
                                                    rax = [var_AA8 countByEnumeratingWithState:var_610 objects:var_130 count:0x10];
                                                    var_A48 = rax;
                                            } while (rax != 0x0);
                                    }
                                    [var_AA8 release];
                                    r13 = r12;
                            }
                            else {
                                    r12 = [(r13)(r12, @selector(_indexPath)) retain];
                                    rax = (r13)(r15->_currentUpdate->_oldModel, @selector(globalIndexForItemAtIndexPath:), r12);
                                    (*(var_B40 + 0x10))(var_B40, rax);
                                    [r12 release];
                            }
                            r14 = var_B20;
                            rbx = var_AD8 + 0x1;
                    } while (rbx < var_AF8);
                    rax = [var_B28 countByEnumeratingWithState:var_5D0 objects:var_B0 count:0x10];
                    var_AF8 = rax;
            } while (rax != 0x0);
    }
    [var_B28 release];
    r14 = [r15 retain];
    var_A28 = r14;
    var_648 = r14;
    rax = [var_AA0 retain];
    var_AE0 = rax;
    var_640 = rax;
    rax = [var_BC0 retain];
    var_BA8 = rax;
    var_638 = rax;
    var_B48 = objc_retainBlock(__NSConcreteStackBlock);
    intrinsic_movaps(var_680, 0x0);
    intrinsic_movaps(var_690, 0x0);
    var_6A0 = intrinsic_movaps(var_6A0, 0x0);
    var_6B0 = intrinsic_movaps(var_6B0, 0x0);
    rax = [r14->_insertItems retain];
    var_B60 = rax;
    rdx = var_6B0;
    rcx = var_1B0;
    r8 = 0x10;
    rax = [rax countByEnumeratingWithState:rdx objects:rcx count:r8];
    var_B18 = rax;
    if (rax != 0x0) {
            var_B50 = *var_6A0;
            r15 = _objc_release;
            do {
                    rdx = 0x0;
                    do {
                            r12 = r15;
                            if (*var_6A0 != var_B50) {
                                    objc_enumerationMutation(var_B60);
                                    rdx = rdx;
                            }
                            var_B00 = rdx;
                            rbx = *(var_6A8 + rdx * 0x8);
                            if ([rbx _isSectionOperation] != 0x0) {
                                    rbx = [(r13)(rbx, @selector(_indexPath)) retain];
                                    rax = (r13)(rbx, @selector(section));
                                    var_A00 = rax;
                                    r15 = rax;
                                    (r12)(rbx, @selector(section));
                                    r15 = (r13)(r14->_currentUpdate->_newModel, @selector(numberOfItemsInSection:), r15, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel);
                                    r12 = [(r13)(@class(NSIndexPath), @selector(indexPathForItem:inSection:), 0x0, var_A00) retain];
                                    rbx = (r13)(r14->_currentUpdate->_newModel, @selector(globalIndexForItemAtIndexPath:), r12);
                                    [r12 release];
                                    r12 = var_B48;
                                    if (r15 > 0x0) {
                                            do {
                                                    (*(r12 + 0x10))(r12, rbx);
                                                    rbx = rbx + 0x1;
                                                    r15 = r15 - 0x1;
                                            } while (r15 != 0x0);
                                    }
                                    var_6C0 = intrinsic_movaps(var_6C0, 0x0);
                                    var_6D0 = intrinsic_movaps(var_6D0, 0x0);
                                    var_6E0 = intrinsic_movaps(var_6E0, 0x0);
                                    var_6F0 = intrinsic_movaps(var_6F0, 0x0);
                                    r14 = var_A28;
                                    rax = (r13)(r14->_currentUpdate->_newModel, @selector(existingSupplementaryLayoutAttributesInSection:), var_A00, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel);
                                    rax = [rax retain];
                                    var_A78 = rax;
                                    rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_6F0, var_230, 0x10);
                                    var_A38 = rax;
                                    r15 = _objc_release;
                                    if (rax != 0x0) {
                                            var_A48 = *var_6E0;
                                            do {
                                                    rbx = 0x0;
                                                    do {
                                                            if (*var_6E0 != var_A48) {
                                                                    objc_enumerationMutation(var_A78);
                                                            }
                                                            var_A00 = rbx;
                                                            var_A08 = *(var_6E8 + rbx * 0x8);
                                                            r12 = (r13)(*(var_6E8 + rbx * 0x8), @selector(_isDecorationView));
                                                            r15 = r14->_layout;
                                                            r14 = [(r13)(*(var_6E8 + rbx * 0x8), @selector(_elementKind)) retain];
                                                            r13 = [(r13)(*(var_6E8 + rbx * 0x8), @selector(indexPath)) retain];
                                                            rdi = r15;
                                                            if (r12 != 0x0) {
                                                                    rsi = @selector(initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:);
                                                            }
                                                            else {
                                                                    rsi = @selector(initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:);
                                                            }
                                                            r12 = [[_objc_msgSend(rdi, rsi) retain] retain];
                                                            r15 = _objc_release;
                                                            [r12 release];
                                                            [r13 release];
                                                            [r14 release];
                                                            COND = r12 != 0x0;
                                                            r13 = _objc_msgSend;
                                                            rbx = r12;
                                                            r12 = var_A08;
                                                            if (!COND) {
                                                                    r13 = _objc_msgSend;
                                                                    rdi = rbx;
                                                                    rbx = [r12 copy];
                                                                    [rdi release];
                                                                    rsi = @selector(setAlpha:);
                                                                    _objc_msgSend(rbx, rsi);
                                                            }
                                                            if (r12 != 0x0) {
                                                                    rsi = r12;
                                                                    [var_730 frame];
                                                            }
                                                            else {
                                                                    var_720 = intrinsic_movaps(var_720, 0x0);
                                                                    var_730 = intrinsic_movaps(var_730, 0x0);
                                                            }
                                                            if (rbx != 0x0) {
                                                                    rsi = rbx;
                                                                    [var_750 frame];
                                                            }
                                                            else {
                                                                    var_740 = intrinsic_movaps(var_740, 0x0);
                                                                    var_750 = intrinsic_movaps(var_750, 0x0);
                                                            }
                                                            CGRectUnion(var_710, rsi);
                                                            stack[1664] = var_6F8;
                                                            stack[1663] = var_700;
                                                            rsp = ((rsp - 0x40) + 0x40 - 0x40) + 0x40;
                                                            if ((CGRectIntersectsRect(var_710, rsi) != 0x0) && ((([rbx isHidden] == 0x0) || ([r12 isHidden] == 0x0)))) {
                                                                    r14 = [[r12 _elementKind] retain];
                                                                    var_A60 = r14;
                                                                    r13 = [[r12 indexPath] retain];
                                                                    r9 = 0x1;
                                                                    var_A58 = rbx;
                                                                    rax = [var_A28 _createPreparedSupplementaryViewForElementOfKind:r14 atIndexPath:r13 withLayoutAttributes:r8 applyAttributes:r9];
                                                                    r14 = r12;
                                                                    r12 = rax;
                                                                    rdi = r13;
                                                                    [rdi release];
                                                                    [var_A60 release];
                                                                    rbx = [[var_A28->_layout _animationForReusableView:r12 toLayoutAttributes:r14 type:0x2] retain];
                                                                    var_A60 = rbx;
                                                                    rax = [UICollectionViewAnimation alloc];
                                                                    r8 = r14;
                                                                    xmm1 = intrinsic_movsd(xmm1, *0xc4f410, r12, 0x2, r8, 0x0, 0x0, rbx);
                                                                    rax = [rax initWithView:r12 viewType:r14 finalLayoutAttributes:r8 startFraction:r9 endFraction:stack[1663] animateFromCurrentPostion:stack[1664] deleteAfterAnimation:stack[1665] customAnimations:stack[1666]];
                                                                    rsp = (rsp - 0x10) + 0x10;
                                                                    var_A68 = rax;
                                                                    [var_AE0 addObject:rax];
                                                                    rbx = [r14 _isSupplementaryView];
                                                                    r15 = r14;
                                                                    rax = [r14 _elementKind];
                                                                    rax = [rax retain];
                                                                    if (rbx != 0x0) {
                                                                            var_A70 = rax;
                                                                            r14 = [[var_AE8 objectForKeyedSubscript:rax, 0x2, r8] retain];
                                                                            rbx = [[r15 indexPath] retain];
                                                                            rsi = @selector(setObject:forKey:);
                                                                            rdx = r12;
                                                                            var_A08 = r12;
                                                                            rcx = rbx;
                                                                            _objc_msgSend(r14, rsi, rdx, rcx, r8);
                                                                            r12 = _objc_msgSend;
                                                                            [rbx release];
                                                                            rdi = r14;
                                                                    }
                                                                    else {
                                                                            var_A70 = rax;
                                                                            r13 = [[var_AF0 objectForKeyedSubscript:rax, 0x2, r8] retain];
                                                                            r14 = [[r15 indexPath] retain];
                                                                            rsi = @selector(setObject:forKey:);
                                                                            rdx = r12;
                                                                            var_A08 = r12;
                                                                            rcx = r14;
                                                                            _objc_msgSend(r13, rsi, rdx, rcx, r8);
                                                                            r12 = _objc_msgSend;
                                                                            [r14 release];
                                                                            rdi = r13;
                                                                    }
                                                                    r15 = _objc_release;
                                                                    [rdi release];
                                                                    [var_A70 release];
                                                                    [var_A68 release];
                                                                    [var_A60 release];
                                                                    [var_A08 release];
                                                                    r13 = r12;
                                                                    rbx = var_A58;
                                                            }
                                                            [rbx release];
                                                            rbx = var_A00 + 0x1;
                                                            r14 = var_A28;
                                                    } while (rbx < var_A38);
                                                    r8 = 0x10;
                                                    rax = [var_A78 countByEnumeratingWithState:var_6F0 objects:var_230 count:r8];
                                                    var_A38 = rax;
                                            } while (rax != 0x0);
                                    }
                                    [var_A78 release];
                            }
                            else {
                                    rbx = [(r13)(rbx, @selector(_indexPath)) retain];
                                    rax = (r13)(r14->_currentUpdate->_newModel, @selector(globalIndexForItemAtIndexPath:), rbx);
                                    (*(var_B48 + 0x10))(var_B48, rax);
                                    [rbx release];
                                    r15 = r12;
                            }
                            rdx = var_B00 + 0x1;
                    } while (rdx < var_B18);
                    r8 = 0x10;
                    rdx = var_6B0;
                    rcx = [var_B60 countByEnumeratingWithState:rdx objects:var_1B0 count:r8];
                    var_B18 = rcx;
            } while (rcx != 0x0);
    }
    [var_B60 release];
    var_A20 = (r13)((r13)(@class(NSMutableArray), @selector(alloc), rdx, rcx, 0x10), @selector(init), rdx, rcx, 0x10);
    intrinsic_movaps(var_760, 0x0);
    intrinsic_movaps(var_770, 0x0);
    var_780 = intrinsic_movaps(var_780, 0x0);
    var_790 = intrinsic_movaps(var_790, 0x0);
    rax = (r13)(r14->_visibleCellsDict, @selector(objectEnumerator), rdx, rcx, 0x10);
    rax = [rax retain];
    var_A30 = rax;
    rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_790, var_2B0, 0x10);
    var_A08 = rax;
    if (rax != 0x0) {
            r12 = *var_780;
            var_A68 = r12;
            r15 = @selector(countByEnumeratingWithState:objects:count:);
            var_A60 = r15;
            do {
                    r13 = 0x0;
                    do {
                            if (*var_780 != r12) {
                                    objc_enumerationMutation(var_A30);
                            }
                            rbx = *(var_788 + r13 * 0x8);
                            if ([var_B38 containsObject:rbx] != 0x0) {
                                    rdi = rbx;
                                    rax = [rdi _layoutAttributes];
                                    rax = [rax retain];
                                    var_A10 = rax;
                                    r15 = [[rax indexPath] retain];
                                    rdx = r15;
                                    rbx = [r14->_currentUpdate->_oldModel globalIndexForItemAtIndexPath:rdx];
                                    [r15 release];
                                    rax = r14->_currentUpdate;
                                    if (*(rax->_oldGlobalItemMap + rbx * 0x8) != 0x7fffffffffffffff) {
                                            r15 = rbx;
                                            r12 = [[rax->_newModel layoutAttributesForGlobalItemIndex:rdx] retain];
                                            if ([var_A20 containsObject:r12] != 0x0) {
                                                    rbx = ___UILogGetCategoryCachedImpl("Assert", __viewAnimationsForCurrentUpdate.__s_category);
                                                    if (os_log_type_enabled(*(rbx + 0x8), 0x10) != 0x0) {
                                                            var_A18 = rsp;
                                                            rax = rsp;
                                                            *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                                            *(int8_t *)(rax + 0xfffffffffffffff1) = 0x0;
                                                            _os_log_impl(0xffffffffff67dd81, *(rbx + 0x8), 0x10, "attempt to add identical layout attributes to list of on screen attributes to animated", rax + 0xfffffffffffffff0, 0x2);
                                                            rsp = var_A18;
                                                    }
                                            }
                                            [var_A20 addObject:r12];
                                            [r12 release];
                                            rbx = r15;
                                    }
                                    [var_B58 addIndex:rbx];
                                    [var_A10 release];
                                    r15 = var_A60;
                                    r12 = var_A68;
                            }
                            r13 = r13 + 0x1;
                    } while (r13 < var_A08);
                    rax = _objc_msgSend(var_A30, r15);
                    var_A08 = rax;
            } while (rax != 0x0);
            r13 = _objc_msgSend;
    }
    else {
            r15 = @selector(countByEnumeratingWithState:objects:count:);
    }
    [var_A30 release];
    intrinsic_movaps(var_7A0, 0x0);
    intrinsic_movaps(var_7B0, 0x0);
    var_7C0 = intrinsic_movaps(var_7C0, 0x0);
    var_7D0 = intrinsic_movaps(var_7D0, 0x0);
    [var_7F0 _visibleBounds];
    rax = (r13)(r14->_currentUpdate->_newModel, @selector(layoutAttributesForElementsInRect:));
    rsp = (rsp - 0x20) + 0x20;
    rax = [rax retain];
    var_A10 = rax;
    rax = (r13)(rax, r15, var_7D0, var_330, 0x10);
    rcx = rax;
    if (rax != 0x0) {
            var_A28 = r14;
            r14 = *var_7C0;
            var_A50 = r14;
            r13 = rcx;
            do {
                    var_A18 = r13;
                    r15 = @selector(_isCell);
                    var_A30 = r15;
                    r12 = 0x0;
                    do {
                            if (*var_7C0 != r14) {
                                    objc_enumerationMutation(var_A10);
                            }
                            rbx = *(var_7C8 + r12 * 0x8);
                            if (_objc_msgSend(rbx, r15) != 0x0) {
                                    var_A00 = rbx;
                                    r14 = [[var_A00 indexPath] retain];
                                    rdx = r14;
                                    rbx = [var_A28->_currentUpdate->_newModel globalIndexForItemAtIndexPath:rdx];
                                    rdi = r14;
                                    r14 = var_A50;
                                    [rdi release];
                                    r8 = var_A00;
                                    r13 = var_A18;
                                    r15 = var_A30;
                                    if (*(var_A28->_currentUpdate->_newGlobalItemMap + rbx * 0x8) != 0x7fffffffffffffff) {
                                            rax = [var_B58 containsIndex:rdx];
                                            rdx = r8;
                                            if (rax == 0x0) {
                                                    [var_A20 addObject:rdx];
                                            }
                                    }
                            }
                            r12 = r12 + 0x1;
                    } while (r12 < r13);
                    rbx = @selector(countByEnumeratingWithState:objects:count:);
                    r13 = _objc_msgSend(var_A10, rbx);
            } while (r13 != 0x0);
            r13 = _objc_msgSend;
    }
    else {
            var_A28 = r14;
            rbx = @selector(countByEnumeratingWithState:objects:count:);
    }
    [var_A10 release];
    intrinsic_movaps(var_800, 0x0);
    intrinsic_movaps(var_810, 0x0);
    var_820 = intrinsic_movaps(var_820, 0x0);
    var_830 = intrinsic_movaps(var_830, 0x0);
    rax = [var_A20 retain];
    var_A88 = rax;
    rdx = var_830;
    r8 = 0x10;
    rax = _objc_msgSend(rax, rbx);
    var_A08 = rax;
    if (rax == 0x0) goto loc_982f6e;

loc_98267e:
    var_A18 = *var_820;
    goto loc_98269d;

loc_98269d:
    r15 = @selector(_isCell);
    var_A48 = r15;
    rbx = 0x0;
    goto loc_982871;

loc_982871:
    if (*var_820 != var_A18) {
            objc_enumerationMutation(var_A88);
    }
    r12 = *(var_828 + rbx * 0x8);
    rdx = 0x0;
    (r13)(var_A28, @selector(_getOriginalReorderingIndexPaths:targetIndexPaths:), rdx, 0x0);
    r14 = [0x0 retain];
    if ((r13)(r12, r15) == 0x0) goto loc_982f1d;

loc_9828e1:
    if (_objc_msgSend(r12, r15) == 0x0) goto loc_982949;

loc_9828f1:
    r15 = [(r13)(r12, @selector(indexPath)) retain];
    rdx = r15;
    var_A00 = r12;
    r12 = r14;
    r14 = (r13)(r14, @selector(containsObject:), rdx);
    rdi = r15;
    r15 = var_A48;
    [rdi release];
    COND = r14 != 0x0;
    r14 = r12;
    r12 = var_A00;
    if (COND) goto loc_982f1d;

loc_982949:
    var_A00 = r12;
    var_A40 = r14;
    var_A38 = rbx;
    rax = (r13)(r12, @selector(indexPath), rdx);
    rax = [rax retain];
    var_A20 = rax;
    rax = (r13)(var_A28->_currentUpdate->_newModel, @selector(globalIndexForItemAtIndexPath:), rax, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel);
    var_A30 = rax;
    r14 = [(r13)(var_A28->_currentUpdate->_oldModel, @selector(layoutAttributesForGlobalItemIndex:), *(var_A28->_currentUpdate->_newGlobalItemMap + rax * 0x8), *_OBJC_IVAR_$_UICollectionViewUpdate._oldModel) retain];
    rbx = [(r13)(var_A28->_currentUpdate->_oldModel, @selector(indexPathForItemAtGlobalIndex:), *(var_A28->_currentUpdate->_newGlobalItemMap + rax * 0x8), *_OBJC_IVAR_$_UICollectionViewUpdate._oldModel) retain];
    if ((((r13)(var_A28->_currentUpdate->_oldFocusedIndexPath, @selector(isEqual:), rbx, *_OBJC_IVAR_$_UICollectionViewUpdate._oldFocusedIndexPath) == 0x0) || ([var_A28->_currentUpdate->_newFocusedIndexPath isEqual:var_A20] == 0x0)) || (var_A28->_focusedCell == 0x0)) goto loc_982a83;

loc_982ee4:
    rdi = rbx;
    [rdi release];
    [r14 release];
    [var_A20 release];
    r13 = _objc_msgSend;
    r15 = var_A48;
    rbx = var_A38;
    r14 = var_A40;
    goto loc_982f1d;

loc_982f1d:
    [r14 release];
    rbx = rbx + 0x1;
    if (rbx < var_A08) goto loc_982871;

loc_982f36:
    r8 = 0x10;
    rdx = var_830;
    rax = [var_A88 countByEnumeratingWithState:rdx objects:var_3B0 count:r8];
    var_A08 = rax;
    if (rax != 0x0) goto loc_98269d;

loc_982f6e:
    [var_A88 release];
    rax = var_A28->_currentUpdate;
    if (rax->_oldFocusedIndexPath != 0x0) {
            rdx = rax->_newFocusedIndexPath;
            if ((rdx != 0x0) && (var_A28->_focusedCell != 0x0)) {
                    rbx = [rax->_newModel globalIndexForItemAtIndexPath:rdx];
                    if (rbx != 0x7fffffffffffffff) {
                            rax = var_A28->_currentUpdate;
                            if ((rax->_oldFocusedViewType == 0x1) && (rax->_newFocusedViewType == 0x1)) {
                                    rdx = rbx;
                                    if ([var_B88 containsIndex:rdx] == 0x0) {
                                            r14 = [(r13)(var_A28->_currentUpdate->_newModel, @selector(layoutAttributesForGlobalItemIndex:), rbx, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel) retain];
                                            rax = (r13)(@class(UICollectionViewAnimation), @selector(alloc), rbx);
                                            xmm1 = intrinsic_movsd(xmm1, *0xc4f410);
                                            r9 = 0x1;
                                            r8 = r14;
                                            rsp = (rsp - 0x10) + 0x10;
                                            rbx = (r13)(rax, @selector(initWithView:viewType:finalLayoutAttributes:startFraction:endFraction:animateFromCurrentPostion:deleteAfterAnimation:customAnimations:), var_A28->_focusedCell);
                                            rdx = rbx;
                                            (r13)(var_AE0, @selector(addObject:), rdx);
                                            [rbx release];
                                            [r14 release];
                                    }
                            }
                    }
            }
    }
    intrinsic_movaps(var_890, 0x0);
    intrinsic_movaps(var_8A0, 0x0);
    var_8B0 = intrinsic_movaps(var_8B0, 0x0);
    var_8C0 = intrinsic_movaps(var_8C0, 0x0);
    rax = (r13)(var_A28->_currentUpdate->_oldModel, @selector(existingSupplementaryLayoutAttributes), rdx, *_OBJC_IVAR_$_UICollectionViewUpdate._oldModel, r8);
    rax = [rax retain];
    var_A58 = rax;
    r14 = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_8C0, var_430, 0x10);
    if (r14 == 0x0) goto loc_983d13;

loc_983198:
    var_A40 = *var_8B0;
    goto loc_9831b7;

loc_9831b7:
    var_A60 = r14;
    rbx = 0x0;
    goto loc_98339c;

loc_98339c:
    if (*var_8B0 != var_A40) {
            objc_enumerationMutation(var_A58);
    }
    r12 = *(var_8B8 + rbx * 0x8);
    var_A08 = rbx;
    r15 = objc_unsafeClaimAutoreleasedReturnValue((r13)(r12, @selector(indexPath)));
    rbx = 0x7fffffffffffffff;
    if ((r13)(r15, @selector(length)) >= 0x2) {
            rbx = [r15 section];
    }
    rdx = rbx;
    if ([var_A28->_currentUpdate->_deletedSections containsIndex:rdx] != 0x0) goto loc_983ccc;

loc_98344d:
    rcx = *_OBJC_IVAR_$_UICollectionViewUpdate._deletedSections;
    r14 = (r13)(r15, @selector(item), rdx, rcx);
    var_A20 = r12;
    r12 = [(r13)(r12, @selector(_elementKind), rdx, rcx) retain];
    rax = var_A28->_currentUpdate;
    if (rbx != 0x7fffffffffffffff) goto loc_98350a;

loc_98349d:
    rbx = [(r13)(rax->_deletedSupplementaryTopLevelIndexesDict, @selector(objectForKeyedSubscript:), r12, *_OBJC_IVAR_$_UICollectionViewUpdate._deletedSupplementaryTopLevelIndexesDict) retain];
    var_A18 = r15;
    r14 = (r13)(rbx, @selector(containsIndex:), (r13)(r15, @selector(indexAtPosition:), 0x0, rcx), rcx);
    [rbx release];
    r15 = var_A28;
    if (r14 != 0x0) goto loc_983585;

loc_9835a9:
    rdx = r12;
    rax = [r15->_currentUpdate newIndexPathForSupplementaryElementOfKind:rdx oldIndexPath:var_A18];
    rax = [rax retain];
    rbx = var_A20;
    if (rbx != 0x0) {
            var_A48 = rax;
            rdx = @selector(frame);
            objc_msgSend_stret(var_710, rbx, rdx);
    }
    else {
            var_A48 = rax;
            var_700 = intrinsic_movaps(var_700, 0x0);
            var_710 = intrinsic_movaps(var_710, 0x0);
    }
    r14 = [(r13)(rbx, @selector(_elementKind), rdx) retain];
    rbx = (r13)(rbx, @selector(_isDecorationView), rdx);
    rsi = r15->_currentUpdate->_newModel;
    if (rbx == 0x0) goto loc_98370f;

loc_9836f6:
    if (rsi == 0x0) goto loc_9839a6;

loc_9836ff:
    rdi = var_8E0;
    rdx = @selector(rectForDecorationElementOfKind:atIndexPath:);
    goto loc_983726;

loc_983726:
    objc_msgSend_stret(rdi, rsi, rdx);
    goto loc_9839b7;

loc_9839b7:
    var_A90 = r12;
    CGRectUnion(var_920, rsi);
    rsp = ((rsp - 0x40) + 0x40 - 0x40) + 0x40;
    r12 = r14;
    if (CGRectIntersectsRect(var_920, rsi) != 0x0) {
            r14 = [[r15 _visibleSupplementaryViewOfKind:r12 atIndexPath:var_A18 isDecorationView:rbx & 0xff] retain];
            rdi = r15->_currentUpdate->_newModel;
            r15 = r13;
            if (rbx != 0x0) {
                    rsi = @selector(layoutAttributesForDecorationViewOfKind:atIndexPath:);
            }
            else {
                    rsi = @selector(layoutAttributesForSupplementaryElementOfKind:atIndexPath:);
            }
            rax = _objc_msgSend(rdi, rsi);
            rax = [rax retain];
            rax = [rax retain];
            var_A18 = rax;
            [rax release];
            r13 = r14;
            if (r14 == 0x0) {
                    if (([var_A20 isHidden] == 0x0) || ([var_A18 isHidden] == 0x0)) {
                            r9 = 0x1;
                            r13 = [var_A28 _createPreparedSupplementaryViewForElementOfKind:r12 atIndexPath:var_A48 withLayoutAttributes:var_A20 applyAttributes:r9];
                            [r14 release];
                            if (rbx != 0x0) {
                                    rdi = var_AF0;
                            }
                            else {
                                    rdi = var_AE8;
                            }
                            rbx = [(r15)(rdi) retain];
                            (r15)(rbx, @selector(setObject:forKey:), r13, var_A48);
                            [rbx release];
                            if (r13 != 0x0) {
                                    rsp = (rsp - 0x30) + 0x30;
                                    rbx = [(r15)(var_A28, @selector(_doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:), r13, var_A20, var_A28->_layout, var_A18, var_A28->_layout, 0x0, 0x0, 0x1, 0x2) retain];
                                    (r15)(var_AE0, @selector(addObjectsFromArray:), rbx, var_A20);
                                    rdi = rbx;
                                    [rdi release];
                                    [r13 release];
                            }
                    }
            }
            else {
                    rsp = (rsp - 0x30) + 0x30;
                    rbx = [(r15)(var_A28, @selector(_doubleSidedAnimationsForView:withStartingLayoutAttributes:startingLayout:endingLayoutAttributes:endingLayout:withAnimationSetup:animationCompletion:enableCustomAnimations:customAnimationsType:), r13, var_A20, var_A28->_layout, var_A18, var_A28->_layout, 0x0, 0x0, 0x1, 0x2) retain];
                    (r15)(var_AE0, @selector(addObjectsFromArray:), rbx, var_A20);
                    rdi = rbx;
                    [rdi release];
                    [r13 release];
            }
            [var_A18 release];
            r13 = r15;
    }
    [r12 release];
    [var_A48 release];
    r12 = var_A90;
    goto loc_983cbc;

loc_983cbc:
    [r12 release];
    r14 = var_A60;
    goto loc_983ccc;

loc_983ccc:
    rbx = var_A08 + 0x1;
    if (rbx < r14) goto loc_98339c;

loc_983cdf:
    r14 = [var_A58 countByEnumeratingWithState:var_8C0 objects:var_430 count:0x10];
    if (r14 != 0x0) goto loc_9831b7;

loc_983d13:
    var_BB8 = var_BB8 + *_OBJC_IVAR_$_UICollectionView._visibleDecorationViewsDict;
    [var_A58 release];
    rbx = [var_A28 retain];
    var_A58 = rbx;
    var_958 = rbx;
    rax = [var_AF0 retain];
    var_AC0 = rax;
    var_950 = rax;
    rax = [var_AE8 retain];
    var_AC8 = rax;
    var_948 = rax;
    var_A78 = objc_retainBlock(__NSConcreteStackBlock);
    rbx = [rbx->_currentUpdate->_newModel numberOfSections];
    var_AA8 = rbx;
    if (rbx > 0x0) {
            r15 = 0x0;
            do {
                    var_A60 = r15;
                    if ([var_A58->_currentUpdate->_insertedSections containsIndex:r15] == 0x0) {
                            rax = (r13)(var_A58->_currentUpdate->_newModel, @selector(existingSupplementaryLayoutAttributesInSection:), r15, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel);
                            rax = [rax retain];
                            var_990 = intrinsic_movaps(var_990, 0x0);
                            var_9A0 = intrinsic_movaps(var_9A0, 0x0);
                            var_9B0 = intrinsic_movaps(var_9B0, 0x0);
                            var_9C0 = intrinsic_movaps(var_9C0, 0x0);
                            rax = [rax retain];
                            var_A70 = rax;
                            rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_9C0, var_4B0, 0x10);
                            var_A18 = rax;
                            if (rax != 0x0) {
                                    var_A68 = *var_9B0;
                                    do {
                                            r13 = 0x0;
                                            do {
                                                    if (*var_9B0 != var_A68) {
                                                            objc_enumerationMutation(var_A70);
                                                    }
                                                    var_A10 = *(var_9B8 + r13 * 0x8);
                                                    r12 = [[*(var_9B8 + r13 * 0x8) indexPath] retain];
                                                    var_A00 = r12;
                                                    r14 = [[*(var_9B8 + r13 * 0x8) _elementKind] retain];
                                                    var_A08 = r14;
                                                    r15 = [[var_A58->_currentUpdate->_insertedSupplementaryIndexesSectionArray objectAtIndexedSubscript:r15] retain];
                                                    r14 = [[r15 objectForKey:r14] retain];
                                                    rsi = @selector(containsIndex:);
                                                    rdx = [r12 item];
                                                    r12 = _objc_msgSend(r14, rsi);
                                                    [r14 release];
                                                    [r15 release];
                                                    if (r12 != 0x0) {
                                                            rsi = var_A10;
                                                            rbx = [(*(var_A78 + 0x10))(var_A78, rsi) retain];
                                                            if (rbx != 0x0) {
                                                                    rsi = @selector(addObject:);
                                                                    rdx = rbx;
                                                                    _objc_msgSend(var_AE0, rsi);
                                                            }
                                                            [rbx release];
                                                    }
                                                    [var_A08 release];
                                                    [var_A00 release];
                                                    r13 = r13 + 0x1;
                                                    r15 = var_A60;
                                            } while (r13 < var_A18);
                                            rax = [var_A70 countByEnumeratingWithState:var_9C0 objects:var_4B0 count:0x10];
                                            var_A18 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_A70 release];
                            [var_A70 release];
                            r13 = _objc_msgSend;
                            rbx = var_AA8;
                    }
                    r15 = r15 + 0x1;
            } while (r15 != rbx);
    }
    r15 = [var_A58 retain];
    var_A00 = [var_A78 retain];
    r12 = [var_AE0 retain];
    [var_A58->_currentUpdate->_insertedSupplementaryTopLevelIndexesDict enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._visibleCellsDict + r15, var_BC0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._visibleSupplementaryViewsDict + r15, var_BD8);
    objc_storeStrong(var_BB8, var_BC8);
    r14 = [r12 retain];
    [r12 release];
    [var_A78 release];
    [r15 release];
    [var_A00 release];
    [var_948 release];
    [var_950 release];
    [var_958 release];
    [var_A88 release];
    [var_B48 release];
    [var_638 release];
    [var_640 release];
    [var_648 release];
    [var_B40 release];
    [var_560 release];
    [var_568 release];
    [var_B88 release];
    [var_B58 release];
    [r14 release];
    [var_510 release];
    [var_518 release];
    [var_4E0 release];
    [var_4E8 release];
    [var_AC0 release];
    [var_AC8 release];
    [var_BA8 release];
    [var_BD0 release];
    [var_4B8 release];
    [var_B38 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rdi = r14;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_9839a6:
    var_8D0 = intrinsic_movaps(var_8D0, 0x0);
    var_8E0 = intrinsic_movaps(var_8E0, 0x0);
    goto loc_9839b7;

loc_98370f:
    if (rsi == 0x0) goto loc_9839a6;

loc_983718:
    rdi = var_8E0;
    rdx = @selector(rectForSupplementaryElementOfKind:atIndexPath:);
    goto loc_983726;

loc_983585:
    rbx = var_A20;
    if (rbx != 0x0) {
            [var_710 frame];
    }
    else {
            var_700 = intrinsic_movaps(var_700, 0x0);
            var_710 = intrinsic_movaps(var_710, 0x0);
    }
    r13 = [rbx _isDecorationView];
    rdi = r15->_layout;
    if (r13 != 0x0) {
            rsi = @selector(finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:);
    }
    else {
            rsi = @selector(finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:);
    }
    r14 = [[_objc_msgSend(rdi, rsi) retain] retain];
    [r14 release];
    if (r14 != 0x0) {
            rsi = r14;
            [var_900 frame];
    }
    else {
            var_8F0 = intrinsic_movaps(var_8F0, 0x0);
            var_900 = intrinsic_movaps(var_900, 0x0);
    }
    CGRectUnion(var_8E0, rsi);
    stack[2046] = var_8C8;
    stack[2045] = var_8D0;
    rsp = ((rsp - 0x40) + 0x40 - 0x40) + 0x40;
    if (CGRectIntersectsRect(var_8E0, rsi) != 0x0) {
            r15 = var_A28;
            rcx = [[r15 _visibleSupplementaryViewOfKind:r12 atIndexPath:var_A18 isDecorationView:r13 & 0xff] retain];
            if (rcx != 0x0) {
                    rbx = [[r15->_layout _animationForReusableView:rcx toLayoutAttributes:r14 type:0x2] retain];
                    var_A90 = rbx;
                    rax = [UICollectionViewAnimation alloc];
                    xmm1 = intrinsic_movsd(xmm1, *0xc4f410, rcx, 0x2, r14, 0x1, 0x1, rbx);
                    rax = [rax initWithView:rcx viewType:r14 finalLayoutAttributes:0x2 startFraction:r9 endFraction:stack[2045] animateFromCurrentPostion:stack[2046] deleteAfterAnimation:stack[2047] customAnimations:stack[2048]];
                    rsp = (rsp - 0x10) + 0x10;
                    var_AF8 = rax;
                    [var_AE0 addObject:rax];
                    rbx = [[r15 _visibleViewDictForElementCategory:[var_A20 representedElementCategory] elementKind:r12] retain];
                    [rbx removeObjectForKey:var_A18];
                    rdi = rbx;
                    [rdi release];
                    [var_AF8 release];
                    [var_A90 release];
                    rcx = rcx;
            }
            [rcx release];
    }
    [r14 release];
    r13 = _objc_msgSend;
    goto loc_983cbc;

loc_98350a:
    var_A18 = r15;
    r15 = [(r13)(rax->_deletedSupplementaryIndexesSectionArray, @selector(objectAtIndexedSubscript:), rbx, *_OBJC_IVAR_$_UICollectionViewUpdate._deletedSupplementaryIndexesSectionArray) retain];
    rbx = [(r13)(r15, @selector(objectForKey:), r12, rcx) retain];
    r14 = (r13)(rbx, @selector(containsIndex:), r14, rcx);
    rdi = rbx;
    [rdi release];
    rdi = r15;
    r15 = var_A28;
    [rdi release];
    if (r14 == 0x0) goto loc_9835a9;
    goto loc_983585;

loc_982a83:
    r15 = r14;
    if (r14 != 0x0) goto loc_982b8b;

loc_982a8f:
    rdx = rbx;
    r12 = rbx;
    r13 = [[var_A28->_visibleCellsDict objectForKeyedSubscript:rdx] retain];
    r14 = [[r13 _layoutAttributes] retain];
    [r15 release];
    [r13 release];
    rbx = r12;
    r15 = r14;
    if (r14 != 0x0) goto loc_982b8b;

loc_982aff:
    r12 = [[var_A28->_currentUpdate->_newModel indexPathForItemAtGlobalIndex:var_A30] retain];
    r15 = [[var_A28->_layout initialLayoutAttributesForAppearingItemAtIndexPath:r12] retain];
    rdi = r14;
    r14 = rbx;
    [rdi release];
    [r12 release];
    rbx = r14;
    if (r15 == 0x0) goto loc_9827ff;

loc_982b8b:
    r12 = var_A00;
    r13 = var_A30;
    goto loc_982b99;

loc_982b99:
    r14 = r15;
    rsi = r14;
    [var_860 frame];
    goto loc_982bb2;

loc_982bb2:
    if (r12 != 0x0) {
            rsi = r12;
            [var_880 frame];
    }
    else {
            var_870 = intrinsic_movaps(var_870, 0x0);
            var_880 = intrinsic_movaps(var_880, 0x0);
    }
    CGRectUnion(var_710, rsi);
    rsp = ((rsp - 0x40) + 0x40 - 0x40) + 0x40;
    if (CGRectIntersectsRect(var_710, rsi) != 0x0) {
            var_A70 = r14;
            r14 = [[var_A28->_visibleCellsDict objectForKeyedSubscript:rbx] retain];
            if ((r14 == 0x0) && ((([r15 isHidden] == 0x0) || ([r12 isHidden] == 0x0)))) {
                    r8 = 0x1;
                    var_AA8 = rbx;
                    r13 = [var_A28 _createPreparedCellForItemAtIndexPath:var_A20 withLayoutAttributes:var_A70 applyAttributes:r8];
                    [r14 release];
                    [var_BA8 setObject:r13 forKeyedSubscript:var_A20];
                    rbx = var_AA8;
                    r14 = r13;
                    r13 = var_A30;
            }
            if (r14 != 0x0) {
                    var_AA8 = rbx;
                    r9 = r12;
                    rsp = (rsp - 0x30) + 0x30;
                    r12 = [[var_A28 _doubleSidedAnimationsForView:r14 withStartingLayoutAttributes:var_A70 startingLayout:r8 endingLayoutAttributes:r9 endingLayout:var_A28->_layout withAnimationSetup:0x0 animationCompletion:0x0 enableCustomAnimations:0x1 customAnimationsType:0x2] retain];
                    [var_AE0 addObjectsFromArray:r12];
                    [r12 release];
                    if ([var_B88 containsIndex:r13] != 0x0) {
                            r12 = ___UILogGetCategoryCachedImpl("Assert", __viewAnimationsForCurrentUpdate.__s_category.1934);
                            if (os_log_type_enabled(*(r12 + 0x8), 0x10) != 0x0) {
                                    rbx = rsp;
                                    rax = rsp;
                                    *(int8_t *)(rax + 0xfffffffffffffff0) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff1) = 0x1;
                                    *(int8_t *)(rax + 0xfffffffffffffff2) = 0x0;
                                    *(int8_t *)(rax + 0xfffffffffffffff3) = 0x8;
                                    *(rax + 0xfffffffffffffff4) = r13;
                                    _os_log_impl(0xffffffffff67d159, *(r12 + 0x8), 0x10, "attempt to create two animations for new global item index %ld", rax + 0xfffffffffffffff0, 0xc);
                                    rsp = rbx;
                            }
                    }
                    [var_B88 addIndex:r13];
                    rbx = var_AA8;
            }
            [r14 release];
            r14 = var_A70;
    }
    goto loc_982ee4;

loc_9827ff:
    r14 = rbx;
    r12 = var_A00;
    rdi = r15;
    r15 = [r12 copy];
    [rdi release];
    rsi = @selector(setAlpha:);
    _objc_msgSend(r15, rsi);
    if (r15 == 0x0) goto loc_98284e;

loc_98283f:
    r13 = var_A30;
    rbx = r14;
    goto loc_982b99;

loc_98284e:
    var_850 = intrinsic_movaps(var_850, 0x0);
    var_860 = intrinsic_movaps(var_860, 0x0);
    r13 = var_A30;
    rbx = r14;
    r14 = 0x0;
    goto loc_982bb2;
}

int ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke(int arg0, int arg1, int arg2, int arg3) {
    var_68 = [arg1 retain];
    rbx = [arg2 retain];
    var_40 = [*(arg0 + 0x20) retain];
    var_38 = rbx;
    r14 = [rbx retain];
    [arg1 enumerateKeysAndObjectsUsingBlock:__NSConcreteStackBlock];
    [var_68 release];
    [var_38 release];
    [var_40 release];
    rax = [r14 release];
    return rax;
}

void ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke_2(int arg0, int arg1, int arg2) {
    r14 = arg2;
    rbx = arg1;
    r15 = arg0;
    if (*(r15 + 0x30) == 0x0) goto loc_984515;

loc_9844d6:
    if ([rbx length] != 0x1) goto loc_984582;

loc_9844f0:
    rdi = *(r15 + 0x28);
    rdx = r14;
    rcx = rbx;
    [rdi setObject:rdx forKeyedSubscript:rcx];
    return;

.l1:
    return;

loc_984582:
    r12 = *(*(r15 + 0x20)->_currentUpdate->_oldSectionMap + [rbx section] * 0x8);
    if (r12 != 0x7fffffffffffffff) goto loc_9845c7;
    goto .l1;

loc_9845c7:
    rax = [rbx item];
    rax = [NSIndexPath indexPathForItem:rax inSection:r12];
    goto loc_9845f9;

loc_9845f9:
    rbx = [rax retain];
    [*(r15 + 0x28) setObject:r14 forKeyedSubscript:rbx];
    rdi = rbx;
    [rdi release];
    return;

loc_984515:
    rdx = rbx;
    rax = [*(r15 + 0x20)->_currentUpdate->_oldModel globalIndexForItemAtIndexPath:rdx];
    rcx = *(r15 + 0x20)->_currentUpdate;
    if (*(rcx->_oldGlobalItemMap + rax * 0x8) == 0x7fffffffffffffff) goto .l1;

loc_984561:
    rax = [rcx->_newModel indexPathForItemAtGlobalIndex:rdx];
    goto loc_9845f9;
}

void ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1907(int arg0, int arg1, int arg2) {
    rbx = [[NSMutableDictionary alloc] init];
    [*(arg0 + 0x20) setObject:rbx forKeyedSubscript:arg1];
    (*(*(arg0 + 0x28) + 0x10))(*(arg0 + 0x28), arg2, rbx, 0x1);
    rdi = rbx;
    [rdi release];
    return;
}

void ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1911(int arg0, int arg1, int arg2) {
    rbx = [[NSMutableDictionary alloc] init];
    [*(arg0 + 0x20) setObject:rbx forKeyedSubscript:arg1];
    (*(*(arg0 + 0x28) + 0x10))(*(arg0 + 0x28), arg2, rbx, 0x2);
    rdi = rbx;
    [rdi release];
    return;
}

int ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1916(int arg0, int arg1) {
    r13 = arg0;
    rbx = [[*(r13 + 0x20)->_currentUpdate->_oldModel indexPathForItemAtGlobalIndex:arg1] retain];
    r15 = [[*(r13 + 0x20)->_visibleCellsDict objectForKeyedSubscript:rbx] retain];
    if (r15 != 0x0) {
            rdx = rbx;
            r12 = [[*(r13 + 0x20)->_layout finalLayoutAttributesForDisappearingItemAtIndexPath:rdx] retain];
            var_30 = rbx;
            if (r12 == 0x0) {
                    rbx = [[r15 _layoutAttributes] retain];
                    var_38 = [rbx copy];
                    [r12 release];
                    [rbx release];
                    [var_38 setAlpha:rdx];
                    r12 = var_38;
            }
            rbx = [[*(r13 + 0x20)->_layout _animationForReusableView:r15 toLayoutAttributes:r12 type:0x2] retain];
            var_40 = rbx;
            rax = [UICollectionViewAnimation alloc];
            intrinsic_movsd(xmm1, *0xc4f410);
            rax = [rax initWithView:r15 viewType:0x1 finalLayoutAttributes:r12 startFraction:0x1 endFraction:0x1 animateFromCurrentPostion:rbx deleteAfterAnimation:stack[2039] customAnimations:stack[2040]];
            r14 = rax;
            [*(r13 + 0x20)->_visibleCellsDict removeObjectForKey:var_30, *_OBJC_IVAR_$_UICollectionView._visibleCellsDict];
            [*(r13 + 0x28) addObject:r14, *_OBJC_IVAR_$_UICollectionView._visibleCellsDict];
            [r14 release];
            [var_40 release];
            [r12 release];
            rbx = var_30;
            r15 = r15;
    }
    [r15 release];
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1922(int arg0, int arg1) {
    r13 = arg0;
    rbx = [[*(r13 + 0x20)->_currentUpdate->_newModel indexPathForItemAtGlobalIndex:arg1] retain];
    var_A0 = rbx;
    rax = [*(r13 + 0x20)->_layout initialLayoutAttributesForAppearingItemAtIndexPath:rbx];
    rax = [rax retain];
    var_98 = rax;
    rdx = rbx;
    r12 = [[*(r13 + 0x20)->_currentUpdate->_newModel layoutAttributesForItemAtIndexPath:rdx] retain];
    if (rax == 0x0) goto loc_984b4b;

loc_984b42:
    rbx = var_98;
    goto loc_984b88;

loc_984b88:
    rsi = var_98;
    [var_70 frame];
    goto loc_984b9f;

loc_984b9f:
    if (r12 != 0x0) {
            var_A8 = rbx;
            rsi = r12;
            [var_90 frame];
    }
    else {
            var_A8 = rbx;
            var_80 = intrinsic_movaps(var_80, 0x0);
            var_90 = intrinsic_movaps(var_90, 0x0);
    }
    CGRectUnion(var_48, rsi);
    stack[2020] = *(r13 + 0x50);
    stack[2019] = *(r13 + 0x48);
    if ((CGRectIntersectsRect(var_48, rsi) != 0x0) && ((([var_98 isHidden] == 0x0) || ([r12 isHidden] == 0x0)))) {
            r15 = [*(r13 + 0x20) _createPreparedCellForItemAtIndexPath:var_A0 withLayoutAttributes:var_A8 applyAttributes:0x1];
            var_A8 = r15;
            rbx = [[*(r13 + 0x20)->_currentUpdate->_newModel layoutAttributesForItemAtIndexPath:var_A0] retain];
            [r12 release];
            r15 = [[*(r13 + 0x20)->_layout _animationForReusableView:r15 toLayoutAttributes:rbx type:0x2] retain];
            rax = [UICollectionViewAnimation alloc];
            intrinsic_movsd(xmm1, *0xc4f410);
            r14 = [rax initWithView:var_A8 viewType:0x1 finalLayoutAttributes:rbx startFraction:0x0 endFraction:0x0 animateFromCurrentPostion:r15 deleteAfterAnimation:stack[2019] customAnimations:stack[2020]];
            [*(r13 + 0x28) addObject:r14];
            [*(r13 + 0x30) setObject:var_A8 forKey:var_A0];
            rdi = r14;
            [rdi release];
            [r15 release];
            [var_A8 release];
            r12 = rbx;
    }
    [r12 release];
    [var_98 release];
    rax = [var_A0 release];
    return rax;

loc_984b4b:
    rbx = [r12 copy];
    [var_98 release];
    rsi = @selector(setAlpha:);
    _objc_msgSend(rbx, rsi, rdx, *_OBJC_IVAR_$_UICollectionViewUpdate._newModel);
    if (rbx == 0x0) goto loc_984e2b;

loc_984b81:
    var_98 = rbx;
    goto loc_984b88;

loc_984e2b:
    var_60 = intrinsic_movaps(var_60, 0x0);
    var_70 = intrinsic_movaps(var_70, 0x0);
    var_98 = rbx;
    rbx = 0x0;
    goto loc_984b9f;
}

int ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1947(int arg0, int arg1) {
    r13 = arg0;
    r12 = [arg1 retain];
    r15 = [r12 _isDecorationView];
    rbx = [[r12 _elementKind] retain];
    rax = [r12 indexPath];
    rax = [rax retain];
    rdi = *(r13 + 0x20)->_layout;
    if (r15 != 0x0) {
            rsi = @selector(initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:);
    }
    else {
            rsi = @selector(initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:);
    }
    var_A0 = rax;
    rax = _objc_msgSend(rdi, rsi);
    rax = [rax retain];
    if (rax != 0x0) {
            rsi = rax;
            var_A8 = rax;
            [var_70 frame];
    }
    else {
            var_A8 = rax;
            var_60 = intrinsic_movaps(var_60, 0x0);
            var_70 = intrinsic_movaps(var_70, 0x0);
    }
    if (r12 != 0x0) {
            var_98 = rbx;
            rsi = r12;
            [var_90 frame];
    }
    else {
            var_98 = rbx;
            var_80 = intrinsic_movaps(var_80, 0x0);
            var_90 = intrinsic_movaps(var_90, 0x0);
    }
    CGRectUnion(var_48, rsi);
    stack[2018] = *(r13 + 0x50);
    stack[2017] = *(r13 + 0x48);
    r14 = 0x0;
    if (CGRectIntersectsRect(var_48, rsi) != 0x0) {
            rbx = var_98;
            r14 = var_A0;
            var_B0 = [*(r13 + 0x20) _createPreparedSupplementaryViewForElementOfKind:rbx atIndexPath:r14 withLayoutAttributes:var_A8 applyAttributes:0x1];
            if (r15 != 0x0) {
                    rdi = *(r13 + 0x28);
            }
            else {
                    rdi = *(r13 + 0x30);
            }
            rbx = [[rdi objectForKeyedSubscript:rbx] retain];
            [rbx setObject:var_B0 forKey:r14];
            [rbx release];
            rax = [r12 zIndex];
            rbx = var_B0;
            [*(r13 + 0x20) _addControlledSubview:rbx atZIndex:rax];
            r14 = 0x0;
            if (rbx != 0x0) {
                    rdi = *(r13 + 0x20)->_layout;
                    r13 = rbx;
                    rbx = [[rdi _animationForReusableView:r13 toLayoutAttributes:r12 type:0x2] retain];
                    rax = [UICollectionViewAnimation alloc];
                    intrinsic_movsd(xmm1, *0xc4f410);
                    r14 = [rax initWithView:r13 viewType:0x2 finalLayoutAttributes:r12 startFraction:0x0 endFraction:0x0 animateFromCurrentPostion:rbx deleteAfterAnimation:stack[2017] customAnimations:stack[2018]];
                    [rbx release];
                    [r13 release];
            }
    }
    [var_A8 release];
    [var_A0 release];
    [var_98 release];
    [r12 release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;
}

void ___51-[UICollectionView _viewAnimationsForCurrentUpdate]_block_invoke.1952(int arg0, int arg1, int arg2) {
    var_50 = arg2;
    var_38 = arg1;
    r12 = arg0;
    r14 = [arg2 firstIndex];
    if (r14 != 0x7fffffffffffffff) {
            do {
                    var_30 = r14;
                    rax = [*(r12 + 0x20)->_currentUpdate->_newModel knownDecorationElementKinds];
                    rax = [rax retain];
                    var_40 = rax;
                    rbx = [rax containsObject:var_38];
                    rax = [NSIndexPath indexPathWithIndex:var_30];
                    rax = [rax retain];
                    rdi = *(r12 + 0x20)->_currentUpdate->_newModel;
                    if (rbx != 0x0) {
                            rbx = r12;
                            rsi = @selector(layoutAttributesForDecorationViewOfKind:atIndexPath:);
                    }
                    else {
                            rbx = r12;
                            rsi = @selector(layoutAttributesForSupplementaryElementOfKind:atIndexPath:);
                    }
                    var_48 = rax;
                    r15 = [_objc_msgSend(rdi, rsi) retain];
                    r14 = var_30;
                    r13 = var_40;
                    r12 = [(*(*(rbx + 0x28) + 0x10))(*(rbx + 0x28), r15) retain];
                    if (r12 != 0x0) {
                            [*(rbx + 0x30) addObject:r12];
                    }
                    r14 = [var_50 indexGreaterThanIndex:r14];
                    rdi = r12;
                    [rdi release];
                    [r15 release];
                    [var_48 release];
                    [r13 release];
                    r12 = rbx;
            } while (r14 != 0x7fffffffffffffff);
    }
    return;
}

void -[UICollectionView _updateWithItems:tentativelyForReordering:animator:](void * self, void * _cmd, void * arg2, bool arg3, void * arg4) {
    var_790 = arg3;
    var_818 = _cmd;
    var_850 = [arg2 retain];
    var_848 = [arg4 retain];
    r13 = [self retain];
    var_3B8 = r13;
    var_7D0 = objc_retainBlock(__NSConcreteStackBlock);
    if (r13->_firstResponderView == 0x0) goto loc_985c45;

loc_985550:
    var_7D8 = r13;
    intrinsic_movaps(var_3F0, 0x0);
    intrinsic_movaps(var_400, 0x0);
    var_410 = intrinsic_movaps(var_410, 0x0);
    var_420 = intrinsic_movaps(var_420, 0x0);
    rax = [var_850 retain];
    var_7B0 = rax;
    r14 = [rax countByEnumeratingWithState:var_420 objects:var_B0 count:0x10];
    if (r14 == 0x0) goto loc_985b7c;

loc_9855ba:
    r15 = *var_410;
    var_7E0 = r15;
    goto loc_9855d9;

loc_9855d9:
    var_7B8 = r14;
    rbx = 0x0;
    goto loc_985698;

loc_985698:
    if (*var_410 != r15) {
            objc_enumerationMutation(var_7B0);
    }
    var_760 = @selector(updateAction);
    r12 = *(var_418 + rbx * 0x8);
    if (_objc_msgSend(r12, var_760) != 0x1) goto loc_985b3c;

loc_9856d5:
    var_770 = rbx;
    r15 = r13;
    rbx = [[r15 window] retain];
    var_740 = [[rbx firstResponder] retain];
    [rbx release];
    var_750 = [r15->_firstResponderView retain];
    r14 = *_OBJC_IVAR_$_UICollectionView._firstResponderIndexPath;
    rbx = [*(r15 + r14) retain];
    r15 = [r12 _isSectionOperation];
    r12 = [[r12 _indexPath] retain];
    if (r15 == 0x0) goto loc_985925;

loc_985782:
    var_788 = rbx;
    r15 = [r12 section];
    rdi = *(var_7D8 + r14);
    r14 = var_7D8;
    rbx = [rdi section];
    [r12 release];
    COND = r15 != rbx;
    rbx = var_788;
    r15 = var_740;
    if (COND) goto loc_985b07;

loc_9857d3:
    r12 = [r15 resignFirstResponder];
    if (r14->_firstResponderView == 0x0) goto loc_985b07;

loc_9857f8:
    rdx = "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m";
    rbx = [[NSString stringWithUTF8String:rdx] retain];
    rdi = @"<Unknown File>";
    if (rbx != 0x0) {
            rdi = rbx;
    }
    var_820 = [rdi retain];
    [rbx release];
    var_828 = [[NSAssertionHandler currentHandler] retain];
    rbx = @"NO";
    if (r12 != 0x0) {
            rbx = @"YES";
    }
    rax = [r14 window];
    rax = [rax retain];
    var_830 = rax;
    rax = [rax firstResponder];
    rax = [rax retain];
    var_838 = rax;
    rbx = var_788;
    stack[1773] = @"Attempt to delete section containing first responder that refused to resign.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing vi…";
    r9 = 0x17e2;
    goto loc_985ab3;

loc_985ab3:
    [var_828 handleFailureInMethod:rdx object:rcx file:var_820 lineNumber:r9 description:stack[1773]];
    [var_820 release];
    [var_838 release];
    [var_830 release];
    [var_828 release];
    r15 = var_740;
    goto loc_985b07;

loc_985b07:
    r13 = r14;
    rdi = rbx;
    [rdi release];
    [var_750 release];
    [r15 release];
    r15 = var_7E0;
    r14 = var_7B8;
    rbx = var_770;
    goto loc_985b3c;

loc_985b3c:
    rbx = rbx + 0x1;
    if (rbx < r14) goto loc_985698;

loc_985b48:
    rcx = var_B0;
    r14 = [var_7B0 countByEnumeratingWithState:var_420 objects:rcx count:0x10];
    if (r14 != 0x0) goto loc_9855d9;

loc_985b7c:
    [var_7B0 release];
    rax = r13->_firstResponderViewType;
    if (rax == 0x2) goto loc_985bbd;

loc_985b9b:
    if (rax != 0x1) goto loc_985c2a;

loc_985ba5:
    rax = (*(var_7D0 + 0x10))(var_7D0, r13->_firstResponderIndexPath);
    goto loc_985c16;

loc_985c16:
    rax = [rax retain];
    rdi = r13->_firstResponderIndexPath;
    r13->_firstResponderIndexPath = rax;
    goto loc_985c3f;

loc_985c3f:
    [rdi release];
    goto loc_985c45;

loc_985c45:
    r12 = [r13 retain];
    var_428 = r12;
    var_7E0 = objc_retainBlock(__NSConcreteStackBlock);
    *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r12 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    r12->_collectionViewFlags = 0xefffffffffffffff & r12->_collectionViewFlags;
    if (r12->_focusedCellIndexPath != 0x0) {
            var_798 = r12;
            var_7C0 = [r12->_focusedCell retain];
            intrinsic_movaps(var_460, 0x0);
            intrinsic_movaps(var_470, 0x0);
            var_480 = intrinsic_movaps(var_480, 0x0);
            var_490 = intrinsic_movaps(var_490, 0x0);
            rax = [var_850 retain];
            var_740 = rax;
            r14 = [rax countByEnumeratingWithState:var_490 objects:var_130 count:0x10];
            if (r14 != 0x0) {
                    r12 = *var_480;
                    var_7A0 = r12;
                    do {
                            var_750 = r14;
                            r13 = @selector(updateAction);
                            var_760 = r13;
                            r15 = 0x0;
                            do {
                                    if (*var_480 != r12) {
                                            objc_enumerationMutation(var_740);
                                    }
                                    rbx = *(var_488 + r15 * 0x8);
                                    if (_objc_msgSend(rbx, r13) == 0x1) {
                                            r13 = [rbx _isSectionOperation];
                                            rdi = rbx;
                                            r12 = [[rdi _indexPath] retain];
                                            if (r13 != 0x0) {
                                                    r13 = [r12 section];
                                                    rbx = [var_798->_focusedCellIndexPath section];
                                                    [r12 release];
                                                    COND = r13 == rbx;
                                                    r12 = var_7A0;
                                                    r14 = var_750;
                                                    r13 = var_760;
                                                    if (COND) {
                                                            (*(var_7E0 + 0x10))(var_7E0);
                                                    }
                                            }
                                            else {
                                                    rbx = [r12 isEqual:var_798->_focusedCellIndexPath];
                                                    [r12 release];
                                                    r12 = var_7A0;
                                                    r14 = var_750;
                                                    r13 = var_760;
                                                    if (rbx != 0x0) {
                                                            (*(var_7E0 + 0x10))(var_7E0);
                                                    }
                                            }
                                    }
                                    r15 = r15 + 0x1;
                            } while (r15 < r14);
                            r14 = [var_740 countByEnumeratingWithState:var_490 objects:var_130 count:0x10];
                    } while (r14 != 0x0);
            }
            [var_740 release];
            r12 = var_798;
            if ((var_7C0 != 0x0) && (r12->_focusedCell == 0x0)) {
                    [r12 _reusePreviouslyFocusedManagedSubviewIfNeeded:var_7C0];
            }
            if (!(BIT_TEST(r12->_collectionViewFlags, 0x3c))) {
                    rax = r12->_focusedViewType;
                    if (rax != 0x2) {
                            if (rax == 0x1) {
                                    rbx = [(*(var_7D0 + 0x10))(var_7D0, r12->_focusedCellIndexPath) retain];
                                    [r12 _setFocusedCellIndexPath:rbx];
                                    [rbx release];
                                    r12->_currentUpdate->_newFocusedIndexPath = [[r12 _focusedCellIndexPath] retain];
                                    [r12->_currentUpdate->_newFocusedIndexPath release];
                            }
                    }
                    else {
                            rbx = [[NSIndexPath indexPathForRow:0x7fffffffffffffff inSection:*(r12->_currentUpdate->_oldSectionMap + [r12->_focusedCellIndexPath section] * 0x8)] retain];
                            [r12 _setFocusedCellIndexPath:rbx];
                            r13 = r12;
                            [rbx release];
                            r13->_currentUpdate->_newFocusedIndexPath = [[r13 _focusedCellIndexPath] retain];
                            [r13->_currentUpdate->_newFocusedIndexPath release];
                            r12 = r13;
                    }
            }
            if ([r12 _indexPathIsValid:r12->_focusedCellIndexPath] == 0x0) {
                    r12->_focusedCellIndexPath = 0x0;
                    [r12->_focusedCellIndexPath release];
                    r12->_currentUpdate->_newFocusedIndexPath = 0x0;
                    [r12->_currentUpdate->_newFocusedIndexPath release];
            }
            [var_7C0 release];
    }
    r12->_pendingSelectionIndexPath = [(*(var_7D0 + 0x10))(var_7D0, r12->_pendingSelectionIndexPath) retain];
    [r12->_pendingSelectionIndexPath release];
    r14 = r12;
    rax = [var_7D0 retain];
    var_7C8 = rax;
    var_498 = rax;
    rbx = objc_retainBlock(__NSConcreteStackBlock);
    var_810 = rbx;
    r14->_indexPathsForSelectedItems = [(*(rbx + 0x10))(rbx, r14->_indexPathsForSelectedItems) retain];
    [r14->_indexPathsForSelectedItems release];
    r14->_indexPathsForHighlightedItems = [(*(rbx + 0x10))(rbx, r14->_indexPathsForHighlightedItems) retain];
    [r14->_indexPathsForHighlightedItems release];
    r14->_pendingDeselectionIndexPaths = [(*(rbx + 0x10))(rbx, r14->_pendingDeselectionIndexPaths) retain];
    [r14->_pendingDeselectionIndexPaths release];
    r13 = _objc_msgSend;
    [r14 _prepareLayoutForUpdates];
    [r14->_currentUpdate _computeSupplementaryUpdates];
    var_740 = [[UIViewAnimationContext alloc] initWithCompletionHandler:r14->_updateCompletionHandler];
    r14->_updateCompletionHandler = 0x0;
    [r14->_updateCompletionHandler release];
    [r14->_invalidatedItemIndexPaths removeAllObjects];
    [r14->_invalidatedSupplementaryIndexPaths removeAllObjects];
    [r14->_invalidatedDecorationIndexPaths removeAllObjects];
    xmm0 = intrinsic_movsd(0x0, r14->_currentUpdate->_newVisibleBounds);
    xmm1 = intrinsic_movsd(xmm1, *(r14->_currentUpdate + *_OBJC_IVAR_$_UICollectionViewUpdate._newVisibleBounds + 0x8));
    [r14->_layout updatesContentOffsetForProposedContentOffset:r14->_updateCompletionHandler];
    [r14->_layout targetContentOffsetForProposedContentOffset:r14->_updateCompletionHandler];
    [r14 _delegateTargetOffsetForProposedContentOffset:r14->_updateCompletionHandler];
    rcx = *_OBJC_IVAR_$_UICollectionViewUpdate._newVisibleBounds;
    *(r14->_currentUpdate + rcx) = intrinsic_movsd(*(r14->_currentUpdate + rcx), xmm0);
    *(r14->_currentUpdate + rcx + 0x8) = intrinsic_movsd(*(r14->_currentUpdate + rcx + 0x8), xmm1);
    var_798 = 0x0;
    rbx = [r14 retain];
    var_780 = rbx;
    var_4C8 = rbx;
    rax = [var_740 retain];
    var_808 = rax;
    var_4C0 = rax;
    rdx = __NSConcreteStackBlock;
    [UIView performWithoutAnimation:rdx];
    rax = [rbx->_reorderedItems count];
    var_800 = rax;
    if (rax > 0x0) {
            var_798 = [[NSMapTable alloc] initWithKeyOptions:0x5 valueOptions:0x0 capacity:var_800];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_500, xmm0);
            intrinsic_movapd(var_510, xmm0);
            var_520 = intrinsic_movapd(var_520, xmm0);
            var_530 = intrinsic_movapd(var_530, xmm0);
            rax = [var_780->_reorderedItems retain];
            var_7A8 = rax;
            rdx = var_530;
            rcx = var_1B0;
            rax = [rax countByEnumeratingWithState:rdx objects:rcx count:0x10];
            r14 = _objc_msgSend;
            var_740 = rax;
            if (rax != 0x0) {
                    var_7A0 = *var_520;
                    do {
                            r13 = 0x0;
                            do {
                                    if (*var_520 != var_7A0) {
                                            objc_enumerationMutation(var_7A8);
                                    }
                                    var_760 = @selector(targetIndexPath);
                                    r15 = *(var_528 + r13 * 0x8);
                                    r12 = [(r14)(r15, var_760) retain];
                                    rbx = [(r14)(var_780->_collectionViewData, @selector(layoutAttributesForItemAtIndexPath:), r12) retain];
                                    rdx = rbx;
                                    rcx = r15;
                                    (r14)(var_798, @selector(setObject:forKey:), rdx, rcx);
                                    rdi = rbx;
                                    [rdi release];
                                    [r12 release];
                                    if (var_790 == 0x0) {
                                            r12 = [(r14)(r15, @selector(originalIndexPath), rdx, rcx) retain];
                                            rbx = [(*(var_7D0 + 0x10))(var_7C8, r12) retain];
                                            (r14)(r15, @selector(setOriginalIndexPath:), rbx, rcx);
                                            rdi = rbx;
                                            [rdi release];
                                            [r12 release];
                                    }
                                    r13 = r13 + 0x1;
                            } while (r13 < var_740);
                            rdx = var_530;
                            rcx = var_1B0;
                            rax = [var_7A8 countByEnumeratingWithState:rdx objects:rcx count:0x10];
                            var_740 = rax;
                    } while (rax != 0x0);
            }
            [var_7A8 release];
            r13 = r14;
    }
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_540, xmm0);
    intrinsic_movapd(var_550, xmm0);
    var_560 = intrinsic_movapd(var_560, xmm0);
    var_570 = intrinsic_movapd(var_570, xmm0);
    rax = (r13)(var_808, @selector(viewAnimations), rdx, rcx);
    rax = [rax retain];
    var_7A8 = rax;
    rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_570, var_230, 0x10);
    var_740 = rax;
    if (rax != 0x0) {
            var_760 = *var_560;
            r15 = @selector(countByEnumeratingWithState:objects:count:);
            var_7D0 = r15;
            do {
                    r13 = 0x0;
                    do {
                            if (*var_560 != var_760) {
                                    objc_enumerationMutation(var_7A8);
                            }
                            r14 = *(var_568 + r13 * 0x8);
                            if ([r14 deleteAfterAnimation] != 0x0) {
                                    r12 = [[r14 finalLayoutAttributes] retain];
                                    var_770 = r14;
                                    r14 = r15;
                                    r15 = [[r12 indexPath] retain];
                                    [r15 release];
                                    [r12 release];
                                    COND = r15 == 0x0;
                                    r15 = r14;
                                    r14 = var_770;
                                    if (!COND) {
                                            rax = [r14 finalLayoutAttributes];
                                            rax = [rax retain];
                                            var_7A0 = rax;
                                            r15 = [[rax indexPath] retain];
                                            r12 = r14;
                                            r14 = [[var_780->_visibleCellsDict objectForKeyedSubscript:r15] retain];
                                            [r15 release];
                                            r15 = r14;
                                            [var_7A0 release];
                                            if (r15 != 0x0) {
                                                    rbx = [[r12 view] retain];
                                                    [rbx release];
                                                    if (r15 != rbx) {
                                                            var_7A0 = r15;
                                                            r15 = r12;
                                                            rax = [r12 view];
                                                            rax = [rax retain];
                                                            var_7D8 = rax;
                                                            r12 = [[rax superview] retain];
                                                            rdi = r15;
                                                            r15 = var_7A0;
                                                            r14 = [[rdi view] retain];
                                                            [r12 insertSubview:r14 aboveSubview:r15];
                                                            [r14 release];
                                                            [r12 release];
                                                            [var_7D8 release];
                                                    }
                                            }
                                            [r15 release];
                                            r15 = var_7D0;
                                    }
                            }
                            r13 = r13 + 0x1;
                    } while (r13 < var_740);
                    rax = _objc_msgSend(var_7A8, r15);
                    var_740 = rax;
            } while (rax != 0x0);
            r13 = _objc_msgSend;
    }
    else {
            r15 = @selector(countByEnumeratingWithState:objects:count:);
    }
    [var_7A8 release];
    var_790 = (r13)(var_848, @selector(copy));
    var_740 = (r13)(var_848, @selector(copy));
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_580, xmm0);
    intrinsic_movapd(var_590, xmm0);
    var_5A0 = intrinsic_movapd(var_5A0, xmm0);
    var_5B0 = intrinsic_movapd(var_5B0, xmm0);
    rax = (r13)(var_848, @selector(_animations));
    rax = [rax retain];
    var_770 = rax;
    rdx = var_5B0;
    rcx = var_2B0;
    rax = (r13)(rax, r15, rdx, rcx, 0x10);
    var_750 = rax;
    if (rax != 0x0) {
            var_760 = *var_5A0;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_5A0 != var_760) {
                                    objc_enumerationMutation(var_770);
                            }
                            r12 = (r13)(*(var_5A8 + r14 * 0x8), @selector(copy));
                            (r13)(var_740, @selector(addAnimations:), r12);
                            [r12 release];
                            r14 = r14 + 0x1;
                    } while (r14 < var_750);
                    rdx = var_5B0;
                    rcx = var_2B0;
                    rax = [var_770 countByEnumeratingWithState:rdx objects:rcx count:0x10];
                    var_750 = rax;
            } while (rax != 0x0);
    }
    [var_770 release];
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_5C0, xmm0);
    intrinsic_movapd(var_5D0, xmm0);
    var_5E0 = intrinsic_movapd(var_5E0, xmm0);
    var_5F0 = intrinsic_movapd(var_5F0, xmm0);
    rax = (r13)(var_848, @selector(_completions), rdx, rcx, 0x10);
    rax = [rax retain];
    var_770 = rax;
    rax = (r13)(rax, @selector(countByEnumeratingWithState:objects:count:), var_5F0, var_330, 0x10);
    rbx = r13;
    var_750 = rax;
    if (rax != 0x0) {
            var_760 = *var_5E0;
            do {
                    r15 = 0x0;
                    do {
                            if (*var_5E0 != var_760) {
                                    objc_enumerationMutation(var_770);
                            }
                            r14 = (rbx)(*(var_5E8 + r15 * 0x8), @selector(copy));
                            (rbx)(var_740, @selector(addCompletion:), r14);
                            [r14 release];
                            r15 = r15 + 0x1;
                    } while (r15 < var_750);
                    rax = [var_770 countByEnumeratingWithState:var_5F0 objects:var_330 count:0x10];
                    var_750 = rax;
            } while (rax != 0x0);
    }
    [var_770 release];
    r14 = [var_808 retain];
    var_610 = r14;
    r15 = [var_780 retain];
    var_608 = r15;
    rax = [var_790 retain];
    var_7D8 = rax;
    var_600 = rax;
    rax = [var_798 retain];
    var_790 = rax;
    var_5F8 = rax;
    var_7C0 = objc_retainBlock(__NSConcreteStackBlock);
    rax = [r15 retain];
    var_798 = rax;
    var_640 = rax;
    rax = [r14 retain];
    var_7D0 = rax;
    var_638 = rax;
    r14 = objc_retainBlock(__NSConcreteStackBlock);
    r13 = var_740;
    if (r13 != 0x0) {
            (rbx)(r13, @selector(addAnimations:), var_7C0);
            var_7E8 = r14;
            var_668 = [r14 retain];
            (rbx)(r13, @selector(addCompletion:), __NSConcreteStackBlock);
            (rbx)(r13, @selector(startAnimation));
            [var_668 release];
            r12 = var_7C0;
    }
    else {
            xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
            xmm1 = intrinsic_xorpd(xmm1, xmm1);
            r12 = var_7C0;
            var_7E8 = r14;
            [UIView animateWithDuration:0x4 delay:r12 options:r14 animations:r9 completion:stack[1773]];
    }
    r14 = var_798;
    *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r14 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    r14->_collectionViewFlags = 0xfffdffffffffffff & r14->_collectionViewFlags;
    r15 = var_7D0;
    if (var_800 > 0x0) {
            var_7C0 = r12;
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_6A0, xmm0);
            intrinsic_movapd(var_6B0, xmm0);
            var_6C0 = intrinsic_movapd(var_6C0, xmm0);
            var_6D0 = intrinsic_movapd(var_6D0, xmm0);
            rax = [var_780->_reorderedItems retain];
            var_7B0 = rax;
            rax = [rax countByEnumeratingWithState:var_6D0 objects:var_3B0 count:0x10];
            var_750 = rax;
            var_7A0 = 0x0;
            if (rax != 0x0) {
                    var_7A8 = *var_6C0;
                    var_7A0 = 0x0;
                    do {
                            r15 = 0x0;
                            do {
                                    if (*var_6C0 != var_7A8) {
                                            objc_enumerationMutation(var_7B0);
                                    }
                                    var_760 = @selector(pinned);
                                    var_770 = @selector(objectForKey:);
                                    var_780 = @selector(cell);
                                    var_7A0 = var_7A0 + (_objc_msgSend(*(var_6C8 + r15 * 0x8), var_760) & 0xff);
                                    r13 = [_objc_msgSend(var_790, var_770) retain];
                                    rbx = [_objc_msgSend(*(var_6C8 + r15 * 0x8), var_780) retain];
                                    r14 = var_798;
                                    [r14 _applyLayoutAttributes:r13 toView:rbx];
                                    rdi = rbx;
                                    [rdi release];
                                    [r13 release];
                                    r15 = r15 + 0x1;
                            } while (r15 < var_750);
                            rax = [var_7B0 countByEnumeratingWithState:var_6D0 objects:var_3B0 count:0x10];
                            var_750 = rax;
                    } while (rax != 0x0);
            }
            rdi = var_7B0;
            [rdi release];
            r15 = var_7D0;
            r12 = var_7C0;
            if (var_7A0 != var_800) {
                    xmm0 = intrinsic_movupd(xmm0, r14->_reorderingTargetPosition);
                    var_760 = intrinsic_movapd(var_760, xmm0);
                    CGRectGetMinX(rdi);
                    var_750 = intrinsic_movapd(var_750, xmm0);
                    CGRectGetMinX(rdi);
                    var_770 = intrinsic_movapd(var_770, xmm0);
                    CGRectGetMinY(rdi);
                    var_780 = intrinsic_movapd(var_780, xmm0);
                    CGRectGetMinY(rdi);
                    xmm1 = intrinsic_movapd(xmm1, var_750);
                    xmm1 = intrinsic_unpcklpd(xmm1, var_780);
                    xmm1 = intrinsic_subpd(xmm1, intrinsic_unpcklpd(intrinsic_movapd(xmm2, var_770), xmm0));
                    xmm1 = intrinsic_addpd(xmm1, var_760);
                    xmm1 = intrinsic_ucomisd(xmm1, r14->_reorderingTargetPosition);
                    if ((xmm1 == 0x0) && (!CPU_FLAGS & P)) {
                            xmm0 = intrinsic_movapd(xmm0, xmm1);
                            xmm0 = intrinsic_shufpd(xmm0, 0x1);
                            xmm0 = intrinsic_ucomisd(xmm0, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
                            if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
                                    var_750 = intrinsic_movapd(var_750, xmm1);
                                    intrinsic_movdqu(var_6E8, intrinsic_punpcklqdq(zero_extend_64(___Block_byref_object_copy_), zero_extend_64(___Block_byref_object_dispose_)));
                                    rbx = [r14 retain];
                                    var_6D8 = rbx;
                                    intrinsic_movupd(var_710, intrinsic_movapd(zero_extend_64(___Block_byref_object_dispose_), var_750));
                                    rdi = rbx->_postUpdateBlock;
                                    rbx->_postUpdateBlock = objc_retainBlock(__NSConcreteStackBlock);
                                    [rdi release];
                                    _Block_object_dispose(0x0, 0x8);
                                    [var_6D8 release];
                            }
                    }
                    else {
                            var_750 = intrinsic_movapd(var_750, xmm1);
                            intrinsic_movdqu(var_6E8, intrinsic_punpcklqdq(zero_extend_64(___Block_byref_object_copy_), zero_extend_64(___Block_byref_object_dispose_)));
                            rbx = [r14 retain];
                            var_6D8 = rbx;
                            intrinsic_movupd(var_710, intrinsic_movapd(zero_extend_64(___Block_byref_object_dispose_), var_750));
                            rdi = rbx->_postUpdateBlock;
                            rbx->_postUpdateBlock = objc_retainBlock(__NSConcreteStackBlock);
                            [rdi release];
                            _Block_object_dispose(0x0, 0x8);
                            [var_6D8 release];
                    }
            }
    }
    r14->_currentUpdate = 0x0;
    [r14->_currentUpdate release];
    [var_7E8 release];
    [var_638 release];
    [var_640 release];
    [r12 release];
    [var_5F8 release];
    [var_600 release];
    [var_608 release];
    [var_610 release];
    [var_848 release];
    [var_7D8 release];
    [var_790 release];
    [var_4C0 release];
    [var_4C8 release];
    [r15 release];
    [var_810 release];
    [var_498 release];
    [var_7E0 release];
    [var_428 release];
    [var_7C8 release];
    [var_3B8 release];
    [var_740 release];
    [var_850 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_985c2a:
    rdi = r13->_firstResponderIndexPath;
    r13->_firstResponderIndexPath = 0x0;
    goto loc_985c3f;

loc_985bbd:
    rax = [r13->_firstResponderIndexPath section];
    rax = [NSIndexPath indexPathForRow:0x7fffffffffffffff inSection:*(r13->_currentUpdate->_oldSectionMap + rax * 0x8)];
    goto loc_985c16;

loc_985925:
    rdx = *(var_7D8 + r14);
    r14 = var_7D8;
    r15 = [r12 isEqual:rdx];
    [r12 release];
    COND = r15 == 0x0;
    r15 = var_740;
    if (COND) goto loc_985b07;

loc_98595f:
    r12 = [r15 resignFirstResponder];
    if (r14->_firstResponderView == 0x0) goto loc_985b07;

loc_985984:
    rdx = "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m";
    var_788 = rbx;
    rbx = [[NSString stringWithUTF8String:rdx] retain];
    rdi = @"<Unknown File>";
    if (rbx != 0x0) {
            rdi = rbx;
    }
    var_820 = [rdi retain];
    [rbx release];
    var_828 = [[NSAssertionHandler currentHandler] retain];
    rbx = @"NO";
    if (r12 != 0x0) {
            rbx = @"YES";
    }
    rax = [r14 window];
    rax = [rax retain];
    var_830 = rax;
    rax = [rax firstResponder];
    rax = [rax retain];
    var_838 = rax;
    rbx = var_788;
    stack[1773] = @"Attempt to delete item containing first responder that refused to resign.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view:…";
    r9 = 0x17e8;
    goto loc_985ab3;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke(int arg0, int arg1) {
    rax = arg1;
    rbx = arg0;
    rdi = 0x0;
    if (rax != 0x0) {
            rdx = rax;
            rax = [*(rbx + 0x20)->_currentUpdate->_oldModel globalIndexForItemAtIndexPath:rdx];
            rcx = *(rbx + 0x20);
            rdi = 0x0;
            if (*(rcx->_currentUpdate->_oldGlobalItemMap + rax * 0x8) != 0x7fffffffffffffff) {
                    rdi = [[rcx->_collectionViewData indexPathForItemAtGlobalIndex:rdx] retain];
            }
    }
    rax = [rdi autorelease];
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.1975(int arg0) {
    rsi = 0x1000000000000000 | *(arg0 + 0x20)->_collectionViewFlags;
    *(int8_t *)(*(arg0 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(*(arg0 + 0x20) + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    *(arg0 + 0x20)->_collectionViewFlags = rsi;
    *(arg0 + 0x20)->_focusedCell = 0x0;
    [*(arg0 + 0x20)->_focusedCell release];
    *(arg0 + 0x20)->_focusedViewType = 0x0;
    *(arg0 + 0x20)->_currentUpdate->_newFocusedIndexPath = 0x0;
    [*(arg0 + 0x20)->_currentUpdate->_newFocusedIndexPath release];
    rax = *(arg0 + 0x20)->_currentUpdate;
    rax->_newFocusedViewType = 0x0;
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.1979(int arg0, int arg1) {
    var_F8 = arg0;
    rbx = [arg1 retain];
    var_100 = [[NSMutableSet alloc] init];
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [rbx retain];
    var_108 = rax;
    rbx = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r14 = *var_E0;
            do {
                    r13 = 0x0;
                    do {
                            if (*var_E0 != r14) {
                                    objc_enumerationMutation(var_108);
                            }
                            r15 = [(*(*(var_F8 + 0x20) + 0x10))(*(var_F8 + 0x20), *(var_E8 + r13 * 0x8)) retain];
                            if (r15 != 0x0) {
                                    [var_100 addObject:r15];
                            }
                            [r15 release];
                            r13 = r13 + 0x1;
                    } while (r13 < rbx);
                    rbx = [var_108 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    [var_108 release];
    [var_108 release];
    rbx = var_100;
    [rbx autorelease];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rax = rbx;
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.1993(int arg0) {
    r12 = arg0;
    rsi = *(r12 + 0x20);
    if (rsi != 0x0) {
            [var_50 bounds];
            rdi = *(r12 + 0x20);
    }
    else {
            var_40 = intrinsic_movaps(var_40, 0x0);
            var_50 = intrinsic_movaps(var_50, 0x0);
            rdi = 0x0;
    }
    [rdi setBounds:rdx, rcx];
    rbx = [[*(r12 + 0x20) _viewAnimationsForCurrentUpdate] retain];
    [*(r12 + 0x28) setViewAnimations:rbx];
    [rbx release];
    rax = [*(r12 + 0x20) setBounds:rbx, rcx];
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.2011(int arg0) {
    var_208 = arg0;
    r13 = _objc_msgSend;
    rax = [*(arg0 + 0x20) animationCount];
    [*(arg0 + 0x20) setAnimationCount:rax + 0x1];
    *(arg0 + 0x28)->_updateAnimationCount = *(arg0 + 0x28)->_updateAnimationCount + 0x1;
    r14 = [NSMutableSet alloc];
    r15 = [[*(arg0 + 0x28) _visibleViews] retain];
    var_290 = [r14 initWithArray:r15];
    [r15 release];
    [*(arg0 + 0x28)->_visibleCellsDict removeAllObjects];
    [*(arg0 + 0x28)->_visibleSupplementaryViewsDict removeAllObjects];
    [*(arg0 + 0x28)->_visibleDecorationViewsDict removeAllObjects];
    intrinsic_movaps(var_140, 0x0);
    intrinsic_movaps(var_150, 0x0);
    var_160 = intrinsic_movaps(var_160, 0x0);
    var_170 = intrinsic_movaps(var_170, 0x0);
    rax = [*(arg0 + 0x20) viewAnimations];
    rax = [rax retain];
    var_270 = rax;
    rbx = @selector(countByEnumeratingWithState:objects:count:);
    rax = _objc_msgSend(rax, rbx);
    var_218 = rax;
    if (rax != 0x0) {
            var_268 = *var_160;
            do {
                    r15 = 0x0;
                    do {
                            rcx = var_268;
                            if (*var_160 != rcx) {
                                    objc_enumerationMutation(var_270);
                            }
                            r12 = *(var_168 + r15 * 0x8);
                            rbx = [(r13)(r12, @selector(view)) retain];
                            rdx = (r13)(@class(_UICollectionSnapshotView), @selector(class));
                            if ((r13)(rbx, @selector(isKindOfClass:), rdx, rcx) == 0x0) {
                                    (r13)(rbx, @selector(_addUpdateAnimation), rdx);
                                    rdx = rbx;
                                    (r13)(var_290, @selector(removeObject:), rdx);
                                    if ((r13)(r12, @selector(deleteAfterAnimation), rdx) == 0x0) {
                                            r14 = r13;
                                            r13 = [(r13)(r12, @selector(finalLayoutAttributes), rdx) retain];
                                            rdx = rbx;
                                            rcx = r13;
                                            (r14)(*(var_208 + 0x28), @selector(_setVisibleView:forLayoutAttributes:), rdx, rcx);
                                            rdi = r13;
                                            r13 = r14;
                                            [rdi release];
                                    }
                            }
                            var_210 = rbx;
                            rax = (r13)(*(var_208 + 0x20), @selector(animationCount), rdx, rcx);
                            (r13)(*(var_208 + 0x20), @selector(setAnimationCount:), rax + 0x1, rcx);
                            *(var_208 + 0x28)->_updateAnimationCount = *(var_208 + 0x28)->_updateAnimationCount + 0x1;
                            var_180 = [*(var_208 + 0x28) retain];
                            var_178 = [*(var_208 + 0x20) retain];
                            (r13)(r12, @selector(addCompletionHandler:), __NSConcreteStackBlock, *_OBJC_IVAR_$_UICollectionView._updateAnimationCount);
                            rbx = (r13)(*(var_208 + 0x30), @selector(copy), __NSConcreteStackBlock, *_OBJC_IVAR_$_UICollectionView._updateAnimationCount);
                            (r13)(r12, @selector(startWithAnimator:), rbx, *_OBJC_IVAR_$_UICollectionView._updateAnimationCount);
                            rdi = rbx;
                            [rdi release];
                            [var_178 release];
                            [var_180 release];
                            [var_210 release];
                            r15 = r15 + 0x1;
                    } while (r15 < var_218);
                    rbx = @selector(countByEnumeratingWithState:objects:count:);
                    rax = _objc_msgSend(var_270, rbx);
                    var_218 = rax;
            } while (rax != 0x0);
    }
    [var_270 release];
    intrinsic_movaps(var_1B0, 0x0);
    intrinsic_movaps(var_1C0, 0x0);
    var_1D0 = intrinsic_movaps(var_1D0, 0x0);
    var_1E0 = intrinsic_movaps(var_1E0, 0x0);
    rax = [var_290 retain];
    var_238 = rax;
    rdx = var_1E0;
    rcx = var_130;
    rax = _objc_msgSend(rax, rbx);
    var_210 = rax;
    if (rax == 0x0) goto loc_9880ad;

loc_987e39:
    var_220 = *var_1D0;
    goto loc_987e58;

loc_987e58:
    r13 = 0x0;
    goto loc_987ed9;

loc_987ed9:
    if (*var_1D0 != var_220) {
            objc_enumerationMutation(var_238);
    }
    r14 = *(var_1D8 + r13 * 0x8);
    r15 = [[*(var_208 + 0x28) _reorderedItemForView:r14] retain];
    if (r15 == 0x0) goto loc_987f95;

loc_987f2e:
    if ([r15 pinned] != 0x0) goto loc_98805c;

loc_987f46:
    r12 = [[*(var_208 + 0x38) objectForKey:r15] retain];
    [*(var_208 + 0x28) _setVisibleView:r14 forLayoutAttributes:r12];
    rdi = r12;
    goto loc_987ff4;

loc_987ff4:
    [rdi release];
    goto loc_98805c;

loc_98805c:
    [r15 release];
    r13 = r13 + 0x1;
    if (r13 < var_210) goto loc_987ed9;

loc_988075:
    rdx = var_1E0;
    rcx = var_130;
    rax = [var_238 countByEnumeratingWithState:rdx objects:rcx count:0x10];
    var_210 = rax;
    if (rax != 0x0) goto loc_987e58;

loc_9880ad:
    [var_238 release];
    [*(var_208 + 0x28) setBounds:rdx, rcx];
    [*(var_208 + 0x28) _updateBackgroundView];
    [*(var_208 + 0x28)->_layout finalizeCollectionViewUpdates];
    [var_238 release];
    rax = *___stack_chk_guard;
    if (rax != *___stack_chk_guard) {
            rax = __stack_chk_fail();
    }
    return rax;

loc_987f95:
    if ([r14 _isInUpdateAnimation] == 0x0) goto loc_987ffc;

loc_987fa9:
    rbx = [[r14 _layoutAttributes] retain];
    [*(var_208 + 0x28) _setVisibleView:r14 forLayoutAttributes:rbx];
    rdi = rbx;
    goto loc_987ff4;

loc_987ffc:
    r12 = [[r14 _layoutAttributes] retain];
    rbx = [r12 _isCell];
    [r12 release];
    rdi = *(var_208 + 0x28);
    if (rbx != 0x0) {
            rsi = @selector(_reuseCell:);
    }
    else {
            rsi = @selector(_reuseSupplementaryView:);
    }
    _objc_msgSend(rdi, rsi);
    goto loc_98805c;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke_2(int arg0, int arg1) {
    rbx = [[NSNumber numberWithBool:arg1 & 0xff] retain];
    [*(arg0 + 0x20) _updateAnimationDidStop:0x0 finished:rbx context:*(arg0 + 0x28)];
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.2034(int arg0, int arg1) {
    rbx = [[NSNumber numberWithBool:arg1 & 0xff] retain];
    [*(arg0 + 0x20) _updateAnimationDidStop:0x0 finished:rbx context:*(arg0 + 0x28)];
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.2038(int arg0, int arg1) {
    rax = (*(*(arg0 + 0x20) + 0x10))(*(arg0 + 0x20), (arg1 == 0x0 ? 0x1 : 0x0) & 0xff);
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke.2042(int arg0) {
    rax = [UIView performWithoutAnimation:__NSConcreteStackBlock];
    return rax;
}

int ___71-[UICollectionView _updateWithItems:tentativelyForReordering:animator:]_block_invoke_2.2043(int arg0) {
    intrinsic_movsd(xmm0, *(arg0 + 0x28));
    intrinsic_movsd(xmm1, *(arg0 + 0x30));
    rax = [*(*(*(arg0 + 0x20) + 0x8) + 0x28) _updateReorderingTargetPosition:0x1 forced:rcx];
    return rax;
}

void -[UICollectionView _updateAnimationDidStop:finished:context:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r8 = arg4;
    rcx = arg3;
    r12 = _cmd;
    r13 = self;
    var_278 = [rcx retain];
    rbx = [r8 retain];
    var_270 = rbx;
    rdx = [rbx animationCount] + 0xffffffffffffffff;
    [rbx setAnimationCount:rdx];
    r13->_updateAnimationCount = r13->_updateAnimationCount - 0x1;
    r14 = _objc_msgSend;
    if ([rbx animationCount] != 0x0) goto loc_988d4b;

loc_988535:
    r14 = _objc_msgSend;
    var_260 = r12;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [var_270 viewAnimations];
    rax = [rax retain];
    var_178 = rax;
    rdx = var_F0;
    rcx = var_B0;
    r12 = [rax countByEnumeratingWithState:rdx objects:rcx count:0x10];
    var_168 = r13;
    if (r12 == 0x0) goto loc_988c45;

loc_9885af:
    r15 = *var_E0;
    var_1B0 = r15;
    goto loc_9885ce;

loc_9885ce:
    var_180 = r12;
    rbx = 0x0;
    goto loc_98876d;

loc_98876d:
    if (*var_E0 != r15) {
            objc_enumerationMutation(var_178);
    }
    r13 = *(var_E8 + rbx * 0x8);
    var_138 = rbx;
    rbx = [(r14)(r13, @selector(view)) retain];
    rdx = (r14)(@class(_UICollectionSnapshotView), @selector(class));
    if ((r14)(rbx, @selector(isKindOfClass:), rdx) != 0x0) goto loc_988bf5;

loc_9887d8:
    (r14)(rbx, @selector(_clearUpdateAnimation), rdx);
    if ((r14)(r13, @selector(resetRasterizationAfterAnimation), rdx) != 0x0) {
            r15 = rbx;
            rbx = [(r14)(rbx, @selector(layer)) retain];
            rax = (r14)(r13, @selector(rasterizeAfterAnimation));
            (r14)(rbx, @selector(setShouldRasterize:), rax & 0xff);
            rdi = rbx;
            rbx = r15;
            [rdi release];
    }
    r15 = r14;
    r14 = var_168;
    rdx = @selector(_visibleBounds);
    objc_msgSend_stret(var_110, r14, rdx);
    if ([rbx _isInUpdateAnimation] == 0x0) {
            rdi = r13;
            rsi = @selector(deleteAfterAnimation);
            if (_objc_msgSend(rdi, rsi) == 0x0) {
                    if (rbx != 0x0) {
                            rdi = var_130;
                            rsi = rbx;
                            rdx = @selector(frame);
                            objc_msgSend_stret(rdi, rsi, rdx);
                    }
                    else {
                            var_120 = intrinsic_movaps(var_120, 0x0);
                            var_130 = intrinsic_movaps(var_130, 0x0);
                    }
                    rcx = var_128;
                    if (CGRectIntersectsRect(rdi, rsi) == 0x0) {
                            var_148 = r13;
                            r12 = r14;
                            var_140 = rbx;
                            r13 = [(r15)(rbx, @selector(_layoutAttributes)) retain];
                            r14 = (r15)(r13, @selector(representedElementCategory));
                            rax = (r15)(r13, @selector(_elementKind));
                            rax = [rax retain];
                            var_200 = rax;
                            rcx = rax;
                            r14 = [(r15)(r12, @selector(_visibleViewDictForElementCategory:elementKind:), r14, rcx) retain];
                            r12 = [(r15)(r13, @selector(indexPath)) retain];
                            rdx = r12;
                            (r15)(r14, @selector(removeObjectForKey:), rdx, rcx);
                            [r12 release];
                            [r14 release];
                            [var_200 release];
                            [r13 release];
                            rbx = var_140;
                            r14 = var_168;
                            r13 = var_148;
                    }
            }
    }
    var_148 = r13;
    r13 = rbx;
    r14 = [(r15)(r14, @selector(_visibleViews), rdx, rcx) retain];
    r12 = (r15)(r14, @selector(containsObject:), r13, rcx);
    [r14 release];
    if (r12 == 0x0) goto loc_988ab3;

loc_988a3c:
    var_140 = r13;
    r14 = r15;
    if ([var_148 updateZIndexAfterAnimation] != 0x0) {
            r15 = [(r14)(var_140, @selector(_layoutAttributes)) retain];
            rcx = (r14)(r15, @selector(zIndex));
            (r14)(var_168, @selector(_addControlledSubview:atZIndex:), var_140, rcx);
            [r15 release];
    }
    goto loc_988be0;

loc_988be0:
    r15 = var_1B0;
    r12 = var_180;
    rbx = var_140;
    goto loc_988bf5;

loc_988bf5:
    [rbx release];
    rbx = var_138 + 0x1;
    if (rbx < r12) goto loc_98876d;

loc_988c11:
    rdx = var_F0;
    rcx = var_B0;
    r12 = [var_178 countByEnumeratingWithState:rdx objects:rcx count:0x10];
    if (r12 != 0x0) goto loc_9885ce;

loc_988c45:
    r8 = 0x10;
    [var_178 release];
    r12 = var_168;
    (r14)(r12->_layout, @selector(collectionViewContentSize), rdx, rcx, r8);
    (r14)(r12, @selector(setContentSize:), rdx, rcx, r8);
    r15 = [(r14)(var_270, @selector(completionHandler), rdx, rcx, r8) retain];
    if (r15 != 0x0) {
            rax = [var_278 boolValue];
            (*(r15 + 0x10))(r15, rax & 0xff);
    }
    rdx = 0x1;
    rcx = 0x1;
    [r12 _setNeedsVisibleCellsUpdate:rdx withLayoutAttributes:rcx];
    if (r12->_focusedCell != 0x0) {
            r13 = [(r14)(r12, @selector(_window), 0x1, 0x1) retain];
            rbx = [(r14)(r13, @selector(_focusEngine), 0x1, 0x1) retain];
            rcx = r12->_focusedCell;
            rdx = r12;
            (r14)(rbx, @selector(_animateOffsetOfScrollView:toShowFocusedView:), rdx, rcx);
            [rbx release];
            [r13 release];
    }
    [r15 release];
    r13 = r12;
    goto loc_988d4b;

loc_988d4b:
    r15 = r14;
    r14 = [(r14)(r13, @selector(window), rdx, rcx, r8) retain];
    rbx = [(r15)(r14, @selector(screen), rdx, rcx, r8) retain];
    rsi = @selector(supportsFocus);
    r15 = (r15)(rbx, rsi, rdx, rcx, r8);
    [rbx release];
    [r14 release];
    if (r15 != 0x0) {
            rsi = @selector(_highlightFirstVisibleItemIfAppropriate);
            _objc_msgSend(r13, rsi);
    }
    [var_270 release];
    [var_278 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_988ab3:
    var_140 = r13;
    r14 = r15;
    r15 = var_148;
    if ([r13 _isInUpdateAnimation] != 0x0) goto loc_988be0;

loc_988adc:
    rbx = @selector(viewType);
    if (_objc_msgSend(r15, rbx) != 0x1) goto loc_988b05;

loc_988af5:
    rdi = var_168;
    rsi = @selector(_reuseCell:);
    goto loc_988b25;

loc_988b25:
    _objc_msgSend(rdi, rsi);
    goto loc_988be0;

loc_988b05:
    if (_objc_msgSend(r15, rbx) != 0x2) goto loc_988b37;

loc_988b17:
    rdi = var_168;
    rsi = @selector(_reuseSupplementaryView:);
    goto loc_988b25;

loc_988b37:
    rbx = [(r14)(@class(NSString), @selector(stringWithUTF8String:), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
    rdi = @"<Unknown File>";
    if (rbx != 0x0) {
            rdi = rbx;
    }
    r12 = [rdi retain];
    rdi = rbx;
    [rdi release];
    r15 = [(r14)(@class(NSAssertionHandler), @selector(currentHandler), "/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m") retain];
    rcx = var_168;
    (r14)(r15, @selector(handleFailureInMethod:object:file:lineNumber:description:), var_260, rcx, r12, 0x190c, @"UICollectionView finished animating a view of unknown type: %@", var_140);
    [r12 release];
    [r15 release];
    goto loc_988be0;
}

void -[UICollectionView _beginUpdates](void * self, void * _cmd) {
    rbx = self;
    rax = rbx->_updateCount;
    if (rax == 0x0) {
            [rbx _setupCellAnimations];
            rax = rbx->_updateCount;
    }
    rbx->_updateCount = rax + 0x1;
    return;
}

void -[UICollectionView _endUpdatesWithInvalidationContext:tentativelyForReordering:animator:](void * self, void * _cmd, void * arg2, bool arg3, void * arg4) {
    r14 = arg4;
    r12 = arg3;
    rbx = self;
    r15 = [arg2 retain];
    rbx->_updateCount = rbx->_updateCount - 0x1;
    if (rbx->_updateCount == 0x0) {
            [rbx _endItemAnimationsWithInvalidationContext:r15 tentativelyForReordering:r12 & 0xff animator:r14];
    }
    rdi = r15;
    [rdi release];
    return;
}

void -[UICollectionView performBatchUpdates:completion:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    [self _performBatchUpdates:rbx completion:arg3 invalidationContext:0x0];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView performBatchUpdates:withAnimator:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = [arg2 retain];
    [self _performBatchUpdates:rbx completion:0x0 invalidationContext:0x0 tentativelyForReordering:0x0 animator:arg3];
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _performBatchUpdates:completion:invalidationContext:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r13 = [arg2 retain];
    rbx = [arg3 retain];
    [self _performBatchUpdates:r13 completion:rbx invalidationContext:arg4 tentativelyForReordering:0x0];
    [rbx release];
    rdi = r13;
    [rdi release];
    return;
}

void -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, bool arg5) {
    r14 = [arg2 retain];
    rbx = [arg3 retain];
    [self _performBatchUpdates:r14 completion:rbx invalidationContext:arg4 tentativelyForReordering:arg5 & 0xff animator:0x0];
    [rbx release];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4, bool arg5, void * arg_0) {
    r8 = arg4;
    rdx = arg2;
    var_84 = arg5;
    r15 = self;
    r14 = [rdx retain];
    rbx = [arg3 retain];
    r12 = [r8 retain];
    var_80 = [arg_0 retain];
    if ([r15 _visible] != 0x0) {
            var_98 = r12;
            rax = objc_retainBlock(r15->_updateCompletionHandler);
            rax = [rax retain];
            var_A0 = rax;
            var_38 = rax;
            var_90 = rbx;
            var_30 = [rbx retain];
            r15->_updateCompletionHandler = objc_retainBlock(__NSConcreteStackBlock);
            [r15->_updateCompletionHandler release];
            [r15 layoutBelowIfNeeded];
            [r15 _beginUpdates];
            if (r14 != 0x0) {
                    (*(r14 + 0x10))(r14);
                    if ([r15->_collectionViewData layoutIsPrepared] == 0x0) {
                            [var_78 _visibleBounds];
                            [r15->_collectionViewData validateLayoutInRect:rdx, rcx];
                            [r15->_collectionViewData _prepareToLoadData];
                    }
            }
            r12 = var_98;
            r13 = var_80;
            [r15 _endUpdatesWithInvalidationContext:r12 tentativelyForReordering:var_84 & 0xff animator:r13];
            [var_30 release];
            [var_38 release];
            [var_A0 release];
            rbx = var_90;
    }
    else {
            *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r15 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
            r15->_collectionViewFlags = 0x8000000000000 | r15->_collectionViewFlags;
            if (r14 != 0x0) {
                    (*(r14 + 0x10))(r14);
            }
            r13 = var_80;
            if (rbx != 0x0) {
                    (*(rbx + 0x10))(rbx, 0x1);
            }
    }
    [r13 release];
    [r12 release];
    [rbx release];
    [r14 release];
    return;
}

void ___106-[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:]_block_invoke(int arg0, int arg1) {
    r14 = arg1;
    rbx = arg0;
    rdi = *(rbx + 0x20);
    if (rdi != 0x0) {
            (*(rdi + 0x10))();
    }
    rdi = *(rbx + 0x28);
    if (rdi != 0x0) {
            (*(rdi + 0x10))();
    }
    return;
}

void -[UICollectionView setBackgroundView:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    rdi = rbx->_backgroundView;
    if (rdi != r14) {
            [rdi removeFromSuperview];
            rbx->_backgroundView = [r14 retain];
            [rbx->_backgroundView release];
            [var_48 bounds];
            [rbx->_backgroundView setFrame:rdx, rcx];
            [rbx _addContentSubview:rbx->_backgroundView atBack:0x1];
    }
    [r14 release];
    return;
}

void -[UICollectionView _invalidateWithBlock:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    rbx = [arg2 retain];
    if (rbx != 0x0) {
            if (!(BIT_TEST(r14->_collectionViewFlags, 0x3a))) {
                    (*(rbx + 0x10))(rbx);
            }
            else {
                    rax = objc_retainBlock(r14->_invalidationBlock);
                    var_38 = rax;
                    r15 = [rax retain];
                    var_30 = [rbx retain];
                    rdi = r14->_invalidationBlock;
                    r14->_invalidationBlock = objc_retainBlock(__NSConcreteStackBlock);
                    [rdi release];
                    [var_30 release];
                    [var_38 release];
                    [r15 release];
            }
    }
    [rbx release];
    return;
}

void ___41-[UICollectionView _invalidateWithBlock:]_block_invoke(int arg0) {
    rbx = arg0;
    rdi = *(rbx + 0x20);
    if (rdi != 0x0) {
            (*(rdi + 0x10))();
    }
    rdi = *(rbx + 0x28);
    (*(rdi + 0x10))(rdi);
    return;
}

void -[UICollectionView _invalidateLayoutWithContext:](void * self, void * _cmd, void * arg2) {
    r13 = self;
    r12 = [arg2 retain];
    if (r13->_isInInteractiveTransition != 0x0) {
            r13->_previousInteractiveTransitionProgress = r13->_currentInteractiveTransitionProgress;
            var_538 = [r13->_layout retain];
            var_570 = r12;
            [r13->_layout transitionProgress];
            r13->_currentInteractiveTransitionProgress = intrinsic_movsd(r13->_currentInteractiveTransitionProgress, xmm0);
            r13->_previousInteractiveTransitionTimeStamp = r13->_currentInteractiveTransitionTimeStamp;
            rbx = [[NSDate date] retain];
            [rbx timeIntervalSince1970];
            r13->_currentInteractiveTransitionTimeStamp = intrinsic_movsd(r13->_currentInteractiveTransitionTimeStamp, xmm0);
            [rbx release];
            rbx = [r13 retain];
            var_2B8 = rbx;
            [rbx _invalidateWithBlock:__NSConcreteStackBlock];
            rdx = 0x1;
            [rbx _setNeedsVisibleCellsUpdate:rdx withLayoutAttributes:0x1];
            rbx = var_570;
            [var_2B8 release];
            [var_538 release];
    }
    else {
            if (([UIView _isInAnimationBlockWithAnimationsEnabled] != 0x0) && ([r13 _shouldFadeCellsForBoundChangeWhileRotating] != 0x0)) {
                    *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                    r13->_collectionViewFlags = 0x2000000000000 | r13->_collectionViewFlags;
            }
            rbx = [[r12 invalidatedItemIndexPaths] retain];
            if ([rbx count] != 0x0) {
                    r14 = rbx;
                    var_580 = r14;
                    rbx = [r13 retain];
                    var_2E8 = rbx;
                    var_2E0 = [r14 retain];
                    [rbx _invalidateWithBlock:__NSConcreteStackBlock];
                    [var_2E0 release];
                    [var_2E8 release];
                    rbx = 0x1;
            }
            else {
                    var_580 = rbx;
                    var_570 = r12;
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_320, xmm0);
                    intrinsic_movapd(var_330, xmm0);
                    var_340 = intrinsic_movapd(var_340, xmm0);
                    var_350 = intrinsic_movapd(var_350, xmm0);
                    var_598 = r13;
                    r15 = [[r13->_visibleCellsDict objectEnumerator] retain];
                    rbx = [r15 countByEnumeratingWithState:var_350 objects:var_B0 count:0x10];
                    if (rbx != 0x0) {
                            r13 = *var_340;
                            do {
                                    r14 = 0x0;
                                    do {
                                            if (*var_340 != r13) {
                                                    objc_enumerationMutation(r15);
                                            }
                                            [*(var_348 + r14 * 0x8) _invalidatePreferredAttributes];
                                            r14 = r14 + 0x1;
                                    } while (r14 < rbx);
                                    var_538 = @selector(countByEnumeratingWithState:objects:count:);
                                    rbx = _objc_msgSend(r15, var_538);
                            } while (rbx != 0x0);
                    }
                    [r15 release];
                    rbx = 0x0;
                    r12 = var_570;
                    r13 = var_598;
            }
            var_570 = r12;
            r12 = [[r12 invalidatedSupplementaryIndexPaths] retain];
            if ([r12 count] != 0x0) {
                    rbx = [r13 retain];
                    var_360 = rbx;
                    var_588 = r12;
                    var_358 = [r12 retain];
                    [rbx _invalidateWithBlock:__NSConcreteStackBlock];
                    [var_358 release];
                    [var_360 release];
                    var_59C = 0x1;
                    r12 = var_570;
            }
            else {
                    var_59C = rbx;
                    var_588 = r12;
                    if (!(BIT_TEST(r13->_collectionViewFlags, 0x3a))) {
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            intrinsic_movapd(var_390, xmm0);
                            intrinsic_movapd(var_3A0, xmm0);
                            var_3B0 = intrinsic_movapd(var_3B0, xmm0);
                            var_3C0 = intrinsic_movapd(var_3C0, xmm0);
                            var_598 = r13;
                            rax = [r13->_visibleSupplementaryViewsDict objectEnumerator];
                            rax = [rax retain];
                            var_568 = rax;
                            rax = [rax countByEnumeratingWithState:var_3C0 objects:var_130 count:0x10];
                            var_548 = rax;
                            if (rax != 0x0) {
                                    var_560 = *var_3B0;
                                    var_578 = @selector(countByEnumeratingWithState:objects:count:);
                                    do {
                                            var_550 = @selector(countByEnumeratingWithState:objects:count:);
                                            rbx = 0x0;
                                            do {
                                                    if (*var_3B0 != var_560) {
                                                            objc_enumerationMutation(var_568);
                                                    }
                                                    var_540 = rbx;
                                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                                    var_3D0 = intrinsic_movapd(var_3D0, xmm0);
                                                    var_3E0 = intrinsic_movapd(var_3E0, xmm0);
                                                    var_3F0 = intrinsic_movapd(var_3F0, xmm0);
                                                    var_400 = intrinsic_movapd(var_400, xmm0);
                                                    rbx = [[*(var_3B8 + rbx * 0x8) objectEnumerator] retain];
                                                    r13 = _objc_msgSend(rbx, var_550, var_400, var_1B0, 0x10);
                                                    if (r13 != 0x0) {
                                                            r12 = *var_3F0;
                                                            do {
                                                                    r15 = 0x0;
                                                                    do {
                                                                            if (*var_3F0 != r12) {
                                                                                    objc_enumerationMutation(rbx);
                                                                            }
                                                                            [*(var_3F8 + r15 * 0x8) _invalidatePreferredAttributes];
                                                                            r15 = r15 + 0x1;
                                                                    } while (r15 < r13);
                                                                    var_538 = @selector(countByEnumeratingWithState:objects:count:);
                                                                    r13 = _objc_msgSend(rbx, var_538);
                                                            } while (r13 != 0x0);
                                                    }
                                                    [rbx release];
                                                    rbx = var_540 + 0x1;
                                            } while (rbx < var_548);
                                            rax = _objc_msgSend(var_568, var_578);
                                            var_548 = rax;
                                    } while (rax != 0x0);
                            }
                            [var_568 release];
                            r12 = var_570;
                            r13 = var_598;
                    }
                    else {
                            r12 = var_570;
                    }
            }
            rbx = [[r12 invalidatedDecorationIndexPaths] retain];
            if ([rbx count] != 0x0) {
                    rdi = rbx;
                    var_590 = rdi;
                    rbx = [r13 retain];
                    var_410 = rbx;
                    var_408 = [rdi retain];
                    [rbx _invalidateWithBlock:__NSConcreteStackBlock];
                    [var_408 release];
                    [var_410 release];
                    rdx = 0x40000000000000 | r13->_collectionViewFlags;
                    *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                    r13->_collectionViewFlags = rdx;
                    [r13 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x0];
                    r15 = var_588;
                    if ([var_580 count] != 0x0) {
                            r12 = r15;
                            rdi = r13->_invalidatedItemIndexPaths;
                            if (rdi == 0x0) {
                                    r13->_invalidatedItemIndexPaths = [[NSMutableSet alloc] init];
                                    [r13->_invalidatedItemIndexPaths release];
                                    rdi = r13->_invalidatedItemIndexPaths;
                            }
                            r15 = r12;
                            rdx = var_580;
                            [rdi addObjectsFromArray:rdx];
                    }
                    if ([r15 count] != 0x0) {
                            r12 = r15;
                            if (r13->_invalidatedSupplementaryIndexPaths == 0x0) {
                                    r13->_invalidatedSupplementaryIndexPaths = [[NSMutableDictionary alloc] init];
                                    [r13->_invalidatedSupplementaryIndexPaths release];
                            }
                            var_4E8 = [r13 retain];
                            rdx = __NSConcreteStackBlock;
                            r15 = r12;
                            [r15 enumerateKeysAndObjectsUsingBlock:rdx];
                            [var_4E8 release];
                    }
                    r12 = var_590;
                    if ([r12 count] != 0x0) {
                            if (r13->_invalidatedDecorationIndexPaths == 0x0) {
                                    r13->_invalidatedDecorationIndexPaths = [[NSMutableDictionary alloc] init];
                                    [r13->_invalidatedDecorationIndexPaths release];
                            }
                            var_510 = [r13 retain];
                            rdx = __NSConcreteStackBlock;
                            [r12 enumerateKeysAndObjectsUsingBlock:rdx];
                            [var_510 release];
                    }
            }
            else {
                    var_590 = rbx;
                    var_570 = r12;
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_440, xmm0);
                    intrinsic_movapd(var_450, xmm0);
                    var_460 = intrinsic_movapd(var_460, xmm0);
                    var_470 = intrinsic_movapd(var_470, xmm0);
                    var_598 = r13;
                    rax = [r13->_visibleDecorationViewsDict objectEnumerator];
                    rax = [rax retain];
                    var_568 = rax;
                    rax = [rax countByEnumeratingWithState:var_470 objects:var_230 count:0x10];
                    var_548 = rax;
                    if (rax != 0x0) {
                            var_560 = *var_460;
                            var_578 = @selector(countByEnumeratingWithState:objects:count:);
                            do {
                                    var_550 = @selector(countByEnumeratingWithState:objects:count:);
                                    rbx = 0x0;
                                    do {
                                            if (*var_460 != var_560) {
                                                    objc_enumerationMutation(var_568);
                                            }
                                            var_540 = rbx;
                                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                            var_480 = intrinsic_movapd(var_480, xmm0);
                                            var_490 = intrinsic_movapd(var_490, xmm0);
                                            var_4A0 = intrinsic_movapd(var_4A0, xmm0);
                                            var_4B0 = intrinsic_movapd(var_4B0, xmm0);
                                            r12 = [[*(var_468 + rbx * 0x8) objectEnumerator] retain];
                                            r14 = _objc_msgSend(r12, var_550, var_4B0, var_2B0, 0x10);
                                            if (r14 != 0x0) {
                                                    r15 = *var_4A0;
                                                    do {
                                                            r13 = 0x0;
                                                            do {
                                                                    if (*var_4A0 != r15) {
                                                                            objc_enumerationMutation(r12);
                                                                    }
                                                                    [*(var_4A8 + r13 * 0x8) _invalidatePreferredAttributes];
                                                                    r13 = r13 + 0x1;
                                                            } while (r13 < r14);
                                                            var_538 = @selector(countByEnumeratingWithState:objects:count:);
                                                            r14 = _objc_msgSend(r12, var_538);
                                                    } while (r14 != 0x0);
                                            }
                                            [r12 release];
                                            rbx = var_540 + 0x1;
                                    } while (rbx < var_548);
                                    rax = _objc_msgSend(var_568, var_578);
                                    var_548 = rax;
                            } while (rax != 0x0);
                    }
                    [var_568 release];
                    r15 = var_570;
                    r13 = var_598;
                    if (var_59C == 0x0) {
                            rbx = [r13 retain];
                            var_4B8 = [r15 retain];
                            [rbx _invalidateWithBlock:__NSConcreteStackBlock];
                            [var_4B8 release];
                            [rbx release];
                            rdx = 0x40000000000000 | rbx->_collectionViewFlags;
                            *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(rbx + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            rbx->_collectionViewFlags = rdx;
                            [rbx _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x1];
                            r15 = var_588;
                            r12 = var_590;
                    }
                    else {
                            rdx = 0x40000000000000 | r13->_collectionViewFlags;
                            *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(r13 + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
                            r13->_collectionViewFlags = rdx;
                            [r13 _setNeedsVisibleCellsUpdate:0x1 withLayoutAttributes:0x0];
                            r15 = var_588;
                            if ([var_580 count] != 0x0) {
                                    r12 = r15;
                                    rdi = r13->_invalidatedItemIndexPaths;
                                    if (rdi == 0x0) {
                                            r13->_invalidatedItemIndexPaths = [[NSMutableSet alloc] init];
                                            [r13->_invalidatedItemIndexPaths release];
                                            rdi = r13->_invalidatedItemIndexPaths;
                                    }
                                    r15 = r12;
                                    rdx = var_580;
                                    [rdi addObjectsFromArray:rdx];
                            }
                            if ([r15 count] != 0x0) {
                                    r12 = r15;
                                    if (r13->_invalidatedSupplementaryIndexPaths == 0x0) {
                                            r13->_invalidatedSupplementaryIndexPaths = [[NSMutableDictionary alloc] init];
                                            [r13->_invalidatedSupplementaryIndexPaths release];
                                    }
                                    var_4E8 = [r13 retain];
                                    rdx = __NSConcreteStackBlock;
                                    r15 = r12;
                                    [r15 enumerateKeysAndObjectsUsingBlock:rdx];
                                    [var_4E8 release];
                            }
                            r12 = var_590;
                            if ([r12 count] != 0x0) {
                                    if (r13->_invalidatedDecorationIndexPaths == 0x0) {
                                            r13->_invalidatedDecorationIndexPaths = [[NSMutableDictionary alloc] init];
                                            [r13->_invalidatedDecorationIndexPaths release];
                                    }
                                    var_510 = [r13 retain];
                                    rdx = __NSConcreteStackBlock;
                                    [r12 enumerateKeysAndObjectsUsingBlock:rdx];
                                    [var_510 release];
                            }
                    }
            }
            [r12 release];
            [r15 release];
            [var_580 release];
            rbx = var_570;
    }
    [rbx contentOffsetAdjustment];
    xmm0 = intrinsic_ucomisd(xmm0, *_CGPointZero);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm1 = intrinsic_ucomisd(xmm1, *_CGRectApplyAffineTransform);
            if (xmm1 == 0x0) {
                    if (!CPU_FLAGS & NP) {
                            var_538 = intrinsic_movsd(var_538, xmm1);
                            var_540 = intrinsic_movsd(var_540, xmm0);
                            [r13 contentOffset];
                            xmm0 = intrinsic_addsd(xmm0, var_540);
                            xmm1 = intrinsic_addsd(xmm1, var_538);
                            [r13 setContentOffset:rdx];
                    }
            }
            else {
                    var_538 = intrinsic_movsd(var_538, xmm1);
                    var_540 = intrinsic_movsd(var_540, xmm0);
                    [r13 contentOffset];
                    xmm0 = intrinsic_addsd(xmm0, var_540);
                    xmm1 = intrinsic_addsd(xmm1, var_538);
                    [r13 setContentOffset:rdx];
            }
    }
    else {
            var_538 = intrinsic_movsd(var_538, xmm1);
            var_540 = intrinsic_movsd(var_540, xmm0);
            [r13 contentOffset];
            xmm0 = intrinsic_addsd(xmm0, var_540);
            xmm1 = intrinsic_addsd(xmm1, var_538);
            [r13 setContentOffset:rdx];
    }
    [rbx contentSizeAdjustment];
    xmm0 = intrinsic_ucomisd(xmm0, *_CGSizeZero);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm1 = intrinsic_ucomisd(xmm1, *_CPBitmapCreateImagesFromData);
            if ((xmm1 != 0x0) || (!CPU_FLAGS & NP)) {
                    var_540 = intrinsic_movsd(var_540, xmm0);
                    var_538 = intrinsic_movsd(var_538, xmm1);
                    [r13->_collectionViewData contentSize];
                    xmm3 = intrinsic_movsd(xmm3, var_540);
                    xmm3 = intrinsic_addsd(xmm3, xmm0);
                    var_540 = intrinsic_movsd(var_540, xmm3);
                    xmm2 = intrinsic_movsd(xmm2, var_538);
                    xmm2 = intrinsic_addsd(xmm2, xmm1);
                    var_538 = intrinsic_movsd(var_538, xmm2);
                    xmm0 = intrinsic_movapd(xmm0, xmm3);
                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                    [r13 setContentSize:rdx];
                    intrinsic_movsd(xmm0, var_540);
                    intrinsic_movsd(xmm1, var_538);
                    [r13->_collectionViewData setContentSize:rdx];
            }
    }
    else {
            var_540 = intrinsic_movsd(var_540, xmm0);
            var_538 = intrinsic_movsd(var_538, xmm1);
            [r13->_collectionViewData contentSize];
            xmm3 = intrinsic_movsd(xmm3, var_540);
            xmm3 = intrinsic_addsd(xmm3, xmm0);
            var_540 = intrinsic_movsd(var_540, xmm3);
            xmm2 = intrinsic_movsd(xmm2, var_538);
            xmm2 = intrinsic_addsd(xmm2, xmm1);
            var_538 = intrinsic_movsd(var_538, xmm2);
            xmm0 = intrinsic_movapd(xmm0, xmm3);
            xmm1 = intrinsic_movapd(xmm1, xmm2);
            [r13 setContentSize:rdx];
            intrinsic_movsd(xmm0, var_540);
            intrinsic_movsd(xmm1, var_538);
            [r13->_collectionViewData setContentSize:rdx];
    }
    [rbx release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidate:0x1];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2085(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidateItemsAtIndexPaths:*(arg0 + 0x28)];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2091(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidateSupplementaryIndexPaths:*(arg0 + 0x28)];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2097(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidateDecorationIndexPaths:*(arg0 + 0x28)];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2103(int arg0) {
    rax = [*(arg0 + 0x20)->_collectionViewData invalidate:([*(arg0 + 0x28) invalidateEverything] ^ 0x1) & 0xff];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2109(int arg0, int arg1, int arg2) {
    r14 = arg2;
    r15 = arg1;
    r12 = arg0;
    rbx = [[*(r12 + 0x20)->_invalidatedSupplementaryIndexPaths objectForKeyedSubscript:r15] retain];
    if (rbx == 0x0) {
            r13 = [[NSMutableSet alloc] init];
            [rbx release];
            [*(r12 + 0x20)->_invalidatedSupplementaryIndexPaths setObject:r13 forKeyedSubscript:r15];
            rbx = r13;
    }
    [rbx addObjectsFromArray:r14];
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

int ___49-[UICollectionView _invalidateLayoutWithContext:]_block_invoke.2114(int arg0, int arg1, int arg2) {
    r14 = arg2;
    r15 = arg1;
    r12 = arg0;
    rbx = [[*(r12 + 0x20)->_invalidatedDecorationIndexPaths objectForKeyedSubscript:r15] retain];
    if (rbx == 0x0) {
            r13 = [[NSMutableSet alloc] init];
            [rbx release];
            [*(r12 + 0x20)->_invalidatedDecorationIndexPaths setObject:r13 forKeyedSubscript:r15];
            rbx = r13;
    }
    [rbx addObjectsFromArray:r14];
    rdi = rbx;
    rax = [rdi release];
    return rax;
}

void -[UICollectionView _unhighlightAllItems](void * self, void * _cmd) {
    r12 = self;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [r12->_indexPathsForHighlightedItems copy];
    var_F8 = rax;
    rbx = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r15 = *var_E0;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_E0 != r15) {
                                    objc_enumerationMutation(var_F8);
                            }
                            [r12 _unhighlightItemAtIndexPath:*(var_E8 + r14 * 0x8) animated:0x0 notifyDelegate:0x1];
                            r14 = r14 + 0x1;
                    } while (r14 < rbx);
                    rbx = [var_F8 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    [var_F8 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void * -[UICollectionView _selectableIndexPathForItemContainingHitView:](void * self, void * _cmd, void * arg2) {
    r15 = self;
    rbx = [arg2 retain];
    r14 = 0x0;
    r13 = 0x0;
    if (rbx == 0x0) goto loc_98aa9f;

loc_98a984:
    var_48 = r15;
    var_40 = 0x0;
    goto loc_98a9b9;

loc_98a9b9:
    rdx = [UICollectionViewCell class];
    if ([rbx isKindOfClass:rdx] != 0x0) goto loc_98aa50;

loc_98a9d6:
    rdx = [UICollectionView class];
    if ([rbx isKindOfClass:rdx] != 0x0) goto loc_98aa50;

loc_98a9f3:
    if (([rbx isKindOfClass:[UIControl class]] == 0x0) || ([rbx isTracking] == 0x0)) goto loc_98aa21;

loc_98aa99:
    r14 = 0x0;
    r13 = rbx;
    goto loc_98aa9f;

loc_98aa9f:
    [r13 release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;

loc_98aa21:
    r14 = [[rbx superview] retain];
    [rbx release];
    rbx = r14;
    if (r14 != 0x0) goto loc_98a9b9;

loc_98aa54:
    r13 = var_40;
    r14 = 0x0;
    if ([r13 isKindOfClass:[UICollectionViewCell class]] != 0x0) {
            r14 = [[var_48 indexPathForCell:r13] retain];
    }
    goto loc_98aa9f;

loc_98aa50:
    var_40 = rbx;
    goto loc_98aa54;
}

void -[UICollectionView touchesBegan:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    var_130 = self;
    var_30 = *___stack_chk_guard;
    r12 = [arg2 retain];
    r14 = [arg3 retain];
    rbx = [[self _currentTouch] retain];
    rax = 0x0;
    if (rbx != 0x0) {
            rax = rbx;
            if ([rbx phase] == 0x4) {
                    [rbx release];
                    [var_130 _cancelTouches];
                    rax = 0x0;
            }
    }
    rbx = rax;
    rax = __UIDeviceNativeUserInterfaceIdiom();
    rcx = rbx;
    if ((rcx == 0x0) && (rax != 0x2)) {
            r15 = [[r12 anyObject] retain];
            var_138 = r15;
            rbx = var_130;
            [rbx _setCurrentTouch:r15];
            COND = r15 == 0x0;
            if ((!COND) && (rbx->_pendingSelectionIndexPath == 0x0)) {
                    rax = [var_138 view];
                    rax = [rax retain];
                    var_178 = rax;
                    rax = [rbx _selectableIndexPathForItemContainingHitView:rax];
                    rax = [rax retain];
                    var_170 = rax;
                    if (rax != 0x0) {
                            r13 = rbx;
                            if ([rbx _allowsEffectiveSelection] != 0x0) {
                                    r13->_pendingSelectionIndexPath = [var_170 retain];
                                    [r13->_pendingSelectionIndexPath release];
                                    if (([r13 isDragging] == 0x0) && ([r13 _highlightItemAtIndexPath:r13->_pendingSelectionIndexPath animated:0x0 scrollPosition:0x0 notifyDelegate:0x1] != 0x0)) {
                                            rdi = r13->_pendingDeselectionIndexPaths;
                                            if (rdi != 0x0) {
                                                    [rdi removeAllObjects];
                                            }
                                            else {
                                                    r13->_pendingDeselectionIndexPaths = [[NSMutableSet alloc] init];
                                                    [r13->_pendingDeselectionIndexPaths release];
                                            }
                                            if ([r13 _allowsEffectiveMultipleSelection] == 0x0) {
                                                    var_190 = r14;
                                                    var_188 = r12;
                                                    intrinsic_movaps(var_D0, 0x0);
                                                    intrinsic_movaps(var_E0, 0x0);
                                                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                                                    var_100 = intrinsic_movaps(var_100, 0x0);
                                                    rbx = r13;
                                                    rax = [rbx->_indexPathsForSelectedItems copy];
                                                    var_140 = rax;
                                                    rax = [rax countByEnumeratingWithState:var_100 objects:var_B0 count:0x10];
                                                    var_118 = rax;
                                                    if (rax != 0x0) {
                                                            r15 = *var_F0;
                                                            var_168 = r15;
                                                            do {
                                                                    r14 = 0x0;
                                                                    do {
                                                                            if (*var_F0 != r15) {
                                                                                    objc_enumerationMutation(var_140);
                                                                            }
                                                                            r12 = *(var_F8 + r14 * 0x8);
                                                                            if ([r12 isEqual:rbx->_pendingSelectionIndexPath] == 0x0) {
                                                                                    r15 = rbx;
                                                                                    rbx = [[rbx cellForItemAtIndexPath:r12] retain];
                                                                                    [rbx _setSelected:0x0 animated:0x0];
                                                                                    rdi = rbx;
                                                                                    rbx = r15;
                                                                                    r15 = var_168;
                                                                                    [rdi release];
                                                                                    [rbx->_pendingDeselectionIndexPaths addObject:r12];
                                                                            }
                                                                            r14 = r14 + 0x1;
                                                                    } while (r14 < var_118);
                                                                    rax = [var_140 countByEnumeratingWithState:var_100 objects:var_B0 count:0x10];
                                                                    var_118 = rax;
                                                            } while (rax != 0x0);
                                                    }
                                                    r13 = rbx;
                                                    [var_140 release];
                                                    r12 = var_188;
                                                    r14 = var_190;
                                            }
                                    }
                                    else {
                                            r13->_pendingSelectionIndexPath = 0x0;
                                            [r13->_pendingSelectionIndexPath release];
                                    }
                            }
                    }
                    else {
                            r13 = rbx;
                            if ([rbx _allowsEffectiveMultipleSelection] == 0x0) {
                                    [r13 _unhighlightAllItems];
                            }
                    }
                    [var_170 release];
                    [var_178 release];
                    rbx = r13;
            }
            rdi = rbx;
    }
    else {
            var_138 = rcx;
            rdi = var_130;
    }
    [[rdi super] touchesBegan:r12 withEvent:r14];
    [var_138 release];
    [r14 release];
    [r12 release];
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView touchesMoved:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = self;
    r15 = [arg2 retain];
    r12 = [[r14 _currentTouch] retain];
    rdx = r12;
    rbx = [arg2 containsObject:rdx];
    [r15 release];
    if (rbx != 0x0) {
            r15 = 0x0;
            if (r14->_pendingSelectionIndexPath != 0x0) {
                    r15 = [[r14 cellForItemAtIndexPath:rdx] retain];
                    if (r15 != 0x0) {
                            [var_48 bounds];
                            [r12 locationInView:r15];
                            rbx = CGRectContainsPoint(r12, @selector(locationInView:));
                            rax = [r15 isHighlighted];
                            if (rbx != 0x0) {
                                    COND = rax != 0x0;
                                    if (!COND) {
                                            [r14 _highlightItemAtIndexPath:r14->_pendingSelectionIndexPath animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
                                    }
                            }
                            else {
                                    COND = rax == 0x0;
                                    if (!COND) {
                                            [r14 _unhighlightItemAtIndexPath:r14->_pendingSelectionIndexPath animated:0x0 notifyDelegate:0x1];
                                    }
                            }
                    }
            }
            [r15 release];
    }
    [r12 release];
    return;
}

void -[UICollectionView _userSelectItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    r14 = arg2;
    rbx = self;
    [self _unhighlightItemAtIndexPath:rdx animated:0x0 notifyDelegate:0x1];
    if ([rbx _allowsEffectiveMultipleSelection] != 0x0) {
            r15 = [[rbx cellForItemAtIndexPath:r14, 0x0, 0x1] retain];
            r12 = [r15 isSelected];
            [r15 release];
            if (r12 != 0x0) {
                    rdi = rbx;
                    rdx = r14;
                    [rdi _deselectItemAtIndexPath:rdx animated:0x0 notifyDelegate:0x1];
            }
            else {
                    rdi = rbx;
                    rdx = r14;
                    [rdi _selectItemAtIndexPath:rdx animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
            }
    }
    else {
            rdi = rbx;
            rdx = r14;
            [rdi _selectItemAtIndexPath:rdx animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
    }
    return;
}

void -[UICollectionView touchesEnded:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    rbx = self;
    r12 = [arg2 retain];
    r13 = [arg3 retain];
    r14 = [[rbx _currentTouch] retain];
    rdx = r14;
    rax = [r12 containsObject:rdx];
    if (rax == 0x0) goto loc_98b885;

loc_98b2ce:
    [rbx _setCurrentTouch:0x0, rcx];
    [[rbx super] touchesEnded:rdx withEvent:_objc_msgSend];
    rax = [rbx isDragging];
    r15 = rbx;
    if (r14 == 0x0) goto loc_98b465;

loc_98b327:
    rax = rax ^ 0x1;
    if (rax == 0x0) goto loc_98b465;

loc_98b32f:
    var_220 = r13;
    var_218 = r12;
    rbx = [[r14 view] retain];
    r13 = 0x0;
    if (r15->_pendingSelectionIndexPath == 0x0) goto loc_98b3f4;

loc_98b36f:
    r13 = [[r15 cellForItemAtIndexPath:rdx] retain];
    if (r13 == 0x0) goto loc_98b3f4;

loc_98b38f:
    [var_160 bounds];
    rdx = r13;
    [r14 locationInView:rdx];
    if (CGRectContainsPoint(r14, @selector(locationInView:)) == 0x0) goto loc_98b4e6;

loc_98b3f4:
    if (rbx == 0x0) goto loc_98b486;

loc_98b3fd:
    var_228 = r14;
    rdx = rbx;
    var_1F0 = rbx;
    rbx = r15;
    r15 = [[r15 _selectableIndexPathForItemContainingHitView:rdx] retain];
    if (r15 == 0x0) goto loc_98b507;

loc_98b435:
    r14 = [rbx _allowsEffectiveSelection];
    [r15 release];
    r15 = rbx;
    rbx = var_1F0;
    if (r14 != 0x0) goto loc_98b4a1;

loc_98b511:
    [r13 release];
    [rbx release];
    goto loc_98b524;

loc_98b524:
    if (r15->_pendingSelectionIndexPath != 0x0) {
            [r15 _unhighlightItemAtIndexPath:rdx animated:0x0 notifyDelegate:0x1];
            r15->_pendingSelectionIndexPath = 0x0;
            [r15->_pendingSelectionIndexPath release];
    }
    intrinsic_movaps(var_170, 0x0);
    intrinsic_movaps(var_180, 0x0);
    var_190 = intrinsic_movaps(var_190, 0x0);
    var_1A0 = intrinsic_movaps(var_1A0, 0x0);
    rax = [r15->_indexPathsForSelectedItems retain];
    var_200 = rax;
    rbx = @selector(countByEnumeratingWithState:objects:count:);
    rax = _objc_msgSend(rax, rbx);
    var_1F0 = rax;
    if (rax != 0x0) {
            var_1E8 = r15;
            var_1F8 = *var_190;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_190 != var_1F8) {
                                    objc_enumerationMutation(var_200);
                            }
                            r15 = [[var_1E8 cellForItemAtIndexPath:*(var_198 + r14 * 0x8)] retain];
                            if ([r15 isSelected] == 0x0) {
                                    [r15 _setSelected:0x1 animated:0x0];
                            }
                            [r15 release];
                            r14 = r14 + 0x1;
                    } while (r14 < var_1F0);
                    rbx = @selector(countByEnumeratingWithState:objects:count:);
                    rax = _objc_msgSend(var_200, rbx);
                    var_1F0 = rax;
            } while (rax != 0x0);
            r15 = var_1E8;
    }
    var_1E8 = r15;
    [var_200 release];
    intrinsic_movaps(var_1B0, 0x0);
    intrinsic_movaps(var_1C0, 0x0);
    var_1D0 = intrinsic_movaps(var_1D0, 0x0);
    var_1E0 = intrinsic_movaps(var_1E0, 0x0);
    rax = [r15->_pendingDeselectionIndexPaths retain];
    var_200 = rax;
    rax = _objc_msgSend(rax, rbx);
    var_1F0 = rax;
    if (rax != 0x0) {
            var_1F8 = *var_1D0;
            do {
                    r14 = 0x0;
                    do {
                            if (*var_1D0 != var_1F8) {
                                    objc_enumerationMutation(var_200);
                            }
                            r12 = [[var_1E8 cellForItemAtIndexPath:*(var_1D8 + r14 * 0x8)] retain];
                            if ([r12 isSelected] != 0x0) {
                                    [r12 _setSelected:0x0 animated:0x0];
                            }
                            [r12 release];
                            r14 = r14 + 0x1;
                    } while (r14 < var_1F0);
                    rax = [var_200 countByEnumeratingWithState:var_1E0 objects:var_130 count:0x10];
                    var_1F0 = rax;
            } while (rax != 0x0);
    }
    [var_200 release];
    var_1E8->_pendingDeselectionIndexPaths = 0x0;
    [var_1E8->_pendingDeselectionIndexPaths release];
    r12 = var_218;
    r13 = var_220;
    r14 = var_228;
    goto loc_98b885;

loc_98b885:
    [r14 release];
    [r13 release];
    [r12 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_98b4a1:
    if (r15->_pendingSelectionIndexPath != 0x0) goto loc_98b4c2;

loc_98b4aa:
    if ([r15 _allowsEffectiveMultipleSelection] != 0x0) goto loc_98b4d2;

loc_98b4be:
    rdx = r15->_pendingSelectionIndexPath;
    goto loc_98b4c2;

loc_98b4c2:
    [r15 _userSelectItemAtIndexPath:rdx];
    goto loc_98b4d2;

loc_98b4d2:
    r15->_pendingSelectionIndexPath = 0x0;
    [r15->_pendingSelectionIndexPath release];
    goto loc_98b511;

loc_98b507:
    r15 = rbx;
    rbx = var_1F0;
    goto loc_98b511;

loc_98b486:
    var_228 = r14;
    if ([r15 _allowsEffectiveSelection] == 0x0) goto loc_98b511;
    goto loc_98b4a1;

loc_98b4e6:
    var_228 = r14;
    [r15->_pendingDeselectionIndexPaths removeAllObjects];
    goto loc_98b511;

loc_98b465:
    var_228 = r14;
    var_220 = r13;
    var_218 = r12;
    goto loc_98b524;
}

void -[UICollectionView _selectAllSelectedItems](void * self, void * _cmd) {
    var_100 = self;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [self->_indexPathsForSelectedItems retain];
    var_110 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_F8 = rax;
    if (rax != 0x0) {
            var_108 = *var_E0;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_E0 != var_108) {
                                    objc_enumerationMutation(var_110);
                            }
                            r14 = [[var_100 cellForItemAtIndexPath:*(var_E8 + r12 * 0x8)] retain];
                            [r14 _setSelected:0x1 animated:0x0];
                            [r14 release];
                            r12 = r12 + 0x1;
                    } while (r12 < var_F8);
                    rax = [var_110 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_F8 = rax;
            } while (rax != 0x0);
    }
    [var_110 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _cancelTouches](void * self, void * _cmd) {
    rbx = self;
    [self _setCurrentTouch:0x0];
    [rbx _unhighlightItemAtIndexPath:rbx->_pendingSelectionIndexPath animated:0x0 notifyDelegate:0x1];
    rbx->_pendingSelectionIndexPath = 0x0;
    [rbx->_pendingSelectionIndexPath release];
    if ([rbx isTracking] == 0x0) {
            [rbx _selectAllSelectedItems];
    }
    rdi = rbx->_pendingDeselectionIndexPaths;
    rbx->_pendingDeselectionIndexPaths = 0x0;
    [rdi release];
    return;
}

void -[UICollectionView touchesCancelled:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r14 = self;
    r12 = [arg2 retain];
    r15 = [arg3 retain];
    rbx = [[r14 _currentTouch] retain];
    r13 = [r12 containsObject:rbx];
    [rbx release];
    if (r13 != 0x0) {
            [[r14 super] touchesCancelled:r12 withEvent:r15];
            [r14 _cancelTouches];
    }
    [r15 release];
    [r12 release];
    return;
}

void -[UICollectionView didMoveToWindow](void * self, void * _cmd) {
    r15 = self;
    rbx = [[self window] retain];
    if (rbx != 0x0) {
            [rbx release];
    }
    else {
            r12 = [[r15 _currentTouch] retain];
            [r12 release];
            [rbx release];
            if (r12 != 0x0) {
                    [r15 _cancelTouches];
            }
    }
    rbx = [[r15 window] retain];
    [rbx release];
    if (rbx != 0x0) {
            rdi = r15;
            [rdi _updateDefaultLayoutMargins];
    }
    return;
}

void -[UICollectionView _scrollViewDidEndDraggingWithDeceleration:](void * self, void * _cmd, bool arg2) {
    [[self super] _scrollViewDidEndDraggingWithDeceleration:arg2 & 0xff];
    [self _selectAllSelectedItems];
    self->_pendingDeselectionIndexPaths = 0x0;
    [self->_pendingDeselectionIndexPaths release];
    return;
}

struct CGPoint -[UICollectionView _contentOffsetForNewFrame:oldFrame:newContentSize:andOldContentSize:](void * self, void * _cmd, struct CGRect arg2, struct CGRect arg3, struct CGSize arg4, struct CGSize arg5) {
    var_78 = intrinsic_movsd(var_78, xmm3, arg2, arg3, arg4, arg5);
    var_80 = intrinsic_movsd(var_80, xmm2);
    var_90 = intrinsic_movsd(var_90, xmm1);
    var_88 = intrinsic_movsd(var_88, xmm0);
    [var_28 contentInset];
    xmm0 = intrinsic_movaps(xmm0, arg_10);
    xmm1 = intrinsic_xorpd(xmm1, xmm1);
    var_50 = intrinsic_movapd(var_50, xmm1);
    var_40 = intrinsic_movaps(var_40, xmm0);
    rdi = var_70;
    [rdi bounds];
    rax = arg_30;
    var_58 = arg_38;
    var_60 = rax;
    xmm3 = intrinsic_xorpd(xmm3, xmm3);
    xmm0 = intrinsic_movsd(xmm0, var_80);
    xmm0 = intrinsic_ucomisd(xmm0, xmm3);
    xmm2 = intrinsic_xorpd(xmm2, xmm2);
    if (xmm0 > 0x0) {
            rax = CGRectGetMidX(rdi);
            xmm3 = intrinsic_xorpd(xmm3, xmm3);
            xmm2 = intrinsic_movapd(xmm2, xmm0);
            xmm2 = intrinsic_divsd(xmm2, var_80);
    }
    xmm0 = intrinsic_movsd(xmm0, var_78);
    xmm0 = intrinsic_ucomisd(xmm0, xmm3);
    if (xmm0 > 0x0) {
            var_80 = intrinsic_movsd(var_80, xmm2);
            rax = CGRectGetMidY(rdi);
            xmm2 = intrinsic_movsd(xmm2, var_80);
            xmm3 = intrinsic_movapd(xmm3, xmm0);
            xmm3 = intrinsic_divsd(xmm3, var_78);
    }
    xmm0 = intrinsic_movsd(xmm0, var_40);
    xmm1 = intrinsic_movsd(xmm1, var_88);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 < 0x0) {
            xmm0 = intrinsic_movsd(xmm0, var_20);
            xmm0 = intrinsic_xorpd(xmm0, *(int128_t *)0xc4f600);
            xmm0 = intrinsic_ucomisd(xmm0, var_70);
            if (xmm0 < 0x0) {
                    var_78 = intrinsic_movsd(var_78, xmm3);
                    xmm2 = intrinsic_mulsd(xmm2, xmm1);
                    var_80 = intrinsic_movsd(var_80, xmm2);
                    CGRectGetWidth(rdi);
                    xmm0 = intrinsic_mulsd(xmm0, *0xc4f838);
                    xmm0 = intrinsic_addsd(xmm0, var_80);
                    round(xmm0);
                    var_50 = intrinsic_movsd(var_50, xmm0);
                    rax = CGRectGetMinX(rdi);
                    xmm1 = intrinsic_movsd(xmm1, var_20);
                    xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 > 0x0) {
                            var_50 = intrinsic_movsd(var_50, xmm1);
                    }
                    else {
                            xmm1 = intrinsic_movsd(xmm1, var_50);
                    }
                    xmm2 = intrinsic_movsd(xmm2, var_90);
                    xmm3 = intrinsic_movsd(xmm3, var_78);
                    xmm0 = intrinsic_movsd(xmm0, var_40);
                    xmm1 = intrinsic_addsd(xmm1, xmm0);
                    xmm4 = intrinsic_movsd(xmm4, var_88);
                    xmm4 = intrinsic_addsd(xmm4, var_10);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                    if (xmm1 > 0x0) {
                            var_50 = intrinsic_movsd(var_50, intrinsic_subsd(xmm4, xmm0));
                    }
            }
            else {
                    var_50 = intrinsic_movsd(var_50, xmm0);
                    xmm2 = intrinsic_movsd(xmm2, var_90);
            }
    }
    else {
            xmm0 = intrinsic_movsd(xmm0, var_20);
            xmm0 = intrinsic_xorpd(xmm0, *(int128_t *)0xc4f600);
            var_50 = intrinsic_movlpd(var_50, xmm0);
            xmm2 = intrinsic_movsd(xmm2, var_90);
    }
    xmm0 = intrinsic_movsd(xmm0, var_38);
    xmm0 = intrinsic_ucomisd(xmm0, xmm2);
    if (xmm0 < 0x0) {
            xmm1 = intrinsic_movsd(xmm1, var_28);
            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
            xmm1 = intrinsic_ucomisd(xmm1, var_68);
            if (xmm1 < 0x0) {
                    xmm3 = intrinsic_mulsd(xmm3, xmm2);
                    var_78 = intrinsic_movsd(var_78, xmm3);
                    CGRectGetHeight(rdi);
                    xmm0 = intrinsic_mulsd(xmm0, *0xc4f838);
                    xmm0 = intrinsic_addsd(xmm0, var_78);
                    round(xmm0);
                    var_48 = intrinsic_movsd(var_48, xmm0);
                    rax = CGRectGetMinY(rdi);
                    xmm1 = intrinsic_movsd(xmm1, var_28);
                    xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 > 0x0) {
                            var_48 = intrinsic_movsd(var_48, xmm1);
                    }
                    else {
                            xmm1 = intrinsic_movsd(xmm1, var_48);
                    }
                    xmm0 = intrinsic_movsd(xmm0, var_38);
                    xmm2 = intrinsic_movapd(xmm2, xmm1);
                    xmm2 = intrinsic_addsd(xmm2, xmm0);
                    xmm3 = intrinsic_movsd(xmm3, var_90);
                    xmm3 = intrinsic_addsd(xmm3, var_18);
                    xmm2 = intrinsic_ucomisd(xmm2, xmm3);
                    if (xmm2 > 0x0) {
                            xmm3 = intrinsic_subsd(xmm3, xmm0);
                            intrinsic_movsd(var_48, xmm3);
                            intrinsic_movapd(xmm1, xmm3);
                    }
            }
            else {
                    intrinsic_movsd(var_48, xmm1);
            }
    }
    else {
            intrinsic_movlpd(var_48, intrinsic_xorpd(intrinsic_movsd(xmm1, var_28), *(int128_t *)0xc4f600));
    }
    intrinsic_movsd(xmm0, var_50);
    return rax;
}

bool -[UICollectionView _shouldShowMenuForCell:](void * self, void * _cmd, void * arg2) {
    rdx = arg2;
    rbx = self;
    if (rbx->_collectionViewFlags >= 0x0) {
            rbx = 0x0;
    }
    else {
            r14 = *_OBJC_IVAR_$_UIScrollView._delegate + rbx;
            r15 = [rdx retain];
            r14 = objc_loadWeakRetained(r14);
            r12 = [rbx indexPathForCell:r15];
            [r15 release];
            r15 = [r12 retain];
            rbx = [r14 collectionView:rbx shouldShowMenuForItemAtIndexPath:r15];
            [r15 release];
            [r14 release];
    }
    rax = rbx;
    return rax;
}

bool -[UICollectionView _canPerformAction:forCell:sender:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r12 = arg4;
    r14 = arg2;
    rbx = self;
    r15 = [arg3 retain];
    if (rbx->_collectionViewFlags >= 0x0) {
            rbx = 0x0;
    }
    else {
            r13 = *_OBJC_IVAR_$_UIScrollView._delegate + rbx;
            var_30 = [r12 retain];
            r12 = objc_loadWeakRetained(r13);
            r13 = [[rbx indexPathForCell:r15] retain];
            rbx = [r12 collectionView:rbx canPerformAction:r14 forItemAtIndexPath:r13 withSender:var_30];
            [var_30 release];
            [r13 release];
            [r12 release];
    }
    [r15 release];
    rax = rbx;
    return rax;
}

void -[UICollectionView _performAction:forCell:sender:](void * self, void * _cmd, void * arg2, void * arg3, void * arg4) {
    r12 = arg4;
    r14 = arg2;
    rbx = self;
    r15 = [arg3 retain];
    if (rbx->_collectionViewFlags < 0x0) {
            r13 = *_OBJC_IVAR_$_UIScrollView._delegate + rbx;
            r12 = [r12 retain];
            var_30 = r14;
            r14 = objc_loadWeakRetained(r13);
            r13 = [[rbx indexPathForCell:r15] retain];
            [r14 collectionView:rbx performAction:var_30 forItemAtIndexPath:r13 withSender:r12];
            [r12 release];
            [r13 release];
            [r14 release];
    }
    rdi = r15;
    [rdi release];
    return;
}

void -[UICollectionView _cellMenuDismissed](void * self, void * _cmd) {
    [self _selectAllSelectedItems];
    return;
}

bool -[UICollectionView canBecomeFirstResponder](void * self, void * _cmd) {
    r14 = self;
    r12 = [[self window] retain];
    if (r12 != 0x0) {
            r15 = [[r14 window] retain];
            rbx = [[r15 screen] retain];
            var_40 = [rbx _userInterfaceIdiom];
            [rbx release];
            [r15 release];
            [r12 release];
            rax = 0x1;
            if (var_40 != 0x3) {
                    rax = [[r14 super] canBecomeFirstResponder];
            }
    }
    else {
            [r12 release];
            rax = [[r14 super] canBecomeFirstResponder];
    }
    return rax;
}

void -[UICollectionView _highlightFirstVisibleItemIfAppropriate](void * self, void * _cmd) {
    r14 = self;
    r15 = [[self window] retain];
    r12 = [[r15 _screen] retain];
    rbx = [[r12 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"] retain];
    if ([rbx integerValue] != 0x2) goto loc_98c4ff;

loc_98c3af:
    var_38 = r14;
    r13 = [[r14 visibleCells] retain];
    var_30 = [r13 count];
    [r13 release];
    [rbx release];
    [r12 release];
    [r15 release];
    if (var_30 == 0x0) goto .l1;

loc_98c408:
    r13 = var_38;
    rbx = [[r13 indexPathsForVisibleItems] retain];
    r15 = [[rbx sortedArrayUsingSelector:@selector(compare:)] retain];
    [rbx release];
    rbx = [[r13->_collectionViewData indexPathForItemAtGlobalIndex:[r13 highlightedGlobalItem]] retain];
    rdx = rbx;
    if ([r15 containsObject:rdx] == 0x0) {
            r14 = [[r15 firstObject] retain];
            rax = [r13->_collectionViewData globalIndexForItemAtIndexPath:r14];
            [r13 _unhighlightAllItemsAndHighlightGlobalItem:rax];
            [r14 release];
    }
    [rbx release];
    rdi = r15;
    goto loc_98c518;

loc_98c518:
    [rdi release];
    return;

.l1:
    return;

loc_98c4ff:
    [rbx release];
    [r12 release];
    rdi = r15;
    goto loc_98c518;
}

void -[UICollectionView _unhighlightAllItemsAndHighlightGlobalItem:](void * self, void * _cmd, NSInteger arg2) {
    r14 = [[self->_collectionViewData indexPathForItemAtGlobalIndex:arg2] retain];
    rbx = [[NSIndexPath indexPathForItem:arg2 inSection:0x7fffffffffffffff] retain];
    [self _highlightItemAtIndexPath:rbx animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
    [rbx release];
    [self _highlightItemAtIndexPath:r14 animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView pressesBegan:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r12 = self;
    r14 = [arg2 retain];
    r15 = [arg3 retain];
    r13 = [[r15 _screen] retain];
    if (r13 == 0x0) {
            rbx = [[UIScreen mainScreen] retain];
            [r13 release];
            r13 = rbx;
    }
    if ((__UIPressesContainsPressType() != 0x0) && ([r13 supportsFocus] != 0x0)) {
            rbx = [[r12 _window] retain];
            var_40 = [[rbx _focusedView] retain];
            [rbx release];
            rbx = [[r12 visibleCells] retain];
            var_48 = r12;
            r12 = [rbx containsObject:var_40];
            [rbx release];
            if (r12 != 0x0) {
                    rbx = [[var_48 indexPathForCell:var_40] retain];
                    [var_48 _highlightItemAtIndexPath:rbx animated:0x0 scrollPosition:0x0 notifyDelegate:0x1];
                    [rbx release];
            }
            [var_40 release];
    }
    else {
            [[r12 super] pressesBegan:r14 withEvent:r15];
    }
    [r13 release];
    [r15 release];
    [r14 release];
    return;
}

void -[UICollectionView pressesChanged:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r13 = self;
    r14 = [arg2 retain];
    r12 = [arg3 retain];
    r15 = [[r12 _screen] retain];
    if (r15 == 0x0) {
            rbx = r13;
            r13 = [[UIScreen mainScreen] retain];
            [r15 release];
            r15 = r13;
            r13 = rbx;
    }
    if ((__UIPressesContainsPressType() == 0x0) || ([r15 supportsFocus] == 0x0)) {
            [[r13 super] pressesChanged:r14 withEvent:r12];
    }
    [r15 release];
    [r12 release];
    [r14 release];
    return;
}

void -[UICollectionView pressesEnded:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r13 = self;
    r14 = [arg2 retain];
    r12 = [arg3 retain];
    r15 = [[r12 _screen] retain];
    if (r15 == 0x0) {
            rbx = r13;
            r13 = [[UIScreen mainScreen] retain];
            [r15 release];
            r15 = r13;
            r13 = rbx;
    }
    if ((__UIPressesContainsPressType() != 0x0) && ([r15 supportsFocus] != 0x0)) {
            rax = [r13 highlightedGlobalItem];
            if (rax >= 0x0) {
                    rdi = r13;
                    r13 = [[r13->_collectionViewData indexPathForItemAtGlobalIndex:rax] retain];
                    [rdi _userSelectItemAtIndexPath:r13];
                    [r13 release];
            }
    }
    else {
            [[r13 super] pressesEnded:r14 withEvent:r12];
    }
    [r15 release];
    [r12 release];
    [r14 release];
    return;
}

void -[UICollectionView pressesCancelled:withEvent:](void * self, void * _cmd, void * arg2, void * arg3) {
    r12 = self;
    r14 = [arg2 retain];
    r15 = [arg3 retain];
    r13 = [[r15 _screen] retain];
    if (r13 == 0x0) {
            rbx = [[UIScreen mainScreen] retain];
            [r13 release];
            r13 = rbx;
    }
    if ((__UIPressesContainsPressType() != 0x0) && ([r13 supportsFocus] != 0x0)) {
            rbx = [[r12 _window] retain];
            var_40 = [[rbx _focusedView] retain];
            [rbx release];
            rbx = [[r12 visibleCells] retain];
            var_48 = r12;
            r12 = [rbx containsObject:var_40];
            [rbx release];
            if (r12 != 0x0) {
                    rbx = [[var_48 indexPathForCell:var_40] retain];
                    [var_48 _unhighlightItemAtIndexPath:rbx animated:0x0 notifyDelegate:0x1];
                    [rbx release];
            }
            [var_40 release];
    }
    else {
            [[r12 super] pressesCancelled:r14 withEvent:r15];
    }
    [r13 release];
    [r15 release];
    [r14 release];
    return;
}

NSInteger -[UICollectionView highlightedGlobalItem](void * self, void * _cmd) {
    rbx = self;
    if ([rbx->_indexPathsForHighlightedItems count] != 0x0) {
            r14 = rbx->_collectionViewData;
            rbx = [[rbx->_indexPathsForHighlightedItems anyObject] retain];
            r14 = [r14 globalIndexForItemAtIndexPath:rbx];
            [rbx release];
            rax = r14;
    }
    else {
            rax = 0xffffffffffffffff;
    }
    return rax;
}

NSInteger -[UICollectionView maximumGlobalItemIndex](void * self, void * _cmd) {
    rax = [self->_collectionViewData numberOfItems];
    return rax;
}

void -[UICollectionView _trackLayoutValue:forKey:](void * self, void * _cmd, double arg2, void * arg3) {
    xmm0 = arg2;
    var_30 = intrinsic_movsd(var_30, xmm0, arg3);
    r15 = self;
    r14 = [arg3 retain];
    if (r15->_shouldAccumulateTrackedLayoutValues != 0x0) {
            if (r15->_interactiveTransitionValueTrackingDict == 0x0) {
                    r15->_interactiveTransitionValueTrackingDict = [[NSMutableDictionary alloc] initWithCapacity:0x2];
                    [r15->_interactiveTransitionValueTrackingDict release];
            }
            if (r15->_trackedValuesKeys == 0x0) {
                    r15->_trackedValuesKeys = [[NSMutableArray alloc] initWithCapacity:0x2];
                    [r15->_trackedValuesKeys release];
            }
            rdx = r14;
            rbx = [[r15->_interactiveTransitionValueTrackingDict objectForKey:rdx] retain];
            if (rbx == 0x0) {
                    r12 = [[_UICollectionViewTrackedValue alloc] init];
                    [rbx release];
                    [r15->_interactiveTransitionValueTrackingDict setValue:r12 forKey:r14];
                    rdx = r14;
                    [r15->_trackedValuesKeys addObject:rdx];
                    rbx = r12;
            }
            intrinsic_movsd(xmm0, var_30);
            [rbx addValue:rdx];
            [rbx release];
    }
    rdi = r14;
    [rdi release];
    return;
}

double -[UICollectionView _trackedLayoutValueForKey:](void * self, void * _cmd, void * arg2) {
    rbx = [[self->_interactiveTransitionValueTrackingDict objectForKey:arg2] retain];
    if (rbx != 0x0) {
            [rbx trackedValue];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
    }
    var_10 = intrinsic_movsd(var_10, xmm0);
    [rbx release];
    xmm0 = intrinsic_movsd(xmm0, var_10);
    return xmm0;
}

void -[UICollectionView _updateTrackedLayoutValuesWith:](void * self, void * _cmd, void * arg2) {
    var_30 = self;
    rbx = [arg2 retain];
    var_48 = rbx;
    rax = [rbx count];
    var_40 = rax;
    if (rax > 0x0) {
            r13 = 0x0;
            r12 = _objc_release;
            do {
                    r14 = [[rbx objectAtIndex:r13, rcx] retain];
                    [r14 value];
                    var_38 = intrinsic_movsd(var_38, xmm0);
                    rdi = r14;
                    r14 = r12;
                    (r14)(rdi, @selector(value), r13, rcx);
                    r12 = [[var_30->_trackedValuesKeys objectAtIndex:r13, var_30] retain];
                    rcx = var_30;
                    rbx = [[rcx->_interactiveTransitionValueTrackingDict objectForKey:r12, rcx] retain];
                    xmm0 = intrinsic_movsd(xmm0, var_38);
                    [rbx setTrackedValue:r12, rcx];
                    (r14)(rbx, @selector(setTrackedValue:), r12, rcx);
                    rbx = var_48;
                    (r14)(r12, @selector(setTrackedValue:), r12, rcx);
                    r12 = r14;
                    r13 = r13 + 0x1;
            } while (var_40 != r13);
    }
    rdi = rbx;
    [rdi release];
    return;
}

void * -[UICollectionView _dynamicAnimationsForTrackValues](void * self, void * _cmd) {
    r13 = self;
    var_30 = *___stack_chk_guard;
    r12 = 0x0;
    if ([r13->_trackedValuesKeys count] != 0x0) {
            var_168 = [[NSMutableArray alloc] initWithCapacity:[r13->_trackedValuesKeys count]];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_C0, xmm0);
            intrinsic_movapd(var_D0, xmm0);
            var_E0 = intrinsic_movapd(var_E0, xmm0);
            var_F0 = intrinsic_movapd(var_F0, xmm0);
            rax = [r13->_trackedValuesKeys retain];
            var_180 = rax;
            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            var_118 = rax;
            if (rax != 0x0) {
                    var_170 = r13;
                    var_178 = *var_E0;
                    do {
                            rbx = 0x0;
                            do {
                                    if (*var_E0 != var_178) {
                                            objc_enumerationMutation(var_180);
                                    }
                                    rdx = *(var_E8 + rbx * 0x8);
                                    var_F8 = rbx;
                                    rbx = [[var_170->_interactiveTransitionValueTrackingDict objectForKey:rdx] retain];
                                    var_100 = rbx;
                                    [rbx speed];
                                    var_108 = intrinsic_movsd(var_108, xmm0);
                                    [rbx trackedValue];
                                    var_110 = intrinsic_movsd(var_110, xmm0);
                                    rax = [_UIDynamicValueAnimation alloc];
                                    xmm0 = intrinsic_movsd(xmm0, var_110);
                                    xmm1 = intrinsic_movsd(xmm1, var_108);
                                    xmm2 = intrinsic_movsd(xmm2, *0xc4f870);
                                    r12 = [rax initWithValue:rdx velocity:rcx unitSize:r8];
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    rbx = [[_UIDynamicAnimationActiveValue upperBoundary:0x1 ofType:rcx] retain];
                                    var_108 = rbx;
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    r13 = [[_UIDynamicAnimationActiveValue lowerBoundary:0x1 ofType:rcx] retain];
                                    [r12 addActiveValue:rbx];
                                    [r12 addActiveValue:r13];
                                    [var_168 addObject:r12];
                                    [r13 release];
                                    [var_108 release];
                                    [r12 release];
                                    [var_100 release];
                                    rbx = var_F8 + 0x1;
                            } while (rbx < var_118);
                            r8 = 0x10;
                            rcx = var_B0;
                            rax = [var_180 countByEnumeratingWithState:var_F0 objects:rcx count:r8];
                            var_118 = rax;
                    } while (rax != 0x0);
            }
            [var_180 release];
            r12 = [var_168 retain];
            [var_168 release];
    }
    if (*___stack_chk_guard == var_30) {
            rdi = r12;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void -[UICollectionView encodeRestorableStateWithCoder:](void * self, void * _cmd, void * arg2) {
    var_108 = self;
    r14 = [arg2 retain];
    rbx = [[self dataSource] retain];
    r15 = [[rbx class] conformsToProtocol:__objc_proto_UIDataSourceModelAssociation_protocol];
    rdi = rbx;
    rbx = r14;
    [rdi release];
    [[self super] encodeRestorableStateWithCoder:rbx];
    r13 = [[self indexPathsForSelectedItems] retain];
    if ([r13 count] != 0x0) {
            rdx = r13;
            [rbx encodeObject:rdx forKey:@"CollectionViewSelectedCellIndexPaths"];
            if (r15 != 0x0) {
                    var_110 = [[var_108 dataSource] retain];
                    if ([r13 count] != 0x0) {
                            var_138 = rbx;
                            var_120 = [[NSMutableArray array] retain];
                            intrinsic_movaps(var_D0, 0x0);
                            intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            var_100 = intrinsic_movaps(var_100, 0x0);
                            rax = [r13 retain];
                            var_128 = rax;
                            r15 = [rax countByEnumeratingWithState:var_100 objects:var_B0 count:0x10];
                            if (r15 != 0x0) {
                                    var_140 = r13;
                                    r13 = *var_F0;
                                    do {
                                            rbx = 0x0;
                                            do {
                                                    if (*var_F0 != r13) {
                                                            objc_enumerationMutation(var_128);
                                                    }
                                                    r14 = [[var_110 modelIdentifierForElementAtIndexPath:*(var_F8 + rbx * 0x8) inView:var_108] retain];
                                                    if (r14 != 0x0) {
                                                            [var_120 addObject:r14];
                                                    }
                                                    [r14 release];
                                                    rbx = rbx + 0x1;
                                            } while (rbx < r15);
                                            r15 = [var_128 countByEnumeratingWithState:var_100 objects:var_B0 count:0x10];
                                    } while (r15 != 0x0);
                            }
                            else {
                                    var_140 = r13;
                            }
                            [var_128 release];
                            r14 = var_120;
                            rbx = var_138;
                            if ([r14 count] != 0x0) {
                                    [rbx encodeObject:r14 forKey:@"CollectionViewSelectedCellModelIdentifiers"];
                            }
                            [r14 release];
                            r13 = var_140;
                    }
                    [var_110 release];
            }
    }
    [r13 release];
    [rbx release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

bool -[UICollectionView _indexPathIsValid:](void * self, void * _cmd, void * arg2) {
    rbx = arg2;
    r12 = self;
    if (rbx != 0x0) {
            r14 = [rbx section];
            r15 = [rbx item];
            if ([r12 numberOfSections] > r14) {
                    rax = [r12 numberOfItemsInSection:r14];
                    rax = r15 < rax ? 0x1 : 0x0;
            }
            else {
                    rax = 0x0;
            }
    }
    else {
            rax = 0x0;
    }
    return rax;
}

void -[UICollectionView decodeRestorableStateWithCoder:](void * self, void * _cmd, void * arg2) {
    r12 = self;
    r14 = [arg2 retain];
    var_238 = r14;
    [r12 layoutIfNeeded];
    [r12 contentOffset];
    var_208 = intrinsic_movsd(var_208, xmm0);
    var_210 = intrinsic_movsd(var_210, xmm1);
    rbx = [[r12 dataSource] retain];
    var_218 = [[rbx class] conformsToProtocol:__objc_proto_UIDataSourceModelAssociation_protocol];
    [rbx release];
    rdx = r14;
    [[r12 super] decodeRestorableStateWithCoder:rdx];
    [r12 _reloadDataIfNeeded];
    [r12 contentOffset];
    xmm2 = intrinsic_movapd(xmm2, xmm1);
    xmm3 = intrinsic_movsd(xmm3, var_210);
    xmm1 = intrinsic_movsd(xmm1, var_208);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if ((xmm1 == 0x0) && (!CPU_FLAGS & P)) {
            xmm3 = intrinsic_ucomisd(xmm3, xmm2);
            if ((xmm3 != 0x0) || (!CPU_FLAGS & NP)) {
                    var_230 = intrinsic_movsd(var_230, xmm2);
                    var_220 = intrinsic_movsd(var_220, xmm0);
                    [r12 contentSize];
                    var_228 = intrinsic_movsd(var_228, xmm0);
                    [var_160 frame];
                    xmm1 = intrinsic_movsd(xmm1, var_228);
                    xmm1 = intrinsic_subsd(xmm1, var_150);
                    xmm0 = intrinsic_movsd(xmm0, var_220);
                    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                    if (xmm0 <= 0x0) {
                            [r12 contentSize];
                            var_220 = intrinsic_movsd(var_220, xmm1);
                            [var_180 frame];
                            xmm1 = intrinsic_movsd(xmm1, var_220);
                            xmm1 = intrinsic_subsd(xmm1, var_168);
                            xmm0 = intrinsic_movsd(xmm0, var_230);
                            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                            if (xmm0 > 0x0) {
                                    xmm0 = intrinsic_movsd(xmm0, var_208);
                                    intrinsic_movsd(xmm1, var_210);
                                    [r12 setContentOffset:rdx];
                            }
                            else {
                                    [r12 _updateVisibleCellsNow:0x1];
                            }
                    }
                    else {
                            xmm0 = intrinsic_movsd(xmm0, var_208);
                            intrinsic_movsd(xmm1, var_210);
                            [r12 setContentOffset:rdx];
                    }
            }
    }
    else {
            var_230 = intrinsic_movsd(var_230, xmm2);
            var_220 = intrinsic_movsd(var_220, xmm0);
            [r12 contentSize];
            var_228 = intrinsic_movsd(var_228, xmm0);
            [var_160 frame];
            xmm1 = intrinsic_movsd(xmm1, var_228);
            xmm1 = intrinsic_subsd(xmm1, var_150);
            xmm0 = intrinsic_movsd(xmm0, var_220);
            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
            if (xmm0 <= 0x0) {
                    [r12 contentSize];
                    var_220 = intrinsic_movsd(var_220, xmm1);
                    [var_180 frame];
                    xmm1 = intrinsic_movsd(xmm1, var_220);
                    xmm1 = intrinsic_subsd(xmm1, var_168);
                    xmm0 = intrinsic_movsd(xmm0, var_230);
                    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                    if (xmm0 > 0x0) {
                            xmm0 = intrinsic_movsd(xmm0, var_208);
                            intrinsic_movsd(xmm1, var_210);
                            [r12 setContentOffset:rdx];
                    }
                    else {
                            [r12 _updateVisibleCellsNow:0x1];
                    }
            }
            else {
                    xmm0 = intrinsic_movsd(xmm0, var_208);
                    intrinsic_movsd(xmm1, var_210);
                    [r12 setContentOffset:rdx];
            }
    }
    if (var_218 != 0x0) {
            var_208 = [[r12 dataSource] retain];
            r15 = [[var_238 decodeObjectForKey:@"CollectionViewSelectedCellModelIdentifiers"] retain];
            if (r15 != 0x0) {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_190, xmm0);
                    intrinsic_movapd(var_1A0, xmm0);
                    var_1B0 = intrinsic_movapd(var_1B0, xmm0);
                    var_1C0 = intrinsic_movapd(var_1C0, xmm0);
                    r15 = [r15 retain];
                    var_220 = r15;
                    r14 = [r15 countByEnumeratingWithState:var_1C0 objects:var_B0 count:0x10];
                    if (r14 != 0x0) {
                            var_210 = *var_1B0;
                            do {
                                    rbx = 0x0;
                                    do {
                                            if (*var_1B0 != var_210) {
                                                    objc_enumerationMutation(var_220);
                                            }
                                            r15 = [[var_208 indexPathForElementWithModelIdentifier:*(var_1B8 + rbx * 0x8) inView:r12] retain];
                                            if ((r15 != 0x0) && ([r12 _indexPathIsValid:r15] != 0x0)) {
                                                    [r12 selectItemAtIndexPath:r15 animated:0x0 scrollPosition:0x0];
                                            }
                                            [r15 release];
                                            rbx = rbx + 0x1;
                                    } while (rbx < r14);
                                    r15 = var_220;
                                    r14 = [r15 countByEnumeratingWithState:var_1C0 objects:var_B0 count:0x10];
                            } while (r14 != 0x0);
                    }
                    [r15 release];
            }
            [r15 release];
            [var_208 release];
    }
    else {
            r14 = [[var_238 decodeObjectForKey:@"CollectionViewSelectedCellIndexPaths"] retain];
            rax = [r14 count];
            if (rax != 0x0) {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_1D0, xmm0);
                    intrinsic_movapd(var_1E0, xmm0);
                    var_1F0 = intrinsic_movapd(var_1F0, xmm0);
                    var_200 = intrinsic_movapd(var_200, xmm0);
                    var_228 = r14;
                    rax = [r14 retain];
                    var_210 = rax;
                    rbx = [rax countByEnumeratingWithState:var_200 objects:var_130 count:0x10];
                    if (rbx != 0x0) {
                            var_208 = *var_1F0;
                            do {
                                    r14 = 0x0;
                                    do {
                                            if (*var_1F0 != var_208) {
                                                    objc_enumerationMutation(var_210);
                                            }
                                            r13 = *(var_1F8 + r14 * 0x8);
                                            if ([r12 _indexPathIsValid:r13] != 0x0) {
                                                    [r12 selectItemAtIndexPath:r13 animated:0x0 scrollPosition:0x0];
                                            }
                                            r14 = r14 + 0x1;
                                    } while (r14 < rbx);
                                    rbx = [var_210 countByEnumeratingWithState:var_200 objects:var_130 count:0x10];
                            } while (rbx != 0x0);
                    }
                    [var_210 release];
                    r14 = var_228;
            }
            [r14 release];
    }
    [var_238 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _updateContentFocusContainerGuides](void * self, void * _cmd) {
    return;
}

void * -[UICollectionView _contentFocusContainerGuide](void * self, void * _cmd) {
    rax = objc_retainAutoreleaseReturnValue(self->_contentFocusContainerGuide);
    return rax;
}

void -[UICollectionView setRemembersLastFocusedIndexPath:](void * self, void * _cmd, bool arg2) {
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8);
    self->_collectionViewFlags = 0xdfffffffffffffff & self->_collectionViewFlags | (arg2 & 0xff) << 0x3d;
    return;
}

bool -[UICollectionView remembersLastFocusedIndexPath](void * self, void * _cmd) {
    rax = (0x2000000000000000 & self->_collectionViewFlags) >> 0x3d;
    return rax;
}

void -[UICollectionView _setRemembersPreviouslyFocusedItem:](void * self, void * _cmd, bool arg2) {
    [self setRemembersLastFocusedIndexPath:arg2 & 0xff];
    return;
}

bool -[UICollectionView _remembersPreviouslyFocusedItem](void * self, void * _cmd) {
    rax = [self remembersLastFocusedIndexPath];
    return rax;
}

bool -[UICollectionView canBecomeFocused](void * self, void * _cmd) {
    r15 = self;
    if ((([self remembersLastFocusedIndexPath] != 0x0) && ([r15->_collectionViewData numberOfSections] > 0x0)) && ([r15->_collectionViewData numberOfItems] > 0x0)) {
            rbx = [[r15 _screen] retain];
            r14 = [[rbx focusedView] retain];
            [rbx release];
            rbx = 0x1;
            if ([r15 containsView:r14] != 0x0) {
                    rbx = [r15 _isFocusableElement];
            }
            [r14 release];
    }
    else {
            rbx = 0x0;
    }
    rax = rbx;
    return rax;
}

void * -[UICollectionView preferredFocusedItem](void * self, void * _cmd) {
    rbx = self;
    var_30 = *___stack_chk_guard;
    if ((((BIT_TEST(rbx->_collectionViewFlags, 0x34))) || ([rbx->_collectionViewData numberOfSections] <= 0x0)) || ([rbx->_collectionViewData numberOfItems] <= 0x0)) goto loc_98df09;

loc_98deb7:
    var_180 = 0x0;
    r13 = 0x0;
    if (rbx->_focusedCellIndexPath == 0x0) goto loc_98df88;

loc_98deda:
    rdi = rbx->_focusedCell;
    if (rbx->_focusedViewType != 0x2) goto loc_98df41;

loc_98def3:
    var_180 = 0x0;
    r13 = 0x0;
    if (rdi != 0x0) {
            r13 = [rdi retain];
            var_180 = [rbx->_focusedCellIndexPath retain];
    }
    goto loc_98df88;

loc_98df88:
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x90200) {
                    rax = [rbx remembersLastFocusedIndexPath];
                    if ((var_180 != 0x0) && (rax != 0x0)) {
                            var_138 = [r13 retain];
                            rax = [var_180 retain];
                            r15 = rbx;
                            var_188 = 0x0;
                    }
                    else {
                            r14 = rbx;
                            rbx = [[rbx _delegatePreferredIndexPath] retain];
                            var_188 = 0x0;
                            rax = 0x0;
                            if (rbx != 0x0) {
                                    rax = [rbx retain];
                                    var_188 = 0x1;
                            }
                            r15 = rax;
                            [rbx release];
                            var_138 = 0x0;
                            if (var_180 != 0x0) {
                                    rax = r15;
                                    if (rax == 0x0) {
                                            var_138 = [r13 retain];
                                            rax = [var_180 retain];
                                    }
                            }
                            else {
                                    rax = r15;
                            }
                            var_130 = r14;
                            r15 = r14;
                            if (rax == 0x0) {
                                    intrinsic_movaps(var_C0, 0x0);
                                    intrinsic_movaps(var_D0, 0x0);
                                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                                    rax = [r15 visibleCells];
                                    rax = [rax retain];
                                    var_150 = rax;
                                    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                    var_120 = rax;
                                    if (rax != 0x0) {
                                            var_190 = r13;
                                            var_128 = *var_E0;
                                            r14 = 0x0;
                                            do {
                                                    rbx = @selector(_hasFocusableContents);
                                                    var_158 = rbx;
                                                    r13 = 0x0;
                                                    do {
                                                            if (*var_E0 != var_128) {
                                                                    objc_enumerationMutation(var_150);
                                                            }
                                                            r12 = *(var_E8 + r13 * 0x8);
                                                            if (_objc_msgSend(r12, rbx) != 0x0) {
                                                                    rax = [r15 indexPathForCell:r12];
                                                                    rax = [rax retain];
                                                                    var_118 = r14;
                                                                    if (r14 != 0x0) {
                                                                            COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                            rax = rax;
                                                                            if (!COND) {
                                                                                    r14 = rax;
                                                                                    r12 = [r12 retain];
                                                                                    [var_138 release];
                                                                                    rbx = [r14 retain];
                                                                                    [var_118 release];
                                                                                    rax = r14;
                                                                                    r14 = rbx;
                                                                                    var_138 = r12;
                                                                            }
                                                                            else {
                                                                                    r14 = var_118;
                                                                            }
                                                                    }
                                                                    else {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    [rax release];
                                                                    r15 = var_130;
                                                                    rbx = var_158;
                                                            }
                                                            r13 = r13 + 0x1;
                                                    } while (r13 < var_120);
                                                    rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                                    var_120 = rax;
                                            } while (rax != 0x0);
                                            [var_150 release];
                                            rax = r14;
                                            r13 = var_190;
                                            if (rax == 0x0) {
                                                    [var_138 release];
                                                    var_138 = 0x0;
                                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                                    rax = [rax retain];
                                            }
                                    }
                                    else {
                                            [var_150 release];
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                    }
            }
            else {
                    r14 = rbx;
                    rbx = [[rbx _delegatePreferredIndexPath] retain];
                    var_188 = 0x0;
                    rax = 0x0;
                    if (rbx != 0x0) {
                            rax = [rbx retain];
                            var_188 = 0x1;
                    }
                    r15 = rax;
                    [rbx release];
                    var_138 = 0x0;
                    if (var_180 != 0x0) {
                            rax = r15;
                            if (rax == 0x0) {
                                    var_138 = [r13 retain];
                                    rax = [var_180 retain];
                            }
                    }
                    else {
                            rax = r15;
                    }
                    var_130 = r14;
                    r15 = r14;
                    if (rax == 0x0) {
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            rax = [r15 visibleCells];
                            rax = [rax retain];
                            var_150 = rax;
                            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_120 = rax;
                            if (rax != 0x0) {
                                    var_190 = r13;
                                    var_128 = *var_E0;
                                    r14 = 0x0;
                                    do {
                                            rbx = @selector(_hasFocusableContents);
                                            var_158 = rbx;
                                            r13 = 0x0;
                                            do {
                                                    if (*var_E0 != var_128) {
                                                            objc_enumerationMutation(var_150);
                                                    }
                                                    r12 = *(var_E8 + r13 * 0x8);
                                                    if (_objc_msgSend(r12, rbx) != 0x0) {
                                                            rax = [r15 indexPathForCell:r12];
                                                            rax = [rax retain];
                                                            var_118 = r14;
                                                            if (r14 != 0x0) {
                                                                    COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                    rax = rax;
                                                                    if (!COND) {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    else {
                                                                            r14 = var_118;
                                                                    }
                                                            }
                                                            else {
                                                                    r14 = rax;
                                                                    r12 = [r12 retain];
                                                                    [var_138 release];
                                                                    rbx = [r14 retain];
                                                                    [var_118 release];
                                                                    rax = r14;
                                                                    r14 = rbx;
                                                                    var_138 = r12;
                                                            }
                                                            [rax release];
                                                            r15 = var_130;
                                                            rbx = var_158;
                                                    }
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_120);
                                            rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                            var_120 = rax;
                                    } while (rax != 0x0);
                                    [var_150 release];
                                    rax = r14;
                                    r13 = var_190;
                                    if (rax == 0x0) {
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                            else {
                                    [var_150 release];
                                    [var_138 release];
                                    var_138 = 0x0;
                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                    rax = [rax retain];
                            }
                    }
            }
    }
    else {
            if (__UIApplicationLinkedOnOrAfter(0x90200) != 0x0) {
                    rax = [rbx remembersLastFocusedIndexPath];
                    if ((var_180 != 0x0) && (rax != 0x0)) {
                            var_138 = [r13 retain];
                            rax = [var_180 retain];
                            r15 = rbx;
                            var_188 = 0x0;
                    }
                    else {
                            r14 = rbx;
                            rbx = [[rbx _delegatePreferredIndexPath] retain];
                            var_188 = 0x0;
                            rax = 0x0;
                            if (rbx != 0x0) {
                                    rax = [rbx retain];
                                    var_188 = 0x1;
                            }
                            r15 = rax;
                            [rbx release];
                            var_138 = 0x0;
                            if (var_180 != 0x0) {
                                    rax = r15;
                                    if (rax == 0x0) {
                                            var_138 = [r13 retain];
                                            rax = [var_180 retain];
                                    }
                            }
                            else {
                                    rax = r15;
                            }
                            var_130 = r14;
                            r15 = r14;
                            if (rax == 0x0) {
                                    intrinsic_movaps(var_C0, 0x0);
                                    intrinsic_movaps(var_D0, 0x0);
                                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                                    rax = [r15 visibleCells];
                                    rax = [rax retain];
                                    var_150 = rax;
                                    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                    var_120 = rax;
                                    if (rax != 0x0) {
                                            var_190 = r13;
                                            var_128 = *var_E0;
                                            r14 = 0x0;
                                            do {
                                                    rbx = @selector(_hasFocusableContents);
                                                    var_158 = rbx;
                                                    r13 = 0x0;
                                                    do {
                                                            if (*var_E0 != var_128) {
                                                                    objc_enumerationMutation(var_150);
                                                            }
                                                            r12 = *(var_E8 + r13 * 0x8);
                                                            if (_objc_msgSend(r12, rbx) != 0x0) {
                                                                    rax = [r15 indexPathForCell:r12];
                                                                    rax = [rax retain];
                                                                    var_118 = r14;
                                                                    if (r14 != 0x0) {
                                                                            COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                            rax = rax;
                                                                            if (!COND) {
                                                                                    r14 = rax;
                                                                                    r12 = [r12 retain];
                                                                                    [var_138 release];
                                                                                    rbx = [r14 retain];
                                                                                    [var_118 release];
                                                                                    rax = r14;
                                                                                    r14 = rbx;
                                                                                    var_138 = r12;
                                                                            }
                                                                            else {
                                                                                    r14 = var_118;
                                                                            }
                                                                    }
                                                                    else {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    [rax release];
                                                                    r15 = var_130;
                                                                    rbx = var_158;
                                                            }
                                                            r13 = r13 + 0x1;
                                                    } while (r13 < var_120);
                                                    rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                                    var_120 = rax;
                                            } while (rax != 0x0);
                                            [var_150 release];
                                            rax = r14;
                                            r13 = var_190;
                                            if (rax == 0x0) {
                                                    [var_138 release];
                                                    var_138 = 0x0;
                                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                                    rax = [rax retain];
                                            }
                                    }
                                    else {
                                            [var_150 release];
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                    }
            }
            else {
                    r14 = rbx;
                    rbx = [[rbx _delegatePreferredIndexPath] retain];
                    var_188 = 0x0;
                    rax = 0x0;
                    if (rbx != 0x0) {
                            rax = [rbx retain];
                            var_188 = 0x1;
                    }
                    r15 = rax;
                    [rbx release];
                    var_138 = 0x0;
                    if (var_180 != 0x0) {
                            rax = r15;
                            if (rax == 0x0) {
                                    var_138 = [r13 retain];
                                    rax = [var_180 retain];
                            }
                    }
                    else {
                            rax = r15;
                    }
                    var_130 = r14;
                    r15 = r14;
                    if (rax == 0x0) {
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            rax = [r15 visibleCells];
                            rax = [rax retain];
                            var_150 = rax;
                            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_120 = rax;
                            if (rax != 0x0) {
                                    var_190 = r13;
                                    var_128 = *var_E0;
                                    r14 = 0x0;
                                    do {
                                            rbx = @selector(_hasFocusableContents);
                                            var_158 = rbx;
                                            r13 = 0x0;
                                            do {
                                                    if (*var_E0 != var_128) {
                                                            objc_enumerationMutation(var_150);
                                                    }
                                                    r12 = *(var_E8 + r13 * 0x8);
                                                    if (_objc_msgSend(r12, rbx) != 0x0) {
                                                            rax = [r15 indexPathForCell:r12];
                                                            rax = [rax retain];
                                                            var_118 = r14;
                                                            if (r14 != 0x0) {
                                                                    COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                    rax = rax;
                                                                    if (!COND) {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    else {
                                                                            r14 = var_118;
                                                                    }
                                                            }
                                                            else {
                                                                    r14 = rax;
                                                                    r12 = [r12 retain];
                                                                    [var_138 release];
                                                                    rbx = [r14 retain];
                                                                    [var_118 release];
                                                                    rax = r14;
                                                                    r14 = rbx;
                                                                    var_138 = r12;
                                                            }
                                                            [rax release];
                                                            r15 = var_130;
                                                            rbx = var_158;
                                                    }
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_120);
                                            rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                            var_120 = rax;
                                    } while (rax != 0x0);
                                    [var_150 release];
                                    rax = r14;
                                    r13 = var_190;
                                    if (rax == 0x0) {
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                            else {
                                    [var_150 release];
                                    [var_138 release];
                                    var_138 = 0x0;
                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                    rax = [rax retain];
                            }
                    }
            }
    }
    var_118 = rax;
    if (rax == 0x0) goto loc_98e5d8;

loc_98e349:
    rdi = var_138;
    if (rdi != 0x0) goto loc_98e5df;

loc_98e359:
    if ((var_188 != 0x0) || (r15->_focusedViewType != 0x2)) goto loc_98e4df;

loc_98e37a:
    rbx = [[r15 _focusedCellElementKind] retain];
    [rbx release];
    if (rbx == 0x0) goto loc_98e4df;

loc_98e3ad:
    rbx = [[r15 _focusedCellElementKind] retain];
    r12 = [[r15 supplementaryViewForElementKind:rbx atIndexPath:var_118] retain];
    rdi = rbx;
    rbx = r15;
    [rdi release];
    rdi = r12;
    if (rdi != 0x0) goto loc_98e5e4;

loc_98e405:
    r12 = [[rbx _focusedCellElementKind] retain];
    var_128 = r12;
    rax = [rbx _focusedCellElementKind];
    rax = [rax retain];
    var_120 = rax;
    r14 = rbx;
    rbx = [[rbx layoutAttributesForSupplementaryElementOfKind:rax atIndexPath:var_118] retain];
    r12 = [r14 _createPreparedSupplementaryViewForElementOfKind:r12 atIndexPath:var_118 withLayoutAttributes:rbx applyAttributes:0x1];
    [rdi release];
    [rbx release];
    [var_120 release];
    [var_128 release];
    r15 = r14;
    [r14 _setFocusedCell:r12];
    rdi = r12;
    goto loc_98e5df;

loc_98e5df:
    if (rdi != 0x0) {
            r12 = [rdi retain];
            r14 = r12;
    }
    else {
            r12 = [[[r15 super] preferredFocusedItem] retain];
            r14 = 0x0;
    }
    goto loc_98e628;

loc_98e628:
    [var_180 release];
    [r13 release];
    [var_118 release];
    [r14 release];
    goto loc_98e65c;

loc_98e65c:
    if (*___stack_chk_guard == var_30) {
            rdi = r12;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_98e5e4:
    r12 = [rdi retain];
    r14 = r12;
    goto loc_98e628;

loc_98e4df:
    rdi = [[r15 cellForItemAtIndexPath:var_118] retain];
    if (rdi != 0x0) goto loc_98e5df;

loc_98e50a:
    var_138 = rdi;
    rbx = r15;
    r14 = [[r15 layoutAttributesForItemAtIndexPath:var_118] retain];
    if (r14 != 0x0) {
            if ([r14 isHidden] == 0x0) {
                    var_190 = r13;
                    r13 = [[rbx layoutAttributesForItemAtIndexPath:var_118] retain];
                    r15 = [rbx _createPreparedCellForItemAtIndexPath:var_118 withLayoutAttributes:r13 applyAttributes:0x1 isFocused:0x1 notify:0x1];
                    [var_138 release];
                    rdi = r13;
                    r13 = var_190;
                    [rdi release];
                    var_138 = r15;
            }
    }
    else {
            var_190 = r13;
            r13 = [[rbx layoutAttributesForItemAtIndexPath:var_118] retain];
            r15 = [rbx _createPreparedCellForItemAtIndexPath:var_118 withLayoutAttributes:r13 applyAttributes:0x1 isFocused:0x1 notify:0x1];
            [var_138 release];
            rdi = r13;
            r13 = var_190;
            [rdi release];
            var_138 = r15;
    }
    [r14 release];
    r15 = rbx;
    goto loc_98e5d8;

loc_98e5d8:
    rdi = var_138;
    goto loc_98e5df;

loc_98df41:
    if (rdi != 0x0) goto loc_98df6d;

loc_98df46:
    var_180 = 0x0;
    r13 = 0x0;
    if ([rbx _indexPathIsValid:rdx] == 0x0) goto loc_98df88;

loc_98df69:
    rdi = rbx->_focusedCell;
    goto loc_98df6d;

loc_98df6d:
    r13 = [rdi retain];
    var_180 = [rbx->_focusedCellIndexPath retain];
    goto loc_98df88;

loc_98df09:
    r12 = [[[rbx super] preferredFocusedItem] retain];
    goto loc_98e65c;
}

void * -[UICollectionView _delegatePreferredIndexPath](void * self, void * _cmd) {
    r14 = _cmd;
    r13 = self;
    rax = r13->_collectionViewFlags;
    if ((rax & 0x4000000) != 0x0) goto loc_98e6d5;

loc_98e6aa:
    rdi = 0x0;
    if ((rax & 0x1000000) == 0x0) goto loc_98e7e5;

loc_98e6b7:
    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r13);
    rsi = @selector(indexPathForPreferredFocusedItemForCollectionView:);
    goto loc_98e6f1;

loc_98e6f1:
    r15 = [_objc_msgSend(rbx, rsi) retain];
    [rbx release];
    rdi = 0x0;
    if (r15 != 0x0) {
            var_30 = r14;
            if ([r13 _indexPathIsValid:r15] == 0x0) {
                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    r12 = [rdi retain];
                    [rbx release];
                    rbx = [[NSAssertionHandler currentHandler] retain];
                    [rbx handleFailureInMethod:var_30 object:r13 file:r12 lineNumber:0x1d4e description:@"no cell for index path (%@) - the collection view's delegate must return an index path for a valid UICollectionViewCell from -indexPathForPreferredFocusedViewInCollectionView:"];
                    [r12 release];
                    [rbx release];
            }
            rdi = r15;
    }
    goto loc_98e7e5;

loc_98e7e5:
    rax = [rdi autorelease];
    return rax;

loc_98e6d5:
    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r13);
    rsi = @selector(indexPathForPreferredFocusedViewInCollectionView:);
    goto loc_98e6f1;
}

bool -[UICollectionView _cellCanBecomeFocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    r15 = [rbx _allowsEffectiveSelection];
    rdi = 0x0;
    if ((rbx->_collectionViewFlags & 0x140000) != 0x0) {
            r12 = [[rbx _indexPathForCell:r14 includePrefetchedCells:0x1] retain];
            rdi = 0x0;
            if (r12 != 0x0) {
                    rax = rbx->_collectionViewFlags;
                    if ((rax & 0x40000) != 0x0) {
                            r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
                            r15 = [r13 _collectionView:rbx canFocusItemAtIndexPath:r12];
                            [r13 release];
                            rax = rbx->_collectionViewFlags;
                    }
                    rdi = r12;
                    if ((rax & 0x100000) != 0x0) {
                            r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
                            r15 = [r13 collectionView:rbx canFocusItemAtIndexPath:r12];
                            [r13 release];
                            rdi = r12;
                    }
            }
    }
    [rdi release];
    [r14 release];
    rax = r15;
    return rax;
}

void -[UICollectionView _cellBecameFocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [[self indexPathForCell:arg2] retain];
    if ((rbx->_collectionViewFlags & 0x200000) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            [r15 _collectionView:rbx didFocusItemAtIndexPath:r14];
            [r15 release];
    }
    rdi = r14;
    [rdi release];
    return;
}

void * -[UICollectionView _childFocusRegionsInRect:](void * self, void * _cmd, struct CGRect arg2) {
    var_128 = self;
    r15 = [[NSMutableArray array] retain];
    var_180 = r15;
    rbx = [[self _childFocusRegions] retain];
    [r15 addObjectsFromArray:rbx];
    [rbx release];
    [var_D0 convertRect:self fromView:0x0, r8];
    r13 = [[self->_collectionViewData layoutAttributesForElementsInRect:rbx, 0x0] retain];
    var_148 = r13;
    intrinsic_movaps(var_E0, 0x0);
    intrinsic_movaps(var_F0, 0x0);
    var_100 = intrinsic_movaps(var_100, 0x0);
    var_110 = intrinsic_movaps(var_110, 0x0);
    rbx = [r13 countByEnumeratingWithState:var_110 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r14 = *var_100;
            var_150 = r14;
            do {
                    var_130 = rbx;
                    r12 = 0x0;
                    do {
                            if (*var_100 != r14) {
                                    objc_enumerationMutation(r13);
                            }
                            r15 = *(var_108 + r12 * 0x8);
                            if (([r15 isHidden] == 0x0) && ([r15 representedElementCategory] == 0x0)) {
                                    r14 = [[r15 indexPath] retain];
                                    r13 = [[var_128 cellForItemAtIndexPath:r14] retain];
                                    [r14 release];
                                    if (r13 == 0x0) {
                                            rbx = [[_UICollectionViewCellPromiseRegion alloc] init];
                                            [rbx setCollectionView:var_128];
                                            [rbx setLayoutAttributes:r15];
                                            [var_180 addObject:rbx];
                                            [rbx release];
                                    }
                                    [r13 release];
                                    r13 = var_148;
                                    r14 = var_150;
                                    rbx = var_130;
                            }
                            r12 = r12 + 0x1;
                    } while (r12 < rbx);
                    rbx = [r13 countByEnumeratingWithState:var_110 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    r15 = [var_180 copy];
    [r13 release];
    [var_180 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rdi = r15;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void * -[UICollectionView _fulfillPromisedFocusRegionForCell:](void * self, void * _cmd, void * arg2) {
    rax = [arg2 retain];
    var_30 = rax;
    rbx = [[rax layoutAttributes] retain];
    r12 = [[rbx indexPath] retain];
    rdi = rbx;
    rbx = self;
    [rdi release];
    r13 = [[rbx cellForItemAtIndexPath:r12] retain];
    if (r13 == 0x0) {
            var_38 = rbx;
            rdx = r12;
            rax = [rbx->_prefetchCacheItems objectForKeyedSubscript:rdx];
            rax = [rax retain];
            var_40 = rax;
            if (rax != 0x0) {
                    rbx = [[var_30 layoutAttributes] retain];
                    r14 = [rbx _isCell];
                    [rbx release];
                    COND = r14 == 0x0;
                    if (!COND) {
                            rbx = [[var_40 view] retain];
                            [r13 release];
                            [rbx _setHiddenForReuse:0x0];
                            rdx = r12;
                            [var_38->_prefetchCacheItems removeObjectForKey:rdx];
                            if (rbx != 0x0) {
                                    r13 = rbx;
                                    r14 = var_38;
                            }
                            else {
                                    rbx = [[var_30 layoutAttributes] retain];
                                    r14 = var_38;
                                    rcx = rbx;
                                    r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                                    [rbx release];
                            }
                    }
                    else {
                            rbx = [[var_30 layoutAttributes] retain];
                            r14 = var_38;
                            rcx = rbx;
                            r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                            [rbx release];
                    }
            }
            else {
                    rbx = [[var_30 layoutAttributes] retain];
                    r14 = var_38;
                    rcx = rbx;
                    r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                    [rbx release];
            }
            [r14 _setCurrentPromiseFulfillmentCell:r13, rcx, 0x1];
            [r14->_visibleCellsDict setObject:r13 forKeyedSubscript:r12, 0x1];
            [r13 layoutIfNeeded];
            [var_40 release];
    }
    [r12 release];
    [var_30 release];
    rdi = r13;
    rax = [rdi autorelease];
    return rax;
}


void -[UICollectionView _focusedView:isMinX:isMaxX:isMinY:isMaxY:](void * self, void * _cmd, void * arg2, bool * arg3, bool * arg4, bool * arg5, bool * arg_0) {
    var_1D8 = arg5;
    var_1E0 = arg4;
    var_1E8 = arg3;
    var_1B0 = self;
    var_1C0 = [arg2 retain];
    var_40 = 0x0;
    var_60 = 0x0;
    var_80 = 0x0;
    var_A0 = 0x0;
    var_1E9 = [self _canScrollX];
    var_1C9 = [var_1B0 _canScrollY];
    var_1C8 = objc_retainBlock(__NSConcreteStackBlock);
    rbx = [[var_1B0 _collectionViewData] retain];
    r15 = [rbx numberOfItems];
    r14 = arg_0;
    [rbx release];
    if (r15 <= 0x0) goto loc_98f762;

loc_98f114:
    r13 = [var_1C0 retain];
    r14 = [UICollectionViewCell class];
    var_1F8 = 0x0;
    if (r13 == 0x0) goto loc_98f6da;

loc_98f17f:
    var_200 = r15;
    if (var_1B0 == r13) goto loc_98f6da;

loc_98f193:
    var_1F8 = 0x0;
    rbx = r13;
    goto loc_98f1bb;

loc_98f1bb:
    if ([rbx isKindOfClass:r14] == 0x0) goto loc_98f1fb;

loc_98f1ce:
    r13 = [[rbx _collectionView] retain];
    [r13 release];
    if (r13 == var_1B0) goto loc_98f235;

loc_98f1fb:
    r13 = [[rbx superview] retain];
    [rbx release];
    if (r13 == 0x0) goto loc_98f6da;

loc_98f224:
    rbx = r13;
    if (r13 != var_1B0) goto loc_98f1bb;

loc_98f6da:
    rax = *(int8_t *)(var_40 + 0x18);
    if (rax != 0x0) goto loc_98f70a;

loc_98f6e5:
    rsi = var_60;
    if (*(int8_t *)(rsi + 0x18) != 0x0) goto loc_98f70a;

loc_98f6ef:
    rdx = var_80;
    if (*(int8_t *)(rdx + 0x18) != 0x0) goto loc_98f70a;

loc_98f6f9:
    rcx = var_A0;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f96f;

loc_98f70a:
    var_1C9 = var_1C9 | (rax != 0x0 ? 0x1 : 0x0);
    r14 = arg_0;
    if (var_1C9 != 0x0) goto loc_98f729;

loc_98f71b:
    rcx = var_60;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f86c;

loc_98f729:
    if (var_1E9 != 0x0) goto loc_98f74d;

loc_98f732:
    rdx = var_80;
    if (*(int8_t *)(rdx + 0x18) != 0x0) goto loc_98f74d;

loc_98f73c:
    rcx = var_A0;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f8b2;

loc_98f74d:
    [var_1F8 release];
    [r13 release];
    goto loc_98f762;

loc_98f762:
    [[var_1B0 super] _focusedView:var_1C0 isMinX:0x1 isMaxX:0x1 isMinY:0x1 isMaxY:0x1];
    rdx = var_1E8;
    if (rdx != 0x0) {
            *(int8_t *)rdx = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_40 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    rsi = var_1E0;
    rdx = var_1D8;
    if (rsi != 0x0) {
            *(int8_t *)rsi = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_60 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    if (rdx != 0x0) {
            *(int8_t *)rdx = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_80 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    if (r14 != 0x0) {
            *(int8_t *)r14 = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_A0 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    goto loc_98f906;

loc_98f906:
    [var_1C8 release];
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    [var_1C0 release];
    return;

loc_98f8b2:
    rsi = var_1E8;
    if (rsi != 0x0) {
            *(int8_t *)rsi = rax;
    }
    rdi = var_1E0;
    rsi = var_1D8;
    if (rdi != 0x0) {
            *(int8_t *)rdi = *(int8_t *)(var_60 + 0x18);
    }
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rdx + 0x18);
    }
    if (r14 == 0x0) goto loc_98f8f1;

loc_98f8eb:
    rax = *(int8_t *)(rcx + 0x18);
    goto loc_98f8ee;

loc_98f8ee:
    *(int8_t *)r14 = rax;
    goto loc_98f8f1;

loc_98f8f1:
    [var_1F8 release];
    [r13 release];
    goto loc_98f906;

loc_98f86c:
    rax = var_1E8;
    rdx = var_1D8;
    rsi = var_1E0;
    if (rax != 0x0) {
            *(int8_t *)rax = 0x0;
    }
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rcx + 0x18);
    }
    if (rdx != 0x0) {
            *(int8_t *)rdx = *(int8_t *)(var_80 + 0x18);
    }
    if (r14 == 0x0) goto loc_98f8f1;

loc_98f8a6:
    rax = *(int8_t *)(var_A0 + 0x18);
    goto loc_98f8ee;

loc_98f96f:
    rax = var_1E8;
    rbx = arg_0;
    if (rax != 0x0) {
            *(int8_t *)rax = 0x0;
    }
    rdi = var_1E0;
    if (rdi != 0x0) {
            *(int8_t *)rdi = *(int8_t *)(rsi + 0x18);
    }
    rsi = var_1D8;
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rdx + 0x18);
    }
    if (rbx != 0x0) {
            *(int8_t *)rbx = *(int8_t *)(rcx + 0x18);
    }
    goto loc_98f8f1;

loc_98f235:
    rbx = [rbx retain];
    [var_128 bounds];
    [var_148 convertRect:var_1B0 fromView:rbx, r8];
    var_F0 = var_130;
    var_F8 = var_138;
    var_100 = var_140;
    var_108 = var_148;
    r13 = 0x0;
    var_1F8 = 0x0;
    if (rbx == 0x0) goto loc_98f6da;

loc_98f2fa:
    rax = [var_1B0 indexPathForCell:rbx];
    var_210 = rbx;
    rax = [rax retain];
    var_208 = rax;
    if (rax == 0x0) goto loc_98f6bc;

loc_98f330:
    r14 = [[var_1B0 _collectionViewData] retain];
    rbx = [r14 globalIndexForItemAtIndexPath:var_208];
    [r14 release];
    var_218 = rbx;
    if (rbx <= 0x0) goto loc_98f500;

loc_98f37e:
    r15 = var_218 + 0xffffffffffffffff;
    r12 = 0x2;
    goto loc_98f3b2;

loc_98f3b2:
    rbx = [[var_1B0 _collectionViewData] retain];
    r14 = [[rbx layoutAttributesForGlobalItemIndex:r15] retain];
    [rbx release];
    if (r14 != 0x0) {
            [var_170 frame];
    }
    else {
            var_160 = intrinsic_movaps(var_160, 0x0);
            var_170 = intrinsic_movaps(var_170, 0x0);
    }
    (*(var_1C8 + 0x10))(var_1C8);
    if (*(int8_t *)(var_40 + 0x18) == 0x0) goto loc_98f4ac;

loc_98f499:
    if ((((COND_BYTE_SET(NE)) | var_1C9) & 0xff) == 0x1) goto loc_98f4c2;

loc_98f4f7:
    [r14 release];
    goto loc_98f500;

loc_98f500:
    r15 = var_200;
    r12 = var_218;
    if ((r12 >= r15 + 0xffffffffffffffff) || (r12 + 0x1 >= r15)) goto loc_98f6bc;

loc_98f529:
    r14 = 0x2;
    goto loc_98f559;

loc_98f559:
    rbx = [[var_1B0 _collectionViewData] retain];
    rdx = r12 + r14 + 0xffffffffffffffff;
    r12 = r12;
    r13 = [[rbx layoutAttributesForGlobalItemIndex:rdx] retain];
    [rbx release];
    if (r13 != 0x0) {
            [var_190 frame];
    }
    else {
            var_180 = intrinsic_movaps(var_180, 0x0);
            var_190 = intrinsic_movaps(var_190, 0x0);
    }
    (*(var_1C8 + 0x10))(var_1C8);
    if (*(int8_t *)(var_60 + 0x18) == 0x0) goto loc_98f662;

loc_98f64f:
    if ((((COND_BYTE_SET(NE)) | var_1C9) & 0xff) == 0x1) goto loc_98f67b;

loc_98f6b3:
    [r13 release];
    goto loc_98f6bc;

loc_98f6bc:
    [var_208 release];
    r13 = var_210;
    var_1F8 = var_210;
    goto loc_98f6da;

loc_98f67b:
    if ((var_1E9 != 0x0) || (*(int8_t *)(var_A0 + 0x18) != 0x0)) goto loc_98f691;
    goto loc_98f6b3;

loc_98f691:
    [r13 release];
    if (r12 + r14 >= r15) goto loc_98f6bc;

loc_98f6a3:
    COND = r14 < 0x15;
    r14 = r14 + 0x1;
    if (COND) goto loc_98f559;
    goto loc_98f6bc;

loc_98f662:
    rax = COND_BYTE_SET(NE);
    if (*(int8_t *)(var_A0 + 0x18) == 0x0) goto loc_98f6b3;

loc_98f673:
    rax = rax | var_1C9;
    if (rax == 0x0) goto loc_98f6b3;
    goto loc_98f67b;

loc_98f4c2:
    if ((var_1E9 != 0x0) || (*(int8_t *)(var_80 + 0x18) != 0x0)) goto loc_98f4d5;
    goto loc_98f4f7;

loc_98f4d5:
    [r14 release];
    if (r15 <= 0x0) goto loc_98f500;

loc_98f4e3:
    r15 = r15 - 0x1;
    COND = r12 < 0x15;
    r12 = r12 + 0x1;
    if (COND) goto loc_98f3b2;
    goto loc_98f500;

loc_98f4ac:
    rax = COND_BYTE_SET(NE);
    if (*(int8_t *)(var_80 + 0x18) == 0x0) goto loc_98f4f7;

loc_98f4ba:
    rax = rax | var_1C9;
    if (rax == 0x0) goto loc_98f4f7;
}

int ___61-[UICollectionView _focusedView:isMinX:isMaxX:isMinY:isMaxY:]_block_invoke(int arg0) {
    rbx = arg0;
    _UIRectGetCenter();
    var_18 = intrinsic_movsd(var_18, xmm0);
    var_10 = intrinsic_movsd(var_10, xmm1);
    rax = _UIRectGetCenter();
    xmm2 = intrinsic_movsd(xmm2, var_18);
    xmm2 = intrinsic_ucomisd(xmm2, xmm0);
    if (xmm2 > 0x0) {
            rax = *(*(rbx + 0x20) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm0 = intrinsic_ucomisd(xmm0, xmm2);
    if (xmm0 > 0x0) {
            rax = *(*(rbx + 0x28) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm0 = intrinsic_movsd(xmm0, var_10);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 > 0x0) {
            rax = *(*(rbx + 0x30) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) {
            rax = *(*(rbx + 0x38) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    return rax;
}

bool -[UICollectionView _beginReorderingItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rax = [self beginInteractiveMovementForItemAtIndexPath:arg2];
    return rax;
}

void -[UICollectionView _updateReorderingTargetPosition:](void * self, void * _cmd, struct CGPoint arg2) {
    [self updateInteractiveMovementTargetPosition:arg2];
    return;
}

void -[UICollectionView _pinReorderedItemsWithPinningTest:](void * self, void * _cmd, void * arg2) {
    rbx = _cmd;
    r13 = self;
    r14 = [arg2 retain];
    if (r14 == 0x0) {
            var_C8 = rbx;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r12 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_C8 object:r13 file:r12 lineNumber:0x1e63 description:@"Invalid parameter not satisfying: %@"];
            [r12 release];
            [rbx release];
    }
    [var_50 bounds];
    [var_70 contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_68);
    xmm1 = intrinsic_movapd(xmm1, var_40);
    xmm2 = intrinsic_movsd(xmm2, var_70);
    xmm3 = intrinsic_movsd(xmm3, var_58);
    xmm3 = intrinsic_unpcklpd(xmm3, xmm2);
    xmm3 = intrinsic_addpd(xmm3, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm2);
    xmm0 = intrinsic_addpd(xmm0, var_50);
    xmm1 = intrinsic_subpd(xmm1, xmm3);
    var_A0 = r14;
    intrinsic_movupd(var_90, xmm0);
    intrinsic_movupd(var_80, xmm1);
    r14 = [r14 retain];
    [r13 retain];
    [r13->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    [r13 release];
    [var_A0 release];
    [r14 release];
    return;
}

void ___54-[UICollectionView _pinReorderedItemsWithPinningTest:]_block_invoke(int arg0, int arg1) {
    r14 = arg0;
    r13 = [arg1 retain];
    if ([r13 pinned] == 0x0) {
            r15 = *(r14 + 0x20);
            r12 = [[r13 cell] retain];
            if (r12 != 0x0) {
                    [var_50 frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            rbx = (*(r15 + 0x10))(r15);
            [r12 release];
            if (rbx != 0x0) {
                    [r13 setPinned:0x1];
                    [*(r14 + 0x28) contentOffset];
                    [r13 setPinnedPreviousContentOffset:0x1];
                    [r13 setPinningTest:*(r14 + 0x20)];
            }
    }
    [r13 release];
    return;
}

void -[UICollectionView _unpinReorderedItemsIfNeeded](void * self, void * _cmd) {
    [var_30 bounds];
    [var_50 contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_48);
    xmm1 = intrinsic_movapd(xmm1, var_20);
    xmm2 = intrinsic_movsd(xmm2, var_50);
    xmm3 = intrinsic_movsd(xmm3, var_38);
    xmm3 = intrinsic_unpcklpd(xmm3, xmm2);
    xmm3 = intrinsic_addpd(xmm3, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm2);
    xmm0 = intrinsic_addpd(xmm0, var_30);
    xmm1 = intrinsic_subpd(xmm1, xmm3);
    intrinsic_movupd(var_70, xmm0);
    intrinsic_movupd(var_60, xmm1);
    [self->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    return;
}

void ___48-[UICollectionView _unpinReorderedItemsIfNeeded]_block_invoke(int arg0, int arg1, int arg2) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx pinned] != 0x0) {
            r15 = [[rbx pinningTest] retain];
            r12 = [[rbx cell] retain];
            if (r12 != 0x0) {
                    [var_50 frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            r14 = (*(r15 + 0x10))(r15);
            [r12 release];
            [r15 release];
            if (r14 == 0x0) {
                    [rbx setPinned:0x0];
                    [rbx setPinningTest:0x0];
            }
    }
    [rbx release];
    return;
}

void -[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:](void * self, void * _cmd, struct CGPoint arg2) {
    var_50 = intrinsic_movsd(var_50, xmm1, arg2);
    var_58 = intrinsic_movsd(var_58, xmm0);
    rbx = self;
    if ([rbx->_reorderedItems count] != 0x0) {
            var_28 = [rbx retain];
            xmm0 = intrinsic_movsd(xmm0, var_58);
            intrinsic_movsd(var_20, xmm0);
            intrinsic_movsd(var_18, intrinsic_movsd(xmm0, var_50));
            [UIView performWithoutAnimation:__NSConcreteStackBlock];
            [var_28 release];
    }
    return;
}

int ___72-[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:]_block_invoke(int arg0) {
    rax = [*(arg0 + 0x20)->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    return rax;
}

void ___72-[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:]_block_invoke_2(int arg0, int arg1) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx pinned] != 0x0) {
            xmm0 = intrinsic_movsd(xmm0, *(r14 + 0x20));
            var_30 = intrinsic_movsd(var_30, xmm0);
            [rbx pinnedPreviousContentOffset];
            xmm1 = intrinsic_movsd(xmm1, var_30);
            xmm1 = intrinsic_subsd(xmm1, xmm0);
            var_30 = intrinsic_movsd(var_30, xmm1);
            xmm0 = intrinsic_movsd(xmm0, *(r14 + 0x28));
            var_38 = intrinsic_movsd(var_38, xmm0);
            [rbx pinnedPreviousContentOffset];
            xmm0 = intrinsic_movsd(xmm0, var_38);
            xmm0 = intrinsic_subsd(xmm0, xmm1);
            var_38 = intrinsic_movsd(var_38, xmm0);
            r12 = [[rbx cell] retain];
            [r12 center];
            var_48 = intrinsic_movsd(var_48, xmm0);
            var_40 = intrinsic_movsd(var_40, xmm1);
            [r12 release];
            r15 = [[rbx cell] retain];
            xmm0 = intrinsic_movsd(xmm0, var_48);
            xmm0 = intrinsic_addsd(xmm0, var_30);
            xmm1 = intrinsic_movsd(xmm1, var_40);
            xmm1 = intrinsic_addsd(xmm1, var_38);
            [r15 setCenter:rdx];
            [r15 release];
            intrinsic_movsd(xmm0, *(r14 + 0x20));
            intrinsic_movsd(xmm1, *(r14 + 0x28));
            [rbx setPinnedPreviousContentOffset:rdx];
    }
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _updateReorderingTargetPosition:forced:](void * self, void * _cmd, struct CGPoint arg2, bool arg3) {
    r14 = arg2;
    var_208 = intrinsic_movsd(var_208, xmm1, arg2, arg3);
    var_200 = intrinsic_movsd(var_200, xmm0);
    rbx = self;
    var_30 = *___stack_chk_guard;
    r12 = [rbx->_reorderedItems count];
    if (r12 <= 0x0) goto loc_990d81;

loc_9903e0:
    xmm0 = intrinsic_movsd(xmm0, rbx->_reorderingTargetPosition);
    xmm0 = intrinsic_ucomisd(xmm0, var_200);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm0 = intrinsic_movsd(xmm0, *(rbx + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
            xmm0 = intrinsic_ucomisd(xmm0, var_208);
            if (((xmm0 != 0x0) || (CPU_FLAGS & P)) || (r14 != 0x0)) {
                    r14 = rbx;
                    var_1A8 = r14;
                    [r14->_dataSourceToLayoutIndexPathMappingDict removeAllObjects];
                    [r14 _unpinReorderedItemsIfNeeded];
                    xmm0 = intrinsic_movsd(xmm0, r14->_reorderingTargetPosition);
                    var_250 = intrinsic_movsd(var_250, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
                    var_258 = intrinsic_movsd(var_258, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_200);
                    r14->_reorderingTargetPosition = intrinsic_movsd(r14->_reorderingTargetPosition, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_208);
                    *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8) = intrinsic_movsd(*(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8), xmm0);
                    var_210 = [[NSMutableDictionary alloc] initWithCapacity:r12];
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_C0, xmm0);
                    intrinsic_movapd(var_D0, xmm0);
                    var_E0 = intrinsic_movapd(var_E0, xmm0);
                    var_F0 = intrinsic_movapd(var_F0, xmm0);
                    rax = [r14->_reorderedItems retain];
                    var_1B0 = rax;
                    r8 = 0x10;
                    r13 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                    if (r13 != 0x0) {
                            rbx = *var_E0;
                            var_218 = rbx;
                            var_198 = 0x0;
                            do {
                                    var_1B8 = r13;
                                    r14 = @selector(pinned);
                                    var_1C0 = r14;
                                    var_230 = *_OBJC_IVAR_$_UIScrollView._delegate + var_1A8;
                                    r12 = 0x0;
                                    do {
                                            if (*var_E0 != rbx) {
                                                    objc_enumerationMutation(var_1B0);
                                            }
                                            r15 = *(var_E8 + r12 * 0x8);
                                            if (_objc_msgSend(r15, r14) == 0x0) {
                                                    var_1A0 = r15;
                                                    r15 = [[r15 targetIndexPath] retain];
                                                    rbx = var_1A8;
                                                    rcx = *_OBJC_IVAR_$_UICollectionView._layout;
                                                    xmm0 = intrinsic_movsd(xmm0, var_200);
                                                    xmm1 = intrinsic_movsd(xmm1, var_208);
                                                    r13 = [[*(rbx + rcx) _reorderingTargetItemIndexPathForPosition:r15 withPreviousIndexPath:rcx] retain];
                                                    rax = rbx->_collectionViewFlags;
                                                    if ((rax & 0x20000) == 0x0) {
                                                            if ((rax & 0x10000) != 0x0) {
                                                                    rbx = objc_loadWeakRetained(var_230);
                                                                    rcx = r15;
                                                                    r8 = r13;
                                                                    var_220 = [[rbx _collectionView:var_1A8 targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                                    [r13 release];
                                                                    rdi = rbx;
                                                                    [rdi release];
                                                                    r13 = var_220;
                                                            }
                                                    }
                                                    else {
                                                            rax = objc_loadWeakRetained(var_230);
                                                            var_220 = rax;
                                                            rdx = rbx;
                                                            rcx = r15;
                                                            r8 = r13;
                                                            var_228 = [[rax collectionView:rdx targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                            [r13 release];
                                                            [var_220 release];
                                                            r13 = var_228;
                                                    }
                                                    var_198 = var_198 & 0x1 | [r13 isEqual:r15, rcx, r8] ^ 0x1;
                                                    [var_210 setObject:r13 forKeyedSubscript:r15, r8];
                                                    [var_1A0 setTargetIndexPath:r13, r15, r8];
                                                    [r13 release];
                                                    [r15 release];
                                                    rbx = var_218;
                                                    r13 = var_1B8;
                                                    r14 = var_1C0;
                                            }
                                            r12 = r12 + 0x1;
                                    } while (r12 < r13);
                                    r8 = 0x10;
                                    r13 = [var_1B0 countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                            } while (r13 != 0x0);
                    }
                    else {
                            var_198 = 0x0;
                    }
                    [var_1B0 release];
                    r13 = var_1A8;
                    r15 = [[var_210 allValues] retain];
                    rbx = [[var_210 allKeys] retain];
                    xmm0 = intrinsic_movsd(xmm0, var_200);
                    xmm1 = intrinsic_movsd(xmm1, var_208);
                    intrinsic_movsd(xmm2, var_250);
                    intrinsic_movsd(xmm3, var_258);
                    r14 = [[r13->_layout _invalidationContextForReorderingTargetPosition:r15 targetIndexPaths:rbx withPreviousPosition:r8 previousIndexPaths:r9] retain];
                    var_1A0 = r14;
                    rdi = rbx;
                    [rdi release];
                    [r15 release];
                    r15 = var_198 & 0x1;
                    var_198 = [var_210 retain];
                    var_108 = var_210;
                    rbx = [r13 retain];
                    var_100 = rbx;
                    rcx = 0x0;
                    r8 = r14;
                    [rbx _performBatchUpdates:__NSConcreteStackBlock completion:rcx invalidationContext:r8 tentativelyForReordering:0x1];
                    COND = r15 == 0x0;
                    r15 = rbx;
                    if (!COND) {
                            var_130 = [r15 retain];
                            xmm0 = intrinsic_movsd(xmm0, *0xc4f870);
                            [r15->_reorderFeedbackBehavior performFeedbackWithDelay:__NSConcreteStackBlock insideBlock:rcx];
                            [var_130 release];
                    }
                    rdx = @selector(bounds);
                    objc_msgSend_stret(var_170, r15, rdx);
                    r13 = [[r13->_reorderedItems firstObject] retain];
                    rsi = @selector(cell);
                    rbx = [_objc_msgSend(r13, rsi, rdx, 0x0, r8) retain];
                    if (rbx != 0x0) {
                            rdx = @selector(frame);
                            rsi = rbx;
                            objc_msgSend_stret(var_190, rsi, rdx);
                    }
                    else {
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            var_180 = intrinsic_movapd(var_180, xmm0);
                            var_190 = intrinsic_movapd(var_190, xmm0);
                    }
                    [rbx release];
                    rdi = r13;
                    [rdi release];
                    CGRectGetMinY(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    CGRectGetMinY(rdi);
                    rbx = 0x1;
                    xmm1 = intrinsic_movsd(xmm1, var_1A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 <= 0x0) {
                            CGRectGetMaxY(rdi);
                            xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                            CGRectGetMaxY(rdi);
                            xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                            rbx = xmm0 > 0x0 ? 0x1 : 0x0;
                    }
                    CGRectGetMinX(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    rcx = var_188;
                    CGRectGetMinX(rdi);
                    xmm1 = intrinsic_movsd(xmm1, var_1A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 <= 0x0) {
                            CGRectGetMaxX(rdi);
                            xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                            rcx = var_188;
                            CGRectGetMaxX(rdi);
                            xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                            if (((rbx | (xmm0 > 0x0 ? 0x1 : 0x0)) & 0xff) == 0x1) {
                                    if (r15->_autoscrollTimer == 0x0) {
                                            if ([r15 isPagingEnabled] == 0x0) {
                                                    intrinsic_movsd(xmm0, *0xc50128);
                                            }
                                            else {
                                                    intrinsic_movsd(xmm0, *0xc4f410);
                                            }
                                            rcx = @selector(_autoscrollForReordering:);
                                            rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                            r8 = 0x0;
                                            rdx = r15;
                                            r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                            [r15->_autoscrollTimer release];
                                    }
                            }
                            else {
                                    if (r15->_autoscrollTimer != 0x0) {
                                            rsi = @selector(_stopAutoscrollTimer);
                                            _objc_msgSend(r15, rsi);
                                    }
                            }
                    }
                    else {
                            if (r15->_autoscrollTimer == 0x0) {
                                    if ([r15 isPagingEnabled] == 0x0) {
                                            intrinsic_movsd(xmm0, *0xc50128);
                                    }
                                    else {
                                            intrinsic_movsd(xmm0, *0xc4f410);
                                    }
                                    rcx = @selector(_autoscrollForReordering:);
                                    rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                    r8 = 0x0;
                                    rdx = r15;
                                    r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                    [r15->_autoscrollTimer release];
                            }
                    }
                    [var_100 release];
                    [var_108 release];
                    [var_1A0 release];
                    [var_198 release];
            }
    }
    else {
            r14 = rbx;
            var_1A8 = r14;
            [r14->_dataSourceToLayoutIndexPathMappingDict removeAllObjects];
            [r14 _unpinReorderedItemsIfNeeded];
            xmm0 = intrinsic_movsd(xmm0, r14->_reorderingTargetPosition);
            var_250 = intrinsic_movsd(var_250, xmm0);
            xmm0 = intrinsic_movsd(xmm0, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
            var_258 = intrinsic_movsd(var_258, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_200);
            r14->_reorderingTargetPosition = intrinsic_movsd(r14->_reorderingTargetPosition, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_208);
            *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8) = intrinsic_movsd(*(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8), xmm0);
            var_210 = [[NSMutableDictionary alloc] initWithCapacity:r12];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_C0, xmm0);
            intrinsic_movapd(var_D0, xmm0);
            var_E0 = intrinsic_movapd(var_E0, xmm0);
            var_F0 = intrinsic_movapd(var_F0, xmm0);
            rax = [r14->_reorderedItems retain];
            var_1B0 = rax;
            r8 = 0x10;
            r13 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
            if (r13 != 0x0) {
                    rbx = *var_E0;
                    var_218 = rbx;
                    var_198 = 0x0;
                    do {
                            var_1B8 = r13;
                            r14 = @selector(pinned);
                            var_1C0 = r14;
                            var_230 = *_OBJC_IVAR_$_UIScrollView._delegate + var_1A8;
                            r12 = 0x0;
                            do {
                                    if (*var_E0 != rbx) {
                                            objc_enumerationMutation(var_1B0);
                                    }
                                    r15 = *(var_E8 + r12 * 0x8);
                                    if (_objc_msgSend(r15, r14) == 0x0) {
                                            var_1A0 = r15;
                                            r15 = [[r15 targetIndexPath] retain];
                                            rbx = var_1A8;
                                            rcx = *_OBJC_IVAR_$_UICollectionView._layout;
                                            xmm0 = intrinsic_movsd(xmm0, var_200);
                                            xmm1 = intrinsic_movsd(xmm1, var_208);
                                            r13 = [[*(rbx + rcx) _reorderingTargetItemIndexPathForPosition:r15 withPreviousIndexPath:rcx] retain];
                                            rax = rbx->_collectionViewFlags;
                                            if ((rax & 0x20000) == 0x0) {
                                                    if ((rax & 0x10000) != 0x0) {
                                                            rbx = objc_loadWeakRetained(var_230);
                                                            rcx = r15;
                                                            r8 = r13;
                                                            var_220 = [[rbx _collectionView:var_1A8 targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                            [r13 release];
                                                            rdi = rbx;
                                                            [rdi release];
                                                            r13 = var_220;
                                                    }
                                            }
                                            else {
                                                    rax = objc_loadWeakRetained(var_230);
                                                    var_220 = rax;
                                                    rdx = rbx;
                                                    rcx = r15;
                                                    r8 = r13;
                                                    var_228 = [[rax collectionView:rdx targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                    [r13 release];
                                                    [var_220 release];
                                                    r13 = var_228;
                                            }
                                            var_198 = var_198 & 0x1 | [r13 isEqual:r15, rcx, r8] ^ 0x1;
                                            [var_210 setObject:r13 forKeyedSubscript:r15, r8];
                                            [var_1A0 setTargetIndexPath:r13, r15, r8];
                                            [r13 release];
                                            [r15 release];
                                            rbx = var_218;
                                            r13 = var_1B8;
                                            r14 = var_1C0;
                                    }
                                    r12 = r12 + 0x1;
                            } while (r12 < r13);
                            r8 = 0x10;
                            r13 = [var_1B0 countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                    } while (r13 != 0x0);
            }
            else {
                    var_198 = 0x0;
            }
            [var_1B0 release];
            r13 = var_1A8;
            r15 = [[var_210 allValues] retain];
            rbx = [[var_210 allKeys] retain];
            xmm0 = intrinsic_movsd(xmm0, var_200);
            xmm1 = intrinsic_movsd(xmm1, var_208);
            intrinsic_movsd(xmm2, var_250);
            intrinsic_movsd(xmm3, var_258);
            r14 = [[r13->_layout _invalidationContextForReorderingTargetPosition:r15 targetIndexPaths:rbx withPreviousPosition:r8 previousIndexPaths:r9] retain];
            var_1A0 = r14;
            rdi = rbx;
            [rdi release];
            [r15 release];
            r15 = var_198 & 0x1;
            var_198 = [var_210 retain];
            var_108 = var_210;
            rbx = [r13 retain];
            var_100 = rbx;
            rcx = 0x0;
            r8 = r14;
            [rbx _performBatchUpdates:__NSConcreteStackBlock completion:rcx invalidationContext:r8 tentativelyForReordering:0x1];
            COND = r15 == 0x0;
            r15 = rbx;
            if (!COND) {
                    var_130 = [r15 retain];
                    xmm0 = intrinsic_movsd(xmm0, *0xc4f870);
                    [r15->_reorderFeedbackBehavior performFeedbackWithDelay:__NSConcreteStackBlock insideBlock:rcx];
                    [var_130 release];
            }
            rdx = @selector(bounds);
            objc_msgSend_stret(var_170, r15, rdx);
            r13 = [[r13->_reorderedItems firstObject] retain];
            rsi = @selector(cell);
            rbx = [_objc_msgSend(r13, rsi, rdx, 0x0, r8) retain];
            if (rbx != 0x0) {
                    rdx = @selector(frame);
                    rsi = rbx;
                    objc_msgSend_stret(var_190, rsi, rdx);
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_180 = intrinsic_movapd(var_180, xmm0);
                    var_190 = intrinsic_movapd(var_190, xmm0);
            }
            [rbx release];
            rdi = r13;
            [rdi release];
            CGRectGetMinY(rdi);
            xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
            CGRectGetMinY(rdi);
            rbx = 0x1;
            xmm1 = intrinsic_movsd(xmm1, var_1A8);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 <= 0x0) {
                    CGRectGetMaxY(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    CGRectGetMaxY(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                    rbx = xmm0 > 0x0 ? 0x1 : 0x0;
            }
            CGRectGetMinX(rdi);
            xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
            rcx = var_188;
            CGRectGetMinX(rdi);
            xmm1 = intrinsic_movsd(xmm1, var_1A8);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 <= 0x0) {
                    CGRectGetMaxX(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    rcx = var_188;
                    CGRectGetMaxX(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                    if (((rbx | (xmm0 > 0x0 ? 0x1 : 0x0)) & 0xff) == 0x1) {
                            if (r15->_autoscrollTimer == 0x0) {
                                    if ([r15 isPagingEnabled] == 0x0) {
                                            intrinsic_movsd(xmm0, *0xc50128);
                                    }
                                    else {
                                            intrinsic_movsd(xmm0, *0xc4f410);
                                    }
                                    rcx = @selector(_autoscrollForReordering:);
                                    rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                    r8 = 0x0;
                                    rdx = r15;
                                    r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                    [r15->_autoscrollTimer release];
                            }
                    }
                    else {
                            if (r15->_autoscrollTimer != 0x0) {
                                    rsi = @selector(_stopAutoscrollTimer);
                                    _objc_msgSend(r15, rsi);
                            }
                    }
            }
            else {
                    if (r15->_autoscrollTimer == 0x0) {
                            if ([r15 isPagingEnabled] == 0x0) {
                                    intrinsic_movsd(xmm0, *0xc50128);
                            }
                            else {
                                    intrinsic_movsd(xmm0, *0xc4f410);
                            }
                            rcx = @selector(_autoscrollForReordering:);
                            rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                            r8 = 0x0;
                            rdx = r15;
                            r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                            [r15->_autoscrollTimer release];
                    }
            }
            [var_100 release];
            [var_108 release];
            [var_1A0 release];
            [var_198 release];
    }
    goto loc_990d81;

loc_990d81:
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}



void ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke(int arg0) {
    rdi = arg0;
    if (*(int8_t *)(rdi + 0x30) != 0x0) {
            *((rsp - 0x8) + 0xffffffffffffffd0) = __NSConcreteStackBlock;
            *(int32_t *)((rsp - 0x8) + 0xffffffffffffffd8) = 0xc2000000;
            *(int32_t *)((rsp - 0x8) + 0xffffffffffffffdc) = 0x0;
            *((rsp - 0x8) + 0xffffffffffffffe0) = ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke_2;
            *((rsp - 0x8) + 0xffffffffffffffe8) = ___block_descriptor_tmp.2285;
            *((rsp - 0x8) + 0xfffffffffffffff0) = [*(rdi + 0x28) retain];
            [*(rdi + 0x20) enumerateKeysAndObjectsUsingBlock:(rsp - 0x8) + 0xffffffffffffffd0];
            [*((rsp - 0x8) + 0xfffffffffffffff0) release];
    }
    return;
}

int ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke_2(int arg0, int arg1, int arg2) {
    rax = [*(arg0 + 0x20) moveItemAtIndexPath:arg1 toIndexPath:arg2];
    return rax;
}

int ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke.2289(int arg0) {
    rax = [*(arg0 + 0x20)->_reorderFeedbackBehavior objectSnapped];
    return rax;
}

bool -[UICollectionView _canReorderItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    rbx = [arg2 retain];
    if (rbx == 0x0) goto loc_990f6e;

loc_990efe:
    rax = r14->_collectionViewFlags;
    if (BIT_TEST(rax, 0x25)) goto loc_990f67;

loc_990f10:
    r15 = 0x1;
    if (BIT_TEST(rax, 0x24)) goto loc_990fbf;

loc_990f1e:
    r12 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + r14);
    if ([r12 collectionView:r14 canMoveItemAtIndexPath:rbx] != 0x0) goto loc_990fb6;

loc_990f4a:
    [r12 release];
    if (BIT_TEST(r14->_collectionViewFlags, 0x24)) goto loc_990fbf;

loc_990f63:
    rax = r14->_collectionViewFlags;
    goto loc_990f67;

loc_990f67:
    if (BIT_TEST(rax, 0x23)) goto loc_990f73;

loc_990f6e:
    r15 = 0x0;
    goto loc_990fbf;

loc_990fbf:
    [rbx release];
    rax = r15;
    return rax;

loc_990f73:
    r15 = 0x1;
    if (BIT_TEST(rax, 0x22)) goto loc_990fbf;

loc_990f7d:
    r12 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + r14);
    r15 = 0x1;
    if ([r12 _collectionView:r14 canMoveItemAtIndexPath:rbx] == 0x0) {
            r15 = (BIT_TEST(r14->_collectionViewFlags, 0x22)) ? 0x1 : 0x0;
    }
    goto loc_990fb6;

loc_990fb6:
    [r12 release];
    goto loc_990fbf;
}

bool -[UICollectionView beginInteractiveMovementForItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rbx = arg2;
    r14 = _cmd;
    r13 = self;
    if ([r13->_reorderedItems count] != 0x0) {
            var_38 = r14;
            var_30 = rbx;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r12 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_38 object:r13 file:r12 lineNumber:0x1ed7 description:@"attempt to begin reordering on collection view while reordering is already in progress"];
            [r12 release];
            rdi = rbx;
            rbx = var_30;
            [rdi release];
    }
    if ([r13 _canReorderItemAtIndexPath:rbx] != 0x0) {
            var_30 = rbx;
            [r13->_reorderFeedbackBehavior userInteractionStarted];
            [r13->_reorderFeedbackBehavior draggedObjectLifted];
            [r13 _resetPrefetchState];
            r15 = r13->_reorderedItems;
            if (r15 == 0x0) {
                    r13->_reorderedItems = [[NSMutableArray alloc] init];
                    [r13->_reorderedItems release];
                    r15 = r13->_reorderedItems;
            }
            r12 = [UICollectionViewReorderedItem alloc];
            r13 = [[r13 cellForItemAtIndexPath:var_30] retain];
            rbx = [r12 initWithCell:r13 indexPath:var_30];
            [r15 addObject:rbx];
            [rbx release];
            [r13 release];
            rax = 0x1;
    }
    else {
            rax = 0x0;
    }
    return rax;
}

void -[UICollectionView updateInteractiveMovementTargetPosition:](void * self, void * _cmd, struct CGPoint arg2) {
    [self _updateReorderingTargetPosition:0x0 forced:rcx];
    [self->_reorderFeedbackBehavior positionUpdated];
    return;
}

bool -[UICollectionView canBecomeFocused](void * self, void * _cmd) {
    r15 = self;
    if ((([self remembersLastFocusedIndexPath] != 0x0) && ([r15->_collectionViewData numberOfSections] > 0x0)) && ([r15->_collectionViewData numberOfItems] > 0x0)) {
            rbx = [[r15 _screen] retain];
            r14 = [[rbx focusedView] retain];
            [rbx release];
            rbx = 0x1;
            if ([r15 containsView:r14] != 0x0) {
                    rbx = [r15 _isFocusableElement];
            }
            [r14 release];
    }
    else {
            rbx = 0x0;
    }
    rax = rbx;
    return rax;
}

void * -[UICollectionView preferredFocusedItem](void * self, void * _cmd) {
    rbx = self;
    var_30 = *___stack_chk_guard;
    if ((((BIT_TEST(rbx->_collectionViewFlags, 0x34))) || ([rbx->_collectionViewData numberOfSections] <= 0x0)) || ([rbx->_collectionViewData numberOfItems] <= 0x0)) goto loc_98df09;

loc_98deb7:
    var_180 = 0x0;
    r13 = 0x0;
    if (rbx->_focusedCellIndexPath == 0x0) goto loc_98df88;

loc_98deda:
    rdi = rbx->_focusedCell;
    if (rbx->_focusedViewType != 0x2) goto loc_98df41;

loc_98def3:
    var_180 = 0x0;
    r13 = 0x0;
    if (rdi != 0x0) {
            r13 = [rdi retain];
            var_180 = [rbx->_focusedCellIndexPath retain];
    }
    goto loc_98df88;

loc_98df88:
    if (*(int32_t *)__UIApplicationLinkedOnVersion != 0x0) {
            if (*(int32_t *)__UIApplicationLinkedOnVersion >= 0x90200) {
                    rax = [rbx remembersLastFocusedIndexPath];
                    if ((var_180 != 0x0) && (rax != 0x0)) {
                            var_138 = [r13 retain];
                            rax = [var_180 retain];
                            r15 = rbx;
                            var_188 = 0x0;
                    }
                    else {
                            r14 = rbx;
                            rbx = [[rbx _delegatePreferredIndexPath] retain];
                            var_188 = 0x0;
                            rax = 0x0;
                            if (rbx != 0x0) {
                                    rax = [rbx retain];
                                    var_188 = 0x1;
                            }
                            r15 = rax;
                            [rbx release];
                            var_138 = 0x0;
                            if (var_180 != 0x0) {
                                    rax = r15;
                                    if (rax == 0x0) {
                                            var_138 = [r13 retain];
                                            rax = [var_180 retain];
                                    }
                            }
                            else {
                                    rax = r15;
                            }
                            var_130 = r14;
                            r15 = r14;
                            if (rax == 0x0) {
                                    intrinsic_movaps(var_C0, 0x0);
                                    intrinsic_movaps(var_D0, 0x0);
                                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                                    rax = [r15 visibleCells];
                                    rax = [rax retain];
                                    var_150 = rax;
                                    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                    var_120 = rax;
                                    if (rax != 0x0) {
                                            var_190 = r13;
                                            var_128 = *var_E0;
                                            r14 = 0x0;
                                            do {
                                                    rbx = @selector(_hasFocusableContents);
                                                    var_158 = rbx;
                                                    r13 = 0x0;
                                                    do {
                                                            if (*var_E0 != var_128) {
                                                                    objc_enumerationMutation(var_150);
                                                            }
                                                            r12 = *(var_E8 + r13 * 0x8);
                                                            if (_objc_msgSend(r12, rbx) != 0x0) {
                                                                    rax = [r15 indexPathForCell:r12];
                                                                    rax = [rax retain];
                                                                    var_118 = r14;
                                                                    if (r14 != 0x0) {
                                                                            COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                            rax = rax;
                                                                            if (!COND) {
                                                                                    r14 = rax;
                                                                                    r12 = [r12 retain];
                                                                                    [var_138 release];
                                                                                    rbx = [r14 retain];
                                                                                    [var_118 release];
                                                                                    rax = r14;
                                                                                    r14 = rbx;
                                                                                    var_138 = r12;
                                                                            }
                                                                            else {
                                                                                    r14 = var_118;
                                                                            }
                                                                    }
                                                                    else {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    [rax release];
                                                                    r15 = var_130;
                                                                    rbx = var_158;
                                                            }
                                                            r13 = r13 + 0x1;
                                                    } while (r13 < var_120);
                                                    rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                                    var_120 = rax;
                                            } while (rax != 0x0);
                                            [var_150 release];
                                            rax = r14;
                                            r13 = var_190;
                                            if (rax == 0x0) {
                                                    [var_138 release];
                                                    var_138 = 0x0;
                                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                                    rax = [rax retain];
                                            }
                                    }
                                    else {
                                            [var_150 release];
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                    }
            }
            else {
                    r14 = rbx;
                    rbx = [[rbx _delegatePreferredIndexPath] retain];
                    var_188 = 0x0;
                    rax = 0x0;
                    if (rbx != 0x0) {
                            rax = [rbx retain];
                            var_188 = 0x1;
                    }
                    r15 = rax;
                    [rbx release];
                    var_138 = 0x0;
                    if (var_180 != 0x0) {
                            rax = r15;
                            if (rax == 0x0) {
                                    var_138 = [r13 retain];
                                    rax = [var_180 retain];
                            }
                    }
                    else {
                            rax = r15;
                    }
                    var_130 = r14;
                    r15 = r14;
                    if (rax == 0x0) {
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            rax = [r15 visibleCells];
                            rax = [rax retain];
                            var_150 = rax;
                            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_120 = rax;
                            if (rax != 0x0) {
                                    var_190 = r13;
                                    var_128 = *var_E0;
                                    r14 = 0x0;
                                    do {
                                            rbx = @selector(_hasFocusableContents);
                                            var_158 = rbx;
                                            r13 = 0x0;
                                            do {
                                                    if (*var_E0 != var_128) {
                                                            objc_enumerationMutation(var_150);
                                                    }
                                                    r12 = *(var_E8 + r13 * 0x8);
                                                    if (_objc_msgSend(r12, rbx) != 0x0) {
                                                            rax = [r15 indexPathForCell:r12];
                                                            rax = [rax retain];
                                                            var_118 = r14;
                                                            if (r14 != 0x0) {
                                                                    COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                    rax = rax;
                                                                    if (!COND) {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    else {
                                                                            r14 = var_118;
                                                                    }
                                                            }
                                                            else {
                                                                    r14 = rax;
                                                                    r12 = [r12 retain];
                                                                    [var_138 release];
                                                                    rbx = [r14 retain];
                                                                    [var_118 release];
                                                                    rax = r14;
                                                                    r14 = rbx;
                                                                    var_138 = r12;
                                                            }
                                                            [rax release];
                                                            r15 = var_130;
                                                            rbx = var_158;
                                                    }
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_120);
                                            rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                            var_120 = rax;
                                    } while (rax != 0x0);
                                    [var_150 release];
                                    rax = r14;
                                    r13 = var_190;
                                    if (rax == 0x0) {
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                            else {
                                    [var_150 release];
                                    [var_138 release];
                                    var_138 = 0x0;
                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                    rax = [rax retain];
                            }
                    }
            }
    }
    else {
            if (__UIApplicationLinkedOnOrAfter(0x90200) != 0x0) {
                    rax = [rbx remembersLastFocusedIndexPath];
                    if ((var_180 != 0x0) && (rax != 0x0)) {
                            var_138 = [r13 retain];
                            rax = [var_180 retain];
                            r15 = rbx;
                            var_188 = 0x0;
                    }
                    else {
                            r14 = rbx;
                            rbx = [[rbx _delegatePreferredIndexPath] retain];
                            var_188 = 0x0;
                            rax = 0x0;
                            if (rbx != 0x0) {
                                    rax = [rbx retain];
                                    var_188 = 0x1;
                            }
                            r15 = rax;
                            [rbx release];
                            var_138 = 0x0;
                            if (var_180 != 0x0) {
                                    rax = r15;
                                    if (rax == 0x0) {
                                            var_138 = [r13 retain];
                                            rax = [var_180 retain];
                                    }
                            }
                            else {
                                    rax = r15;
                            }
                            var_130 = r14;
                            r15 = r14;
                            if (rax == 0x0) {
                                    intrinsic_movaps(var_C0, 0x0);
                                    intrinsic_movaps(var_D0, 0x0);
                                    var_E0 = intrinsic_movaps(var_E0, 0x0);
                                    var_F0 = intrinsic_movaps(var_F0, 0x0);
                                    rax = [r15 visibleCells];
                                    rax = [rax retain];
                                    var_150 = rax;
                                    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                    var_120 = rax;
                                    if (rax != 0x0) {
                                            var_190 = r13;
                                            var_128 = *var_E0;
                                            r14 = 0x0;
                                            do {
                                                    rbx = @selector(_hasFocusableContents);
                                                    var_158 = rbx;
                                                    r13 = 0x0;
                                                    do {
                                                            if (*var_E0 != var_128) {
                                                                    objc_enumerationMutation(var_150);
                                                            }
                                                            r12 = *(var_E8 + r13 * 0x8);
                                                            if (_objc_msgSend(r12, rbx) != 0x0) {
                                                                    rax = [r15 indexPathForCell:r12];
                                                                    rax = [rax retain];
                                                                    var_118 = r14;
                                                                    if (r14 != 0x0) {
                                                                            COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                            rax = rax;
                                                                            if (!COND) {
                                                                                    r14 = rax;
                                                                                    r12 = [r12 retain];
                                                                                    [var_138 release];
                                                                                    rbx = [r14 retain];
                                                                                    [var_118 release];
                                                                                    rax = r14;
                                                                                    r14 = rbx;
                                                                                    var_138 = r12;
                                                                            }
                                                                            else {
                                                                                    r14 = var_118;
                                                                            }
                                                                    }
                                                                    else {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    [rax release];
                                                                    r15 = var_130;
                                                                    rbx = var_158;
                                                            }
                                                            r13 = r13 + 0x1;
                                                    } while (r13 < var_120);
                                                    rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                                    var_120 = rax;
                                            } while (rax != 0x0);
                                            [var_150 release];
                                            rax = r14;
                                            r13 = var_190;
                                            if (rax == 0x0) {
                                                    [var_138 release];
                                                    var_138 = 0x0;
                                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                                    rax = [rax retain];
                                            }
                                    }
                                    else {
                                            [var_150 release];
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                    }
            }
            else {
                    r14 = rbx;
                    rbx = [[rbx _delegatePreferredIndexPath] retain];
                    var_188 = 0x0;
                    rax = 0x0;
                    if (rbx != 0x0) {
                            rax = [rbx retain];
                            var_188 = 0x1;
                    }
                    r15 = rax;
                    [rbx release];
                    var_138 = 0x0;
                    if (var_180 != 0x0) {
                            rax = r15;
                            if (rax == 0x0) {
                                    var_138 = [r13 retain];
                                    rax = [var_180 retain];
                            }
                    }
                    else {
                            rax = r15;
                    }
                    var_130 = r14;
                    r15 = r14;
                    if (rax == 0x0) {
                            intrinsic_movaps(var_C0, 0x0);
                            intrinsic_movaps(var_D0, 0x0);
                            var_E0 = intrinsic_movaps(var_E0, 0x0);
                            var_F0 = intrinsic_movaps(var_F0, 0x0);
                            rax = [r15 visibleCells];
                            rax = [rax retain];
                            var_150 = rax;
                            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_120 = rax;
                            if (rax != 0x0) {
                                    var_190 = r13;
                                    var_128 = *var_E0;
                                    r14 = 0x0;
                                    do {
                                            rbx = @selector(_hasFocusableContents);
                                            var_158 = rbx;
                                            r13 = 0x0;
                                            do {
                                                    if (*var_E0 != var_128) {
                                                            objc_enumerationMutation(var_150);
                                                    }
                                                    r12 = *(var_E8 + r13 * 0x8);
                                                    if (_objc_msgSend(r12, rbx) != 0x0) {
                                                            rax = [r15 indexPathForCell:r12];
                                                            rax = [rax retain];
                                                            var_118 = r14;
                                                            if (r14 != 0x0) {
                                                                    COND = [r15->_collectionViewData globalIndexForItemAtIndexPath:rax] >= [var_130->_collectionViewData globalIndexForItemAtIndexPath:var_118];
                                                                    rax = rax;
                                                                    if (!COND) {
                                                                            r14 = rax;
                                                                            r12 = [r12 retain];
                                                                            [var_138 release];
                                                                            rbx = [r14 retain];
                                                                            [var_118 release];
                                                                            rax = r14;
                                                                            r14 = rbx;
                                                                            var_138 = r12;
                                                                    }
                                                                    else {
                                                                            r14 = var_118;
                                                                    }
                                                            }
                                                            else {
                                                                    r14 = rax;
                                                                    r12 = [r12 retain];
                                                                    [var_138 release];
                                                                    rbx = [r14 retain];
                                                                    [var_118 release];
                                                                    rax = r14;
                                                                    r14 = rbx;
                                                                    var_138 = r12;
                                                            }
                                                            [rax release];
                                                            r15 = var_130;
                                                            rbx = var_158;
                                                    }
                                                    r13 = r13 + 0x1;
                                            } while (r13 < var_120);
                                            rax = [var_150 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                                            var_120 = rax;
                                    } while (rax != 0x0);
                                    [var_150 release];
                                    rax = r14;
                                    r13 = var_190;
                                    if (rax == 0x0) {
                                            [var_138 release];
                                            var_138 = 0x0;
                                            rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                            rax = [rax retain];
                                    }
                            }
                            else {
                                    [var_150 release];
                                    [var_138 release];
                                    var_138 = 0x0;
                                    rax = [r15->_collectionViewData indexPathForItemAtGlobalIndex:0x0];
                                    rax = [rax retain];
                            }
                    }
            }
    }
    var_118 = rax;
    if (rax == 0x0) goto loc_98e5d8;

loc_98e349:
    rdi = var_138;
    if (rdi != 0x0) goto loc_98e5df;

loc_98e359:
    if ((var_188 != 0x0) || (r15->_focusedViewType != 0x2)) goto loc_98e4df;

loc_98e37a:
    rbx = [[r15 _focusedCellElementKind] retain];
    [rbx release];
    if (rbx == 0x0) goto loc_98e4df;

loc_98e3ad:
    rbx = [[r15 _focusedCellElementKind] retain];
    r12 = [[r15 supplementaryViewForElementKind:rbx atIndexPath:var_118] retain];
    rdi = rbx;
    rbx = r15;
    [rdi release];
    rdi = r12;
    if (rdi != 0x0) goto loc_98e5e4;

loc_98e405:
    r12 = [[rbx _focusedCellElementKind] retain];
    var_128 = r12;
    rax = [rbx _focusedCellElementKind];
    rax = [rax retain];
    var_120 = rax;
    r14 = rbx;
    rbx = [[rbx layoutAttributesForSupplementaryElementOfKind:rax atIndexPath:var_118] retain];
    r12 = [r14 _createPreparedSupplementaryViewForElementOfKind:r12 atIndexPath:var_118 withLayoutAttributes:rbx applyAttributes:0x1];
    [rdi release];
    [rbx release];
    [var_120 release];
    [var_128 release];
    r15 = r14;
    [r14 _setFocusedCell:r12];
    rdi = r12;
    goto loc_98e5df;

loc_98e5df:
    if (rdi != 0x0) {
            r12 = [rdi retain];
            r14 = r12;
    }
    else {
            r12 = [[[r15 super] preferredFocusedItem] retain];
            r14 = 0x0;
    }
    goto loc_98e628;

loc_98e628:
    [var_180 release];
    [r13 release];
    [var_118 release];
    [r14 release];
    goto loc_98e65c;

loc_98e65c:
    if (*___stack_chk_guard == var_30) {
            rdi = r12;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;

loc_98e5e4:
    r12 = [rdi retain];
    r14 = r12;
    goto loc_98e628;

loc_98e4df:
    rdi = [[r15 cellForItemAtIndexPath:var_118] retain];
    if (rdi != 0x0) goto loc_98e5df;

loc_98e50a:
    var_138 = rdi;
    rbx = r15;
    r14 = [[r15 layoutAttributesForItemAtIndexPath:var_118] retain];
    if (r14 != 0x0) {
            if ([r14 isHidden] == 0x0) {
                    var_190 = r13;
                    r13 = [[rbx layoutAttributesForItemAtIndexPath:var_118] retain];
                    r15 = [rbx _createPreparedCellForItemAtIndexPath:var_118 withLayoutAttributes:r13 applyAttributes:0x1 isFocused:0x1 notify:0x1];
                    [var_138 release];
                    rdi = r13;
                    r13 = var_190;
                    [rdi release];
                    var_138 = r15;
            }
    }
    else {
            var_190 = r13;
            r13 = [[rbx layoutAttributesForItemAtIndexPath:var_118] retain];
            r15 = [rbx _createPreparedCellForItemAtIndexPath:var_118 withLayoutAttributes:r13 applyAttributes:0x1 isFocused:0x1 notify:0x1];
            [var_138 release];
            rdi = r13;
            r13 = var_190;
            [rdi release];
            var_138 = r15;
    }
    [r14 release];
    r15 = rbx;
    goto loc_98e5d8;

loc_98e5d8:
    rdi = var_138;
    goto loc_98e5df;

loc_98df41:
    if (rdi != 0x0) goto loc_98df6d;

loc_98df46:
    var_180 = 0x0;
    r13 = 0x0;
    if ([rbx _indexPathIsValid:rdx] == 0x0) goto loc_98df88;

loc_98df69:
    rdi = rbx->_focusedCell;
    goto loc_98df6d;

loc_98df6d:
    r13 = [rdi retain];
    var_180 = [rbx->_focusedCellIndexPath retain];
    goto loc_98df88;

loc_98df09:
    r12 = [[[rbx super] preferredFocusedItem] retain];
    goto loc_98e65c;
}

void * -[UICollectionView _delegatePreferredIndexPath](void * self, void * _cmd) {
    r14 = _cmd;
    r13 = self;
    rax = r13->_collectionViewFlags;
    if ((rax & 0x4000000) != 0x0) goto loc_98e6d5;

loc_98e6aa:
    rdi = 0x0;
    if ((rax & 0x1000000) == 0x0) goto loc_98e7e5;

loc_98e6b7:
    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r13);
    rsi = @selector(indexPathForPreferredFocusedItemForCollectionView:);
    goto loc_98e6f1;

loc_98e6f1:
    r15 = [_objc_msgSend(rbx, rsi) retain];
    [rbx release];
    rdi = 0x0;
    if (r15 != 0x0) {
            var_30 = r14;
            if ([r13 _indexPathIsValid:r15] == 0x0) {
                    rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
                    rdi = @"<Unknown File>";
                    if (rbx != 0x0) {
                            rdi = rbx;
                    }
                    r12 = [rdi retain];
                    [rbx release];
                    rbx = [[NSAssertionHandler currentHandler] retain];
                    [rbx handleFailureInMethod:var_30 object:r13 file:r12 lineNumber:0x1d4e description:@"no cell for index path (%@) - the collection view's delegate must return an index path for a valid UICollectionViewCell from -indexPathForPreferredFocusedViewInCollectionView:"];
                    [r12 release];
                    [rbx release];
            }
            rdi = r15;
    }
    goto loc_98e7e5;

loc_98e7e5:
    rax = [rdi autorelease];
    return rax;

loc_98e6d5:
    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r13);
    rsi = @selector(indexPathForPreferredFocusedViewInCollectionView:);
    goto loc_98e6f1;
}

bool -[UICollectionView _cellCanBecomeFocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [arg2 retain];
    r15 = [rbx _allowsEffectiveSelection];
    rdi = 0x0;
    if ((rbx->_collectionViewFlags & 0x140000) != 0x0) {
            r12 = [[rbx _indexPathForCell:r14 includePrefetchedCells:0x1] retain];
            rdi = 0x0;
            if (r12 != 0x0) {
                    rax = rbx->_collectionViewFlags;
                    if ((rax & 0x40000) != 0x0) {
                            r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
                            r15 = [r13 _collectionView:rbx canFocusItemAtIndexPath:r12];
                            [r13 release];
                            rax = rbx->_collectionViewFlags;
                    }
                    rdi = r12;
                    if ((rax & 0x100000) != 0x0) {
                            r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
                            r15 = [r13 collectionView:rbx canFocusItemAtIndexPath:r12];
                            [r13 release];
                            rdi = r12;
                    }
            }
    }
    [rdi release];
    [r14 release];
    rax = r15;
    return rax;
}

void -[UICollectionView _cellBecameFocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [[self indexPathForCell:arg2] retain];
    if ((rbx->_collectionViewFlags & 0x200000) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            [r15 _collectionView:rbx didFocusItemAtIndexPath:r14];
            [r15 release];
    }
    rdi = r14;
    [rdi release];
    return;
}

void * -[UICollectionView _childFocusRegionsInRect:](void * self, void * _cmd, struct CGRect arg2) {
    var_128 = self;
    r15 = [[NSMutableArray array] retain];
    var_180 = r15;
    rbx = [[self _childFocusRegions] retain];
    [r15 addObjectsFromArray:rbx];
    [rbx release];
    [var_D0 convertRect:self fromView:0x0, r8];
    r13 = [[self->_collectionViewData layoutAttributesForElementsInRect:rbx, 0x0] retain];
    var_148 = r13;
    intrinsic_movaps(var_E0, 0x0);
    intrinsic_movaps(var_F0, 0x0);
    var_100 = intrinsic_movaps(var_100, 0x0);
    var_110 = intrinsic_movaps(var_110, 0x0);
    rbx = [r13 countByEnumeratingWithState:var_110 objects:var_B0 count:0x10];
    if (rbx != 0x0) {
            r14 = *var_100;
            var_150 = r14;
            do {
                    var_130 = rbx;
                    r12 = 0x0;
                    do {
                            if (*var_100 != r14) {
                                    objc_enumerationMutation(r13);
                            }
                            r15 = *(var_108 + r12 * 0x8);
                            if (([r15 isHidden] == 0x0) && ([r15 representedElementCategory] == 0x0)) {
                                    r14 = [[r15 indexPath] retain];
                                    r13 = [[var_128 cellForItemAtIndexPath:r14] retain];
                                    [r14 release];
                                    if (r13 == 0x0) {
                                            rbx = [[_UICollectionViewCellPromiseRegion alloc] init];
                                            [rbx setCollectionView:var_128];
                                            [rbx setLayoutAttributes:r15];
                                            [var_180 addObject:rbx];
                                            [rbx release];
                                    }
                                    [r13 release];
                                    r13 = var_148;
                                    r14 = var_150;
                                    rbx = var_130;
                            }
                            r12 = r12 + 0x1;
                    } while (r12 < rbx);
                    rbx = [r13 countByEnumeratingWithState:var_110 objects:var_B0 count:0x10];
            } while (rbx != 0x0);
    }
    r15 = [var_180 copy];
    [r13 release];
    [var_180 release];
    if (*___stack_chk_guard == *___stack_chk_guard) {
            rdi = r15;
            rax = [rdi autorelease];
    }
    else {
            rax = __stack_chk_fail();
    }
    return rax;
}

void * -[UICollectionView _fulfillPromisedFocusRegionForCell:](void * self, void * _cmd, void * arg2) {
    rax = [arg2 retain];
    var_-48 = rax;
    rbx = [[rax layoutAttributes] retain];
    r12 = [[rbx indexPath] retain];
    rdi = rbx;
    rbx = self;
    [rdi release];
    r13 = [[rbx cellForItemAtIndexPath:r12] retain];
    if (r13 == 0x0) {
            var_-56 = rbx;
            rdx = r12;
            rax = [rbx->_prefetchCacheItems objectForKeyedSubscript:rdx];
            rax = [rax retain];
            var_-64 = rax;
            if (rax != 0x0) {
                    rbx = [[var_-48 layoutAttributes] retain];
                    r14 = [rbx _isCell];
                    [rbx release];
                    COND = r14 == 0x0;
                    if (!COND) {
                            rbx = [[var_-64 view] retain];
                            [r13 release];
                            [rbx _setHiddenForReuse:0x0];
                            rdx = r12;
                            [var_-56->_prefetchCacheItems removeObjectForKey:rdx];
                            if (rbx != 0x0) {
                                    r13 = rbx;
                                    r14 = var_-56;
                            }
                            else {
                                    rbx = [[var_-48 layoutAttributes] retain];
                                    r14 = var_-56;
                                    rcx = rbx;
                                    r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                                    [rbx release];
                            }
                    }
                    else {
                            rbx = [[var_-48 layoutAttributes] retain];
                            r14 = var_-56;
                            rcx = rbx;
                            r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                            [rbx release];
                    }
            }
            else {
                    rbx = [[var_-48 layoutAttributes] retain];
                    r14 = var_-56;
                    rcx = rbx;
                    r13 = [r14 _createPreparedCellForItemAtIndexPath:r12 withLayoutAttributes:rcx applyAttributes:0x1];
                    [rbx release];
            }
            [r14 _setCurrentPromiseFulfillmentCell:r13, rcx, 0x1];
            [r14->_visibleCellsDict setObject:r13 forKeyedSubscript:r12, 0x1];
            [r13 layoutIfNeeded];
            [var_-64 release];
    }
    [r12 release];
    [var_-48 release];
    rdi = r13;
    rax = [rdi autorelease];
    return rax;
}

void -[UICollectionView _focusedView:isMinX:isMaxX:isMinY:isMaxY:](void * self, void * _cmd, void * arg2, bool * arg3, bool * arg4, bool * arg5, bool * arg6) {
    stack[2048] = arg6;
    var_-472 = arg5;
    var_-480 = arg4;
    var_-488 = arg3;
    var_-432 = self;
    var_-448 = [arg2 retain];
    var_-64 = 0x0;
    var_-96 = 0x0;
    var_-128 = 0x0;
    var_-160 = 0x0;
    var_-489 = [self _canScrollX];
    var_-457 = [var_-432 _canScrollY];
    var_-456 = objc_retainBlock(__NSConcreteStackBlock);
    rbx = [[var_-432 _collectionViewData] retain];
    r15 = [rbx numberOfItems];
    r14 = arg6;
    [rbx release];
    if (r15 <= 0x0) goto loc_98f762;

loc_98f114:
    r13 = [var_-448 retain];
    r14 = [UICollectionViewCell class];
    var_-504 = 0x0;
    if (r13 == 0x0) goto loc_98f6da;

loc_98f17f:
    var_-512 = r15;
    if (var_-432 == r13) goto loc_98f6da;

loc_98f193:
    var_-504 = 0x0;
    rbx = r13;
    goto loc_98f1bb;

loc_98f1bb:
    if ([rbx isKindOfClass:r14] == 0x0) goto loc_98f1fb;

loc_98f1ce:
    r13 = [[rbx _collectionView] retain];
    [r13 release];
    if (r13 == var_-432) goto loc_98f235;

loc_98f1fb:
    r13 = [[rbx superview] retain];
    [rbx release];
    if (r13 == 0x0) goto loc_98f6da;

loc_98f224:
    rbx = r13;
    if (r13 != var_-432) goto loc_98f1bb;

loc_98f6da:
    rax = *(int8_t *)(var_-64 + 0x18);
    if (rax != 0x0) goto loc_98f70a;

loc_98f6e5:
    rsi = var_-96;
    if (*(int8_t *)(rsi + 0x18) != 0x0) goto loc_98f70a;

loc_98f6ef:
    rdx = var_-128;
    if (*(int8_t *)(rdx + 0x18) != 0x0) goto loc_98f70a;

loc_98f6f9:
    rcx = var_-160;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f96f;

loc_98f70a:
    var_-457 = var_-457 | (rax != 0x0 ? 0x1 : 0x0);
    r14 = arg6;
    if (var_-457 != 0x0) goto loc_98f729;

loc_98f71b:
    rcx = var_-96;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f86c;

loc_98f729:
    if (var_-489 != 0x0) goto loc_98f74d;

loc_98f732:
    rdx = var_-128;
    if (*(int8_t *)(rdx + 0x18) != 0x0) goto loc_98f74d;

loc_98f73c:
    rcx = var_-160;
    if (*(int8_t *)(rcx + 0x18) == 0x0) goto loc_98f8b2;

loc_98f74d:
    [var_-504 release];
    [r13 release];
    goto loc_98f762;

loc_98f762:
    stack[2048] = 0x1;
    [[var_-432 super] _focusedView:var_-448 isMinX:0x1 isMaxX:0x1 isMinY:0x1 isMaxY:stack[2048]];
    rdx = var_-488;
    if (rdx != 0x0) {
            *(int8_t *)rdx = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_-64 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    rsi = var_-480;
    rdx = var_-472;
    if (rsi != 0x0) {
            *(int8_t *)rsi = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_-96 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    if (rdx != 0x0) {
            *(int8_t *)rdx = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_-128 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    if (r14 != 0x0) {
            *(int8_t *)r14 = (0x1 != 0x0 ? 0x1 : 0x0) & (*(int8_t *)(var_-160 + 0x18) != 0x0 ? 0x1 : 0x0);
    }
    goto loc_98f906;

loc_98f906:
    [var_-456 release];
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    _Block_object_dispose(0x0, 0x8);
    [var_-448 release];
    return;

loc_98f8b2:
    rsi = var_-488;
    if (rsi != 0x0) {
            *(int8_t *)rsi = rax;
    }
    rdi = var_-480;
    rsi = var_-472;
    if (rdi != 0x0) {
            *(int8_t *)rdi = *(int8_t *)(var_-96 + 0x18);
    }
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rdx + 0x18);
    }
    if (r14 == 0x0) goto loc_98f8f1;

loc_98f8eb:
    rax = *(int8_t *)(rcx + 0x18);
    goto loc_98f8ee;

loc_98f8ee:
    *(int8_t *)r14 = rax;
    goto loc_98f8f1;

loc_98f8f1:
    [var_-504 release];
    [r13 release];
    goto loc_98f906;

loc_98f86c:
    rax = var_-488;
    rdx = var_-472;
    rsi = var_-480;
    if (rax != 0x0) {
            *(int8_t *)rax = 0x0;
    }
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rcx + 0x18);
    }
    if (rdx != 0x0) {
            *(int8_t *)rdx = *(int8_t *)(var_-128 + 0x18);
    }
    if (r14 == 0x0) goto loc_98f8f1;

loc_98f8a6:
    rax = *(int8_t *)(var_-160 + 0x18);
    goto loc_98f8ee;

loc_98f96f:
    rax = var_-488;
    rbx = arg6;
    if (rax != 0x0) {
            *(int8_t *)rax = 0x0;
    }
    rdi = var_-480;
    if (rdi != 0x0) {
            *(int8_t *)rdi = *(int8_t *)(rsi + 0x18);
    }
    rsi = var_-472;
    if (rsi != 0x0) {
            *(int8_t *)rsi = *(int8_t *)(rdx + 0x18);
    }
    if (rbx != 0x0) {
            *(int8_t *)rbx = *(int8_t *)(rcx + 0x18);
    }
    goto loc_98f8f1;

loc_98f235:
    rbx = [rbx retain];
    [var_-296 bounds];
    stack[2048] = var_-296;
    [var_-328 convertRect:var_-432 fromView:rbx, r8];
    var_-240 = var_-304;
    var_-248 = var_-312;
    var_-256 = var_-320;
    var_-264 = var_-328;
    r13 = 0x0;
    var_-504 = 0x0;
    if (rbx == 0x0) goto loc_98f6da;

loc_98f2fa:
    rax = [var_-432 indexPathForCell:rbx];
    var_-528 = rbx;
    rax = [rax retain];
    var_-520 = rax;
    if (rax == 0x0) goto loc_98f6bc;

loc_98f330:
    r14 = [[var_-432 _collectionViewData] retain];
    rbx = [r14 globalIndexForItemAtIndexPath:var_-520];
    [r14 release];
    var_-536 = rbx;
    if (rbx <= 0x0) goto loc_98f500;

loc_98f37e:
    r15 = var_-536 + 0xffffffffffffffff;
    r12 = 0x2;
    goto loc_98f3b2;

loc_98f3b2:
    rbx = [[var_-432 _collectionViewData] retain];
    r14 = [[rbx layoutAttributesForGlobalItemIndex:r15] retain];
    [rbx release];
    if (r14 != 0x0) {
            [var_-368 frame];
    }
    else {
            var_-352 = intrinsic_movaps(var_-352, 0x0);
            var_-368 = intrinsic_movaps(var_-368, 0x0);
    }
    stack[2048] = var_-264;
    (*(var_-456 + 0x10))(var_-456);
    if (*(int8_t *)(var_-64 + 0x18) == 0x0) goto loc_98f4ac;

loc_98f499:
    if ((((COND_BYTE_SET(NE)) | var_-457) & 0xff) == 0x1) goto loc_98f4c2;

loc_98f4f7:
    [r14 release];
    goto loc_98f500;

loc_98f500:
    r15 = var_-512;
    r12 = var_-536;
    if ((r12 >= r15 + 0xffffffffffffffff) || (r12 + 0x1 >= r15)) goto loc_98f6bc;

loc_98f529:
    r14 = 0x2;
    goto loc_98f559;

loc_98f559:
    rbx = [[var_-432 _collectionViewData] retain];
    rdx = r12 + r14 + 0xffffffffffffffff;
    r12 = r12;
    r13 = [[rbx layoutAttributesForGlobalItemIndex:rdx] retain];
    [rbx release];
    if (r13 != 0x0) {
            [var_-400 frame];
    }
    else {
            var_-384 = intrinsic_movaps(var_-384, 0x0);
            var_-400 = intrinsic_movaps(var_-400, 0x0);
    }
    stack[2048] = var_-264;
    (*(var_-456 + 0x10))(var_-456);
    if (*(int8_t *)(var_-96 + 0x18) == 0x0) goto loc_98f662;

loc_98f64f:
    if ((((COND_BYTE_SET(NE)) | var_-457) & 0xff) == 0x1) goto loc_98f67b;

loc_98f6b3:
    [r13 release];
    goto loc_98f6bc;

loc_98f6bc:
    [var_-520 release];
    r13 = var_-528;
    var_-504 = var_-528;
    goto loc_98f6da;

loc_98f67b:
    if ((var_-489 != 0x0) || (*(int8_t *)(var_-160 + 0x18) != 0x0)) goto loc_98f691;
    goto loc_98f6b3;

loc_98f691:
    [r13 release];
    if (r12 + r14 >= r15) goto loc_98f6bc;

loc_98f6a3:
    COND = r14 < 0x15;
    r14 = r14 + 0x1;
    if (COND) goto loc_98f559;
    goto loc_98f6bc;

loc_98f662:
    rax = COND_BYTE_SET(NE);
    if (*(int8_t *)(var_-160 + 0x18) == 0x0) goto loc_98f6b3;

loc_98f673:
    rax = rax | var_-457;
    if (rax == 0x0) goto loc_98f6b3;
    goto loc_98f67b;

loc_98f4c2:
    if ((var_-489 != 0x0) || (*(int8_t *)(var_-128 + 0x18) != 0x0)) goto loc_98f4d5;
    goto loc_98f4f7;

loc_98f4d5:
    [r14 release];
    if (r15 <= 0x0) goto loc_98f500;

loc_98f4e3:
    r15 = r15 - 0x1;
    COND = r12 < 0x15;
    r12 = r12 + 0x1;
    if (COND) goto loc_98f3b2;
    goto loc_98f500;

loc_98f4ac:
    rax = COND_BYTE_SET(NE);
    if (*(int8_t *)(var_-128 + 0x18) == 0x0) goto loc_98f4f7;

loc_98f4ba:
    rax = rax | var_-457;
    if (rax == 0x0) goto loc_98f4f7;
}

function ___61-[UICollectionView _focusedView:isMinX:isMaxX:isMinY:isMaxY:]_block_invoke {
    rbx = rdi;
    _UIRectGetCenter();
    var_-24 = intrinsic_movsd(var_-24, xmm0);
    var_-16 = intrinsic_movsd(var_-16, xmm1);
    stack[2048] = arg_4;
    rax = _UIRectGetCenter();
    xmm2 = intrinsic_movsd(xmm2, var_-24);
    xmm2 = intrinsic_ucomisd(xmm2, xmm0);
    if (xmm2 > 0x0) {
            rax = *(*(rbx + 0x20) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm0 = intrinsic_ucomisd(xmm0, xmm2);
    if (xmm0 > 0x0) {
            rax = *(*(rbx + 0x28) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm0 = intrinsic_movsd(xmm0, var_-16);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 > 0x0) {
            rax = *(*(rbx + 0x30) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 > 0x0) {
            rax = *(*(rbx + 0x38) + 0x8);
            *(int8_t *)(rax + 0x18) = 0x0;
    }
    return rax;
}

bool -[UICollectionView _beginReorderingItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rax = [self beginInteractiveMovementForItemAtIndexPath:arg2];
    return rax;
}

void -[UICollectionView _updateReorderingTargetPosition:](void * self, void * _cmd, struct CGPoint arg2) {
    [self updateInteractiveMovementTargetPosition:arg2];
    return;
}

void -[UICollectionView _pinReorderedItemsWithPinningTest:](void * self, void * _cmd, void * arg2) {
    rbx = _cmd;
    r13 = self;
    r14 = [arg2 retain];
    if (r14 == 0x0) {
            var_C8 = rbx;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r12 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_C8 object:r13 file:r12 lineNumber:0x1e63 description:@"Invalid parameter not satisfying: %@"];
            [r12 release];
            [rbx release];
    }
    [var_50 bounds];
    [var_70 contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_68);
    xmm1 = intrinsic_movapd(xmm1, var_40);
    xmm2 = intrinsic_movsd(xmm2, var_70);
    xmm3 = intrinsic_movsd(xmm3, var_58);
    xmm3 = intrinsic_unpcklpd(xmm3, xmm2);
    xmm3 = intrinsic_addpd(xmm3, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm2);
    xmm0 = intrinsic_addpd(xmm0, var_50);
    xmm1 = intrinsic_subpd(xmm1, xmm3);
    var_A0 = r14;
    intrinsic_movupd(var_90, xmm0);
    intrinsic_movupd(var_80, xmm1);
    r14 = [r14 retain];
    [r13 retain];
    [r13->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    [r13 release];
    [var_A0 release];
    [r14 release];
    return;
}

void ___54-[UICollectionView _pinReorderedItemsWithPinningTest:]_block_invoke(int arg0, int arg1) {
    r14 = arg0;
    r13 = [arg1 retain];
    if ([r13 pinned] == 0x0) {
            r15 = *(r14 + 0x20);
            r12 = [[r13 cell] retain];
            if (r12 != 0x0) {
                    [var_50 frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            rbx = (*(r15 + 0x10))(r15);
            [r12 release];
            if (rbx != 0x0) {
                    [r13 setPinned:0x1];
                    [*(r14 + 0x28) contentOffset];
                    [r13 setPinnedPreviousContentOffset:0x1];
                    [r13 setPinningTest:*(r14 + 0x20)];
            }
    }
    [r13 release];
    return;
}

void -[UICollectionView _unpinReorderedItemsIfNeeded](void * self, void * _cmd) {
    [var_30 bounds];
    [var_50 contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_48);
    xmm1 = intrinsic_movapd(xmm1, var_20);
    xmm2 = intrinsic_movsd(xmm2, var_50);
    xmm3 = intrinsic_movsd(xmm3, var_38);
    xmm3 = intrinsic_unpcklpd(xmm3, xmm2);
    xmm3 = intrinsic_addpd(xmm3, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm2);
    xmm0 = intrinsic_addpd(xmm0, var_30);
    xmm1 = intrinsic_subpd(xmm1, xmm3);
    intrinsic_movupd(var_70, xmm0);
    intrinsic_movupd(var_60, xmm1);
    [self->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    return;
}

void ___48-[UICollectionView _unpinReorderedItemsIfNeeded]_block_invoke(int arg0, int arg1, int arg2) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx pinned] != 0x0) {
            r15 = [[rbx pinningTest] retain];
            r12 = [[rbx cell] retain];
            if (r12 != 0x0) {
                    [var_50 frame];
            }
            else {
                    var_40 = intrinsic_movaps(var_40, 0x0);
                    var_50 = intrinsic_movaps(var_50, 0x0);
            }
            r14 = (*(r15 + 0x10))(r15);
            [r12 release];
            [r15 release];
            if (r14 == 0x0) {
                    [rbx setPinned:0x0];
                    [rbx setPinningTest:0x0];
            }
    }
    [rbx release];
    return;
}

void -[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:](void * self, void * _cmd, struct CGPoint arg2) {
    var_50 = intrinsic_movsd(var_50, xmm1, arg2);
    var_58 = intrinsic_movsd(var_58, xmm0);
    rbx = self;
    if ([rbx->_reorderedItems count] != 0x0) {
            var_28 = [rbx retain];
            xmm0 = intrinsic_movsd(xmm0, var_58);
            intrinsic_movsd(var_20, xmm0);
            intrinsic_movsd(var_18, intrinsic_movsd(xmm0, var_50));
            [UIView performWithoutAnimation:__NSConcreteStackBlock];
            [var_28 release];
    }
    return;
}

int ___72-[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:]_block_invoke(int arg0) {
    rax = [*(arg0 + 0x20)->_reorderedItems enumerateObjectsUsingBlock:__NSConcreteStackBlock];
    return rax;
}

void ___72-[UICollectionView _offsetPinnedReorderedItemsWithCurrentContentOffset:]_block_invoke_2(int arg0, int arg1) {
    r14 = arg0;
    rbx = [arg1 retain];
    if ([rbx pinned] != 0x0) {
            xmm0 = intrinsic_movsd(xmm0, *(r14 + 0x20));
            var_30 = intrinsic_movsd(var_30, xmm0);
            [rbx pinnedPreviousContentOffset];
            xmm1 = intrinsic_movsd(xmm1, var_30);
            xmm1 = intrinsic_subsd(xmm1, xmm0);
            var_30 = intrinsic_movsd(var_30, xmm1);
            xmm0 = intrinsic_movsd(xmm0, *(r14 + 0x28));
            var_38 = intrinsic_movsd(var_38, xmm0);
            [rbx pinnedPreviousContentOffset];
            xmm0 = intrinsic_movsd(xmm0, var_38);
            xmm0 = intrinsic_subsd(xmm0, xmm1);
            var_38 = intrinsic_movsd(var_38, xmm0);
            r12 = [[rbx cell] retain];
            [r12 center];
            var_48 = intrinsic_movsd(var_48, xmm0);
            var_40 = intrinsic_movsd(var_40, xmm1);
            [r12 release];
            r15 = [[rbx cell] retain];
            xmm0 = intrinsic_movsd(xmm0, var_48);
            xmm0 = intrinsic_addsd(xmm0, var_30);
            xmm1 = intrinsic_movsd(xmm1, var_40);
            xmm1 = intrinsic_addsd(xmm1, var_38);
            [r15 setCenter:rdx];
            [r15 release];
            intrinsic_movsd(xmm0, *(r14 + 0x20));
            intrinsic_movsd(xmm1, *(r14 + 0x28));
            [rbx setPinnedPreviousContentOffset:rdx];
    }
    rdi = rbx;
    [rdi release];
    return;
}

void -[UICollectionView _updateReorderingTargetPosition:forced:](void * self, void * _cmd, struct CGPoint arg2, bool arg3) {
    r14 = arg2;
    var_208 = intrinsic_movsd(var_208, xmm1, arg2, arg3);
    var_200 = intrinsic_movsd(var_200, xmm0);
    rbx = self;
    var_30 = *___stack_chk_guard;
    r12 = [rbx->_reorderedItems count];
    if (r12 <= 0x0) goto loc_990d81;

loc_9903e0:
    xmm0 = intrinsic_movsd(xmm0, rbx->_reorderingTargetPosition);
    xmm0 = intrinsic_ucomisd(xmm0, var_200);
    if ((xmm0 == 0x0) && (!CPU_FLAGS & P)) {
            xmm0 = intrinsic_movsd(xmm0, *(rbx + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
            xmm0 = intrinsic_ucomisd(xmm0, var_208);
            if (((xmm0 != 0x0) || (CPU_FLAGS & P)) || (r14 != 0x0)) {
                    r14 = rbx;
                    var_1A8 = r14;
                    [r14->_dataSourceToLayoutIndexPathMappingDict removeAllObjects];
                    [r14 _unpinReorderedItemsIfNeeded];
                    xmm0 = intrinsic_movsd(xmm0, r14->_reorderingTargetPosition);
                    var_250 = intrinsic_movsd(var_250, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
                    var_258 = intrinsic_movsd(var_258, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_200);
                    r14->_reorderingTargetPosition = intrinsic_movsd(r14->_reorderingTargetPosition, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_208);
                    *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8) = intrinsic_movsd(*(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8), xmm0);
                    var_210 = [[NSMutableDictionary alloc] initWithCapacity:r12];
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    intrinsic_movapd(var_C0, xmm0);
                    intrinsic_movapd(var_D0, xmm0);
                    var_E0 = intrinsic_movapd(var_E0, xmm0);
                    var_F0 = intrinsic_movapd(var_F0, xmm0);
                    rax = [r14->_reorderedItems retain];
                    var_1B0 = rax;
                    r8 = 0x10;
                    r13 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                    if (r13 != 0x0) {
                            rbx = *var_E0;
                            var_218 = rbx;
                            var_198 = 0x0;
                            do {
                                    var_1B8 = r13;
                                    r14 = @selector(pinned);
                                    var_1C0 = r14;
                                    var_230 = *_OBJC_IVAR_$_UIScrollView._delegate + var_1A8;
                                    r12 = 0x0;
                                    do {
                                            if (*var_E0 != rbx) {
                                                    objc_enumerationMutation(var_1B0);
                                            }
                                            r15 = *(var_E8 + r12 * 0x8);
                                            if (_objc_msgSend(r15, r14) == 0x0) {
                                                    var_1A0 = r15;
                                                    r15 = [[r15 targetIndexPath] retain];
                                                    rbx = var_1A8;
                                                    rcx = *_OBJC_IVAR_$_UICollectionView._layout;
                                                    xmm0 = intrinsic_movsd(xmm0, var_200);
                                                    xmm1 = intrinsic_movsd(xmm1, var_208);
                                                    r13 = [[*(rbx + rcx) _reorderingTargetItemIndexPathForPosition:r15 withPreviousIndexPath:rcx] retain];
                                                    rax = rbx->_collectionViewFlags;
                                                    if ((rax & 0x20000) == 0x0) {
                                                            if ((rax & 0x10000) != 0x0) {
                                                                    rbx = objc_loadWeakRetained(var_230);
                                                                    rcx = r15;
                                                                    r8 = r13;
                                                                    var_220 = [[rbx _collectionView:var_1A8 targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                                    [r13 release];
                                                                    rdi = rbx;
                                                                    [rdi release];
                                                                    r13 = var_220;
                                                            }
                                                    }
                                                    else {
                                                            rax = objc_loadWeakRetained(var_230);
                                                            var_220 = rax;
                                                            rdx = rbx;
                                                            rcx = r15;
                                                            r8 = r13;
                                                            var_228 = [[rax collectionView:rdx targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                            [r13 release];
                                                            [var_220 release];
                                                            r13 = var_228;
                                                    }
                                                    var_198 = var_198 & 0x1 | [r13 isEqual:r15, rcx, r8] ^ 0x1;
                                                    [var_210 setObject:r13 forKeyedSubscript:r15, r8];
                                                    [var_1A0 setTargetIndexPath:r13, r15, r8];
                                                    [r13 release];
                                                    [r15 release];
                                                    rbx = var_218;
                                                    r13 = var_1B8;
                                                    r14 = var_1C0;
                                            }
                                            r12 = r12 + 0x1;
                                    } while (r12 < r13);
                                    r8 = 0x10;
                                    r13 = [var_1B0 countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                            } while (r13 != 0x0);
                    }
                    else {
                            var_198 = 0x0;
                    }
                    [var_1B0 release];
                    r13 = var_1A8;
                    r15 = [[var_210 allValues] retain];
                    rbx = [[var_210 allKeys] retain];
                    xmm0 = intrinsic_movsd(xmm0, var_200);
                    xmm1 = intrinsic_movsd(xmm1, var_208);
                    intrinsic_movsd(xmm2, var_250);
                    intrinsic_movsd(xmm3, var_258);
                    r14 = [[r13->_layout _invalidationContextForReorderingTargetPosition:r15 targetIndexPaths:rbx withPreviousPosition:r8 previousIndexPaths:r9] retain];
                    var_1A0 = r14;
                    rdi = rbx;
                    [rdi release];
                    [r15 release];
                    r15 = var_198 & 0x1;
                    var_198 = [var_210 retain];
                    var_108 = var_210;
                    rbx = [r13 retain];
                    var_100 = rbx;
                    rcx = 0x0;
                    r8 = r14;
                    [rbx _performBatchUpdates:__NSConcreteStackBlock completion:rcx invalidationContext:r8 tentativelyForReordering:0x1];
                    COND = r15 == 0x0;
                    r15 = rbx;
                    if (!COND) {
                            var_130 = [r15 retain];
                            xmm0 = intrinsic_movsd(xmm0, *0xc4f870);
                            [r15->_reorderFeedbackBehavior performFeedbackWithDelay:__NSConcreteStackBlock insideBlock:rcx];
                            [var_130 release];
                    }
                    rdx = @selector(bounds);
                    objc_msgSend_stret(var_170, r15, rdx);
                    r13 = [[r13->_reorderedItems firstObject] retain];
                    rsi = @selector(cell);
                    rbx = [_objc_msgSend(r13, rsi, rdx, 0x0, r8) retain];
                    if (rbx != 0x0) {
                            rdx = @selector(frame);
                            rsi = rbx;
                            objc_msgSend_stret(var_190, rsi, rdx);
                    }
                    else {
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            var_180 = intrinsic_movapd(var_180, xmm0);
                            var_190 = intrinsic_movapd(var_190, xmm0);
                    }
                    [rbx release];
                    rdi = r13;
                    [rdi release];
                    CGRectGetMinY(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    CGRectGetMinY(rdi);
                    rbx = 0x1;
                    xmm1 = intrinsic_movsd(xmm1, var_1A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 <= 0x0) {
                            CGRectGetMaxY(rdi);
                            xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                            CGRectGetMaxY(rdi);
                            xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                            rbx = xmm0 > 0x0 ? 0x1 : 0x0;
                    }
                    CGRectGetMinX(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    rcx = var_188;
                    CGRectGetMinX(rdi);
                    xmm1 = intrinsic_movsd(xmm1, var_1A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 <= 0x0) {
                            CGRectGetMaxX(rdi);
                            xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                            rcx = var_188;
                            CGRectGetMaxX(rdi);
                            xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                            if (((rbx | (xmm0 > 0x0 ? 0x1 : 0x0)) & 0xff) == 0x1) {
                                    if (r15->_autoscrollTimer == 0x0) {
                                            if ([r15 isPagingEnabled] == 0x0) {
                                                    intrinsic_movsd(xmm0, *0xc50128);
                                            }
                                            else {
                                                    intrinsic_movsd(xmm0, *0xc4f410);
                                            }
                                            rcx = @selector(_autoscrollForReordering:);
                                            rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                            r8 = 0x0;
                                            rdx = r15;
                                            r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                            [r15->_autoscrollTimer release];
                                    }
                            }
                            else {
                                    if (r15->_autoscrollTimer != 0x0) {
                                            rsi = @selector(_stopAutoscrollTimer);
                                            _objc_msgSend(r15, rsi);
                                    }
                            }
                    }
                    else {
                            if (r15->_autoscrollTimer == 0x0) {
                                    if ([r15 isPagingEnabled] == 0x0) {
                                            intrinsic_movsd(xmm0, *0xc50128);
                                    }
                                    else {
                                            intrinsic_movsd(xmm0, *0xc4f410);
                                    }
                                    rcx = @selector(_autoscrollForReordering:);
                                    rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                    r8 = 0x0;
                                    rdx = r15;
                                    r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                    [r15->_autoscrollTimer release];
                            }
                    }
                    [var_100 release];
                    [var_108 release];
                    [var_1A0 release];
                    [var_198 release];
            }
    }
    else {
            r14 = rbx;
            var_1A8 = r14;
            [r14->_dataSourceToLayoutIndexPathMappingDict removeAllObjects];
            [r14 _unpinReorderedItemsIfNeeded];
            xmm0 = intrinsic_movsd(xmm0, r14->_reorderingTargetPosition);
            var_250 = intrinsic_movsd(var_250, xmm0);
            xmm0 = intrinsic_movsd(xmm0, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
            var_258 = intrinsic_movsd(var_258, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_200);
            r14->_reorderingTargetPosition = intrinsic_movsd(r14->_reorderingTargetPosition, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_208);
            *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8) = intrinsic_movsd(*(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8), xmm0);
            var_210 = [[NSMutableDictionary alloc] initWithCapacity:r12];
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            intrinsic_movapd(var_C0, xmm0);
            intrinsic_movapd(var_D0, xmm0);
            var_E0 = intrinsic_movapd(var_E0, xmm0);
            var_F0 = intrinsic_movapd(var_F0, xmm0);
            rax = [r14->_reorderedItems retain];
            var_1B0 = rax;
            r8 = 0x10;
            r13 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
            if (r13 != 0x0) {
                    rbx = *var_E0;
                    var_218 = rbx;
                    var_198 = 0x0;
                    do {
                            var_1B8 = r13;
                            r14 = @selector(pinned);
                            var_1C0 = r14;
                            var_230 = *_OBJC_IVAR_$_UIScrollView._delegate + var_1A8;
                            r12 = 0x0;
                            do {
                                    if (*var_E0 != rbx) {
                                            objc_enumerationMutation(var_1B0);
                                    }
                                    r15 = *(var_E8 + r12 * 0x8);
                                    if (_objc_msgSend(r15, r14) == 0x0) {
                                            var_1A0 = r15;
                                            r15 = [[r15 targetIndexPath] retain];
                                            rbx = var_1A8;
                                            rcx = *_OBJC_IVAR_$_UICollectionView._layout;
                                            xmm0 = intrinsic_movsd(xmm0, var_200);
                                            xmm1 = intrinsic_movsd(xmm1, var_208);
                                            r13 = [[*(rbx + rcx) _reorderingTargetItemIndexPathForPosition:r15 withPreviousIndexPath:rcx] retain];
                                            rax = rbx->_collectionViewFlags;
                                            if ((rax & 0x20000) == 0x0) {
                                                    if ((rax & 0x10000) != 0x0) {
                                                            rbx = objc_loadWeakRetained(var_230);
                                                            rcx = r15;
                                                            r8 = r13;
                                                            var_220 = [[rbx _collectionView:var_1A8 targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                            [r13 release];
                                                            rdi = rbx;
                                                            [rdi release];
                                                            r13 = var_220;
                                                    }
                                            }
                                            else {
                                                    rax = objc_loadWeakRetained(var_230);
                                                    var_220 = rax;
                                                    rdx = rbx;
                                                    rcx = r15;
                                                    r8 = r13;
                                                    var_228 = [[rax collectionView:rdx targetIndexPathForMoveFromItemAtIndexPath:rcx toProposedIndexPath:r8] retain];
                                                    [r13 release];
                                                    [var_220 release];
                                                    r13 = var_228;
                                            }
                                            var_198 = var_198 & 0x1 | [r13 isEqual:r15, rcx, r8] ^ 0x1;
                                            [var_210 setObject:r13 forKeyedSubscript:r15, r8];
                                            [var_1A0 setTargetIndexPath:r13, r15, r8];
                                            [r13 release];
                                            [r15 release];
                                            rbx = var_218;
                                            r13 = var_1B8;
                                            r14 = var_1C0;
                                    }
                                    r12 = r12 + 0x1;
                            } while (r12 < r13);
                            r8 = 0x10;
                            r13 = [var_1B0 countByEnumeratingWithState:var_F0 objects:var_B0 count:r8];
                    } while (r13 != 0x0);
            }
            else {
                    var_198 = 0x0;
            }
            [var_1B0 release];
            r13 = var_1A8;
            r15 = [[var_210 allValues] retain];
            rbx = [[var_210 allKeys] retain];
            xmm0 = intrinsic_movsd(xmm0, var_200);
            xmm1 = intrinsic_movsd(xmm1, var_208);
            intrinsic_movsd(xmm2, var_250);
            intrinsic_movsd(xmm3, var_258);
            r14 = [[r13->_layout _invalidationContextForReorderingTargetPosition:r15 targetIndexPaths:rbx withPreviousPosition:r8 previousIndexPaths:r9] retain];
            var_1A0 = r14;
            rdi = rbx;
            [rdi release];
            [r15 release];
            r15 = var_198 & 0x1;
            var_198 = [var_210 retain];
            var_108 = var_210;
            rbx = [r13 retain];
            var_100 = rbx;
            rcx = 0x0;
            r8 = r14;
            [rbx _performBatchUpdates:__NSConcreteStackBlock completion:rcx invalidationContext:r8 tentativelyForReordering:0x1];
            COND = r15 == 0x0;
            r15 = rbx;
            if (!COND) {
                    var_130 = [r15 retain];
                    xmm0 = intrinsic_movsd(xmm0, *0xc4f870);
                    [r15->_reorderFeedbackBehavior performFeedbackWithDelay:__NSConcreteStackBlock insideBlock:rcx];
                    [var_130 release];
            }
            rdx = @selector(bounds);
            objc_msgSend_stret(var_170, r15, rdx);
            r13 = [[r13->_reorderedItems firstObject] retain];
            rsi = @selector(cell);
            rbx = [_objc_msgSend(r13, rsi, rdx, 0x0, r8) retain];
            if (rbx != 0x0) {
                    rdx = @selector(frame);
                    rsi = rbx;
                    objc_msgSend_stret(var_190, rsi, rdx);
            }
            else {
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    var_180 = intrinsic_movapd(var_180, xmm0);
                    var_190 = intrinsic_movapd(var_190, xmm0);
            }
            [rbx release];
            rdi = r13;
            [rdi release];
            CGRectGetMinY(rdi);
            xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
            CGRectGetMinY(rdi);
            rbx = 0x1;
            xmm1 = intrinsic_movsd(xmm1, var_1A8);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 <= 0x0) {
                    CGRectGetMaxY(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    CGRectGetMaxY(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                    rbx = xmm0 > 0x0 ? 0x1 : 0x0;
            }
            CGRectGetMinX(rdi);
            xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
            rcx = var_188;
            CGRectGetMinX(rdi);
            xmm1 = intrinsic_movsd(xmm1, var_1A8);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 <= 0x0) {
                    CGRectGetMaxX(rdi);
                    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    rcx = var_188;
                    CGRectGetMaxX(rdi);
                    xmm0 = intrinsic_ucomisd(xmm0, var_1A8);
                    if (((rbx | (xmm0 > 0x0 ? 0x1 : 0x0)) & 0xff) == 0x1) {
                            if (r15->_autoscrollTimer == 0x0) {
                                    if ([r15 isPagingEnabled] == 0x0) {
                                            intrinsic_movsd(xmm0, *0xc50128);
                                    }
                                    else {
                                            intrinsic_movsd(xmm0, *0xc4f410);
                                    }
                                    rcx = @selector(_autoscrollForReordering:);
                                    rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                                    r8 = 0x0;
                                    rdx = r15;
                                    r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                                    [r15->_autoscrollTimer release];
                            }
                    }
                    else {
                            if (r15->_autoscrollTimer != 0x0) {
                                    rsi = @selector(_stopAutoscrollTimer);
                                    _objc_msgSend(r15, rsi);
                            }
                    }
            }
            else {
                    if (r15->_autoscrollTimer == 0x0) {
                            if ([r15 isPagingEnabled] == 0x0) {
                                    intrinsic_movsd(xmm0, *0xc50128);
                            }
                            else {
                                    intrinsic_movsd(xmm0, *0xc4f410);
                            }
                            rcx = @selector(_autoscrollForReordering:);
                            rsi = @selector(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:);
                            r8 = 0x0;
                            rdx = r15;
                            r15->_autoscrollTimer = [_objc_msgSend(@class(NSTimer), rsi) retain];
                            [r15->_autoscrollTimer release];
                    }
            }
            [var_100 release];
            [var_108 release];
            [var_1A0 release];
            [var_198 release];
    }
    goto loc_990d81;

loc_990d81:
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;
}

void ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke(int arg0) {
    rdi = arg0;
    if (*(int8_t *)(rdi + 0x30) != 0x0) {
            *((rsp - 0x8) + 0xffffffffffffffd0) = __NSConcreteStackBlock;
            *(int32_t *)((rsp - 0x8) + 0xffffffffffffffd8) = 0xc2000000;
            *(int32_t *)((rsp - 0x8) + 0xffffffffffffffdc) = 0x0;
            *((rsp - 0x8) + 0xffffffffffffffe0) = ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke_2;
            *((rsp - 0x8) + 0xffffffffffffffe8) = ___block_descriptor_tmp.2285;
            *((rsp - 0x8) + 0xfffffffffffffff0) = [*(rdi + 0x28) retain];
            [*(rdi + 0x20) enumerateKeysAndObjectsUsingBlock:(rsp - 0x8) + 0xffffffffffffffd0];
            [*((rsp - 0x8) + 0xfffffffffffffff0) release];
    }
    return;
}

int ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke_2(int arg0, int arg1, int arg2) {
    rax = [*(arg0 + 0x20) moveItemAtIndexPath:arg1 toIndexPath:arg2];
    return rax;
}

int ___59-[UICollectionView _updateReorderingTargetPosition:forced:]_block_invoke.2289(int arg0) {
    rax = [*(arg0 + 0x20)->_reorderFeedbackBehavior objectSnapped];
    return rax;
}

bool -[UICollectionView _canReorderItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    rbx = [arg2 retain];
    if (rbx == 0x0) goto loc_990f6e;

loc_990efe:
    rax = r14->_collectionViewFlags;
    if (BIT_TEST(rax, 0x25)) goto loc_990f67;

loc_990f10:
    r15 = 0x1;
    if (BIT_TEST(rax, 0x24)) goto loc_990fbf;

loc_990f1e:
    r12 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + r14);
    if ([r12 collectionView:r14 canMoveItemAtIndexPath:rbx] != 0x0) goto loc_990fb6;

loc_990f4a:
    [r12 release];
    if (BIT_TEST(r14->_collectionViewFlags, 0x24)) goto loc_990fbf;

loc_990f63:
    rax = r14->_collectionViewFlags;
    goto loc_990f67;

loc_990f67:
    if (BIT_TEST(rax, 0x23)) goto loc_990f73;

loc_990f6e:
    r15 = 0x0;
    goto loc_990fbf;

loc_990fbf:
    [rbx release];
    rax = r15;
    return rax;

loc_990f73:
    r15 = 0x1;
    if (BIT_TEST(rax, 0x22)) goto loc_990fbf;

loc_990f7d:
    r12 = objc_loadWeakRetained(*_OBJC_IVAR_$_UICollectionView._dataSource + r14);
    r15 = 0x1;
    if ([r12 _collectionView:r14 canMoveItemAtIndexPath:rbx] == 0x0) {
            r15 = (BIT_TEST(r14->_collectionViewFlags, 0x22)) ? 0x1 : 0x0;
    }
    goto loc_990fb6;

loc_990fb6:
    [r12 release];
    goto loc_990fbf;
}

bool -[UICollectionView beginInteractiveMovementForItemAtIndexPath:](void * self, void * _cmd, void * arg2) {
    rbx = arg2;
    r14 = _cmd;
    r13 = self;
    if ([r13->_reorderedItems count] != 0x0) {
            var_38 = r14;
            var_30 = rbx;
            rbx = [[NSString stringWithUTF8String:"/BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UICollectionView.m"] retain];
            rdi = @"<Unknown File>";
            if (rbx != 0x0) {
                    rdi = rbx;
            }
            r12 = [rdi retain];
            [rbx release];
            rbx = [[NSAssertionHandler currentHandler] retain];
            [rbx handleFailureInMethod:var_38 object:r13 file:r12 lineNumber:0x1ed7 description:@"attempt to begin reordering on collection view while reordering is already in progress"];
            [r12 release];
            rdi = rbx;
            rbx = var_30;
            [rdi release];
    }
    if ([r13 _canReorderItemAtIndexPath:rbx] != 0x0) {
            var_30 = rbx;
            [r13->_reorderFeedbackBehavior userInteractionStarted];
            [r13->_reorderFeedbackBehavior draggedObjectLifted];
            [r13 _resetPrefetchState];
            r15 = r13->_reorderedItems;
            if (r15 == 0x0) {
                    r13->_reorderedItems = [[NSMutableArray alloc] init];
                    [r13->_reorderedItems release];
                    r15 = r13->_reorderedItems;
            }
            r12 = [UICollectionViewReorderedItem alloc];
            r13 = [[r13 cellForItemAtIndexPath:var_30] retain];
            rbx = [r12 initWithCell:r13 indexPath:var_30];
            [r15 addObject:rbx];
            [rbx release];
            [r13 release];
            rax = 0x1;
    }
    else {
            rax = 0x0;
    }
    return rax;
}

void -[UICollectionView updateInteractiveMovementTargetPosition:](void * self, void * _cmd, struct CGPoint arg2) {
    [self _updateReorderingTargetPosition:0x0 forced:rcx];
    [self->_reorderFeedbackBehavior positionUpdated];
    return;
}

void -[UICollectionView _autoscrollForReordering:](void * self, void * _cmd, void * arg2) {
    rdx = arg2;
    r14 = self;
    [var_70 bounds];
    [var_90 contentInset];
    xmm0 = intrinsic_movupd(xmm0, var_88);
    xmm1 = intrinsic_movapd(xmm1, var_60);
    xmm2 = intrinsic_movsd(xmm2, var_90);
    xmm3 = intrinsic_movsd(xmm3, var_78);
    xmm3 = intrinsic_unpcklpd(xmm3, xmm2);
    xmm3 = intrinsic_addpd(xmm3, xmm0);
    xmm0 = intrinsic_unpcklpd(xmm0, xmm2);
    xmm0 = intrinsic_addpd(xmm0, var_70);
    xmm1 = intrinsic_subpd(xmm1, xmm3);
    var_50 = intrinsic_movapd(var_50, xmm0);
    var_40 = intrinsic_movapd(var_40, xmm1);
    r15 = [[r14->_reorderedItems firstObject] retain];
    rbx = [[r15 cell] retain];
    if (rbx != 0x0) {
            [var_B0 frame];
    }
    else {
            xmm0 = intrinsic_xorpd(xmm0, xmm0);
            var_A0 = intrinsic_movapd(var_A0, xmm0);
            var_B0 = intrinsic_movapd(var_B0, xmm0);
    }
    [rbx release];
    [r15 release];
    [r14 contentSize];
    var_170 = intrinsic_movsd(var_170, xmm0);
    var_158 = intrinsic_movsd(var_158, xmm1);
    r12 = objc_retainBlock(^ {/* block implemented at ___45-[UICollectionView _autoscrollForReordering:]_block_invoke */ } });
    var_138 = objc_retainBlock(^ {/* block implemented at ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_2 */ } });
    r15 = objc_retainBlock(^ {/* block implemented at ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_3 */ } });
    rbx = objc_retainBlock(^ {/* block implemented at ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_4 */ } });
    rdi = r12;
    if ((*(r12 + 0x10))(rdi) != 0x0) {
            CGRectGetMaxY(rdi);
            xmm1 = intrinsic_movsd(xmm1, var_158);
            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
            if (xmm1 > 0x0) {
                    rdi = r12;
                    var_118 = objc_retainBlock(rdi);
                    CGRectGetMaxY(rdi);
                    var_130 = intrinsic_movsd(var_130, xmm0);
                    CGRectGetMaxY(rdi);
                    xmm1 = intrinsic_movsd(xmm1, var_130);
                    xmm1 = intrinsic_subsd(xmm1, xmm0);
                    var_130 = intrinsic_movsd(var_130, xmm1);
                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                    if (xmm1 > 0x0) {
                            CGRectGetHeight(rdi);
                            xmm0 = intrinsic_mulsd(xmm0, *0xc4f4a0);
                            xmm1 = intrinsic_movsd(xmm1, var_130);
                            xmm1 = intrinsic_divsd(xmm1, xmm0);
                            xmm0 = intrinsic_movsd(xmm0, *0xc500e8);
                            xmm0 = intrinsic_mulsd(xmm0, xmm1);
                            xmm0 = intrinsic_mulsd(xmm0, xmm1);
                            xmm0 = intrinsic_addsd(xmm0, *0xc4f418);
                            floor(xmm0);
                            xmm1 = intrinsic_movapd(xmm1, xmm0);
                    }
                    else {
                            xmm1 = intrinsic_movsd(xmm1, *0xc4f418);
                    }
            }
            else {
                    rdi = var_138;
                    rax = (*(rdi + 0x10))(rdi);
                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                    var_118 = 0x0;
                    if (rax != 0x0) {
                            CGRectGetMinY(rdi);
                            xmm1 = intrinsic_xorpd(xmm1, xmm1);
                            var_118 = 0x0;
                            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                            if (xmm0 > 0x0) {
                                    rdi = var_138;
                                    var_118 = objc_retainBlock(rdi);
                                    CGRectGetMinY(rdi);
                                    var_130 = intrinsic_movsd(var_130, xmm0);
                                    CGRectGetMinY(rdi);
                                    xmm1 = intrinsic_movsd(xmm1, var_130);
                                    xmm1 = intrinsic_subsd(xmm1, xmm0);
                                    var_130 = intrinsic_movsd(var_130, xmm1);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                                    if (xmm0 > 0x0) {
                                            CGRectGetHeight(rdi);
                                            xmm0 = intrinsic_mulsd(xmm0, *0xc4f4a0);
                                            xmm1 = intrinsic_movsd(xmm1, var_130);
                                            xmm1 = intrinsic_divsd(xmm1, xmm0);
                                            xmm0 = intrinsic_movsd(xmm0, *0xc500e8);
                                            xmm0 = intrinsic_mulsd(xmm0, xmm1);
                                            xmm0 = intrinsic_mulsd(xmm0, xmm1);
                                            xmm0 = intrinsic_addsd(xmm0, *0xc4f418);
                                            floor(xmm0);
                                            xmm1 = intrinsic_movapd(xmm1, xmm0);
                                            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                                    }
                                    else {
                                            xmm1 = intrinsic_movsd(xmm1, *0xc4f690);
                                    }
                            }
                    }
            }
    }
    else {
            rdi = var_138;
            rax = (*(rdi + 0x10))(rdi);
            xmm1 = intrinsic_xorpd(xmm1, xmm1);
            var_118 = 0x0;
            if (rax != 0x0) {
                    CGRectGetMinY(rdi);
                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                    var_118 = 0x0;
                    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                    if (xmm0 > 0x0) {
                            rdi = var_138;
                            var_118 = objc_retainBlock(rdi);
                            CGRectGetMinY(rdi);
                            var_130 = intrinsic_movsd(var_130, xmm0);
                            CGRectGetMinY(rdi);
                            xmm1 = intrinsic_movsd(xmm1, var_130);
                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                            var_130 = intrinsic_movsd(var_130, xmm1);
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            xmm0 = intrinsic_ucomisd(xmm0, xmm1);
                            if (xmm0 > 0x0) {
                                    CGRectGetHeight(rdi);
                                    xmm0 = intrinsic_mulsd(xmm0, *0xc4f4a0);
                                    xmm1 = intrinsic_movsd(xmm1, var_130);
                                    xmm1 = intrinsic_divsd(xmm1, xmm0);
                                    xmm0 = intrinsic_movsd(xmm0, *0xc500e8);
                                    xmm0 = intrinsic_mulsd(xmm0, xmm1);
                                    xmm0 = intrinsic_mulsd(xmm0, xmm1);
                                    xmm0 = intrinsic_addsd(xmm0, *0xc4f418);
                                    floor(xmm0);
                                    xmm1 = intrinsic_movapd(xmm1, xmm0);
                                    xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                            }
                            else {
                                    xmm1 = intrinsic_movsd(xmm1, *0xc4f690);
                            }
                    }
            }
    }
    var_130 = intrinsic_movapd(var_130, xmm1);
    rdi = r15;
    if ((*(r15 + 0x10))(rdi) == 0x0) goto loc_9918a4;

loc_991750:
    CGRectGetMaxX(rdi);
    xmm1 = intrinsic_movsd(xmm1, var_170);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) goto loc_9918a4;

loc_99178a:
    r13 = objc_retainBlock(r15);
    rdi = var_118;
    [rdi release];
    CGRectGetMaxX(rdi);
    var_118 = intrinsic_movsd(var_118, xmm0);
    CGRectGetMaxX(rdi);
    xmm1 = intrinsic_movsd(xmm1, var_118);
    xmm1 = intrinsic_subsd(xmm1, xmm0);
    var_118 = intrinsic_movsd(var_118, xmm1);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if (xmm1 <= 0x0) goto loc_991aa2;

loc_991828:
    CGRectGetWidth(rdi);
    xmm0 = intrinsic_mulsd(xmm0, *0xc4f4a0);
    xmm1 = intrinsic_movsd(xmm1, var_118);
    xmm1 = intrinsic_divsd(xmm1, xmm0);
    xmm0 = intrinsic_movsd(xmm0, *0xc500e8);
    xmm0 = intrinsic_mulsd(xmm0, xmm1);
    xmm0 = intrinsic_mulsd(xmm0, xmm1);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f418);
    floor(xmm0);
    xmm2 = intrinsic_movapd(xmm2, xmm0);
    var_118 = r13;
    goto loc_991a60;

loc_991a60:
    xmm1 = intrinsic_movapd(xmm1, var_130);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    if ((xmm1 == 0x0) && (!CPU_FLAGS & P)) {
            xmm2 = intrinsic_ucomisd(xmm2, xmm0);
            if ((xmm2 == 0x0) && (!CPU_FLAGS & P)) {
                    var_158 = rbx;
                    r13 = r15;
                    r15 = var_138;
                    [r14 _stopAutoscrollTimer];
            }
            else {
                    var_150 = intrinsic_movapd(var_150, xmm2);
                    if ([r14 isPagingEnabled] != 0x0) {
                            var_158 = rbx;
                            [r14 contentSize];
                            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                            var_1A0 = intrinsic_movsd(var_1A0, xmm1);
                            [r14 contentOffset];
                            var_170 = intrinsic_movapd(var_170, xmm0);
                            var_180 = intrinsic_movapd(var_180, xmm1);
                            CGRectGetWidth(r14);
                            var_190 = intrinsic_movapd(var_190, xmm0);
                            CGRectGetHeight(r14);
                            xmm4 = intrinsic_xorpd(xmm4, xmm4);
                            xmm1 = intrinsic_movapd(xmm1, var_150);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                            if (xmm1 > 0x0) {
                                    xmm5 = intrinsic_movapd(xmm5, var_190);
                                    xmm1 = intrinsic_movapd(xmm1, xmm5);
                                    xmm1 = intrinsic_addsd(xmm1, xmm1);
                                    xmm3 = intrinsic_movapd(xmm3, var_170);
                                    xmm1 = intrinsic_addsd(xmm1, xmm3);
                                    xmm2 = intrinsic_movsd(xmm2, var_1A8);
                                    xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                                    COND = xmm1 <= 0x0;
                                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                                    xmm4 = intrinsic_movapd(xmm4, xmm5);
                                    xmm2 = intrinsic_movapd(xmm2, var_130);
                                    if (!COND) {
                                            xmm1 = intrinsic_subsd(xmm1, xmm5);
                                            xmm1 = intrinsic_subsd(xmm1, xmm3);
                                            xmm4 = intrinsic_movapd(xmm4, xmm1);
                                    }
                            }
                            else {
                                    xmm4 = intrinsic_ucomisd(xmm4, xmm1);
                                    xmm2 = intrinsic_movapd(xmm2, var_130);
                                    xmm3 = intrinsic_movapd(xmm3, var_170);
                                    xmm5 = intrinsic_movapd(xmm5, var_190);
                                    if (xmm4 > 0x0) {
                                            xmm4 = intrinsic_movapd(xmm4, xmm3);
                                            xmm4 = intrinsic_subsd(xmm4, xmm5);
                                            xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                            xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                                            if (xmm1 > 0x0) {
                                                    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                                    xmm4 = intrinsic_xorpd(xmm4, xmm3);
                                            }
                                            else {
                                                    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                                    xmm4 = intrinsic_xorpd(xmm4, xmm5);
                                            }
                                    }
                            }
                            xmm5 = intrinsic_xorpd(xmm5, xmm5);
                            xmm2 = intrinsic_ucomisd(xmm2, xmm5);
                            if (xmm2 > 0x0) {
                                    r13 = r15;
                                    r15 = var_138;
                                    xmm5 = intrinsic_movapd(xmm5, xmm0);
                                    xmm5 = intrinsic_addsd(xmm5, xmm5);
                                    xmm1 = intrinsic_movapd(xmm1, var_180);
                                    xmm5 = intrinsic_addsd(xmm5, xmm1);
                                    xmm2 = intrinsic_movsd(xmm2, var_1A0);
                                    xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                                    COND = xmm5 <= 0x0;
                                    xmm5 = intrinsic_movapd(xmm5, xmm0);
                                    if (!COND) {
                                            xmm5 = intrinsic_movapd(xmm5, intrinsic_subsd(intrinsic_subsd(xmm2, xmm0), xmm1));
                                    }
                            }
                            else {
                                    rax = @selector(contentInset);
                                    r13 = r15;
                                    r15 = var_138;
                                    xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                                    xmm1 = intrinsic_movapd(xmm1, var_180);
                                    if (xmm5 > 0x0) {
                                            var_130 = intrinsic_movapd(var_130, xmm4);
                                            var_170 = intrinsic_movapd(var_170, xmm3);
                                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                                            var_150 = intrinsic_movapd(var_150, xmm1);
                                            rbx = rax;
                                            var_190 = intrinsic_movapd(var_190, xmm0, rbx);
                                            objc_msgSend_stret(var_D0, r14, rbx);
                                            xmm0 = intrinsic_movsd(xmm0, var_D0);
                                            xmm0 = intrinsic_ucomisd(xmm0, var_150);
                                            if (xmm0 > 0x0) {
                                                    xmm0 = intrinsic_movapd(xmm0, *(int128_t *)0xc4f600);
                                                    xmm0 = intrinsic_xorpd(xmm0, var_180);
                                                    var_150 = intrinsic_movapd(var_150, xmm0);
                                                    objc_msgSend_stret(var_F0, r14, rbx);
                                                    xmm5 = intrinsic_movapd(xmm5, var_150);
                                                    xmm5 = intrinsic_subsd(xmm5, var_F0);
                                            }
                                            else {
                                                    xmm5 = intrinsic_movapd(xmm5, *(int128_t *)0xc4f600);
                                                    xmm5 = intrinsic_xorpd(xmm5, var_190);
                                            }
                                            xmm3 = intrinsic_movapd(xmm3, var_170);
                                            xmm1 = intrinsic_movapd(xmm1, var_180);
                                            xmm4 = intrinsic_movapd(xmm4, var_130);
                                    }
                            }
                            var_170 = intrinsic_movapd(var_170, intrinsic_addsd(xmm3, xmm4));
                            xmm1 = intrinsic_addsd(xmm1, xmm5);
                            var_180 = intrinsic_movapd(var_180, xmm1);
                            [r14 _pinReorderedItemsWithPinningTest:var_118];
                            intrinsic_movapd(xmm0, var_170, 0x1);
                            intrinsic_movapd(xmm1, var_180);
                            [r14 setContentOffset:var_118 animated:rcx];
                    }
                    else {
                            [r14 contentOffset];
                            var_190 = intrinsic_movsd(var_190, xmm0);
                            var_180 = intrinsic_movsd(var_180, xmm1);
                            rdi = var_110;
                            [rdi contentInset];
                            xmm0 = intrinsic_movapd(xmm0, var_130);
                            xmm0 = intrinsic_addsd(xmm0, var_180);
                            var_130 = intrinsic_movapd(var_130, xmm0);
                            xmm0 = intrinsic_movsd(xmm0, var_110);
                            var_1A0 = intrinsic_movapd(var_1A0, xmm0);
                            xmm1 = intrinsic_movapd(xmm1, *(int128_t *)0xc4f600);
                            xmm1 = intrinsic_xorpd(xmm1, xmm0);
                            var_180 = intrinsic_movapd(var_180, xmm1);
                            xmm0 = intrinsic_movsd(xmm0, var_158);
                            xmm0 = intrinsic_addsd(xmm0, var_100);
                            var_158 = intrinsic_movsd(var_158, xmm0);
                            CGRectGetHeight(rdi);
                            xmm2 = intrinsic_movapd(xmm2, var_180);
                            xmm1 = intrinsic_movapd(xmm1, var_130);
                            xmm2 = intrinsic_ucomisd(xmm2, xmm1);
                            if (xmm2 > 0x0) {
                                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                                    xmm0 = intrinsic_movsd(xmm0, var_170);
                                    xmm2 = intrinsic_movapd(xmm2, var_150);
                                    xmm3 = intrinsic_movsd(xmm3, var_190);
                            }
                            else {
                                    xmm4 = intrinsic_movapd(xmm4, var_1A0);
                                    xmm4 = intrinsic_addsd(xmm4, var_158);
                                    xmm4 = intrinsic_subsd(xmm4, xmm0);
                                    xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                                    xmm0 = intrinsic_movsd(xmm0, var_170);
                                    xmm2 = intrinsic_movapd(xmm2, var_150);
                                    xmm3 = intrinsic_movsd(xmm3, var_190);
                                    if (xmm1 > 0x0) {
                                            xmm1 = intrinsic_movapd(xmm1, xmm4);
                                    }
                            }
                            var_130 = intrinsic_movapd(var_130, xmm1);
                            xmm2 = intrinsic_addsd(xmm2, xmm3);
                            var_150 = intrinsic_movapd(var_150, xmm2);
                            xmm1 = intrinsic_movsd(xmm1, var_108);
                            xmm0 = intrinsic_addsd(xmm0, xmm1);
                            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                            var_180 = intrinsic_movapd(var_180, xmm1);
                            xmm0 = intrinsic_addsd(xmm0, var_F8);
                            var_170 = intrinsic_movsd(var_170, xmm0);
                            CGRectGetWidth(rdi);
                            xmm2 = intrinsic_movapd(xmm2, var_180);
                            xmm1 = intrinsic_movapd(xmm1, var_150);
                            xmm2 = intrinsic_ucomisd(xmm2, xmm1);
                            if (xmm2 > 0x0) {
                                    var_158 = rbx;
                                    r13 = r15;
                                    r15 = var_138;
                                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                            }
                            else {
                                    var_158 = rbx;
                                    r13 = r15;
                                    r15 = var_138;
                                    xmm2 = intrinsic_movsd(xmm2, var_170);
                                    xmm2 = intrinsic_subsd(xmm2, xmm0);
                                    xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                                    xmm0 = intrinsic_movapd(xmm0, xmm2);
                                    if (xmm1 > 0x0) {
                                            xmm1 = intrinsic_movapd(xmm1, xmm0);
                                    }
                            }
                            var_150 = intrinsic_movapd(var_150, xmm1);
                            [r14 contentOffset];
                            xmm3 = intrinsic_movapd(xmm3, var_150);
                            xmm2 = intrinsic_movapd(xmm2, xmm3);
                            xmm2 = intrinsic_subsd(xmm2, xmm0);
                            var_170 = intrinsic_movsd(var_170, xmm2);
                            xmm2 = intrinsic_movapd(xmm2, var_130);
                            xmm0 = intrinsic_movapd(xmm0, xmm2);
                            xmm0 = intrinsic_subsd(xmm0, xmm1);
                            var_180 = intrinsic_movsd(var_180, xmm0);
                            xmm0 = intrinsic_movapd(xmm0, xmm3);
                            xmm1 = intrinsic_movapd(xmm1, xmm2);
                            [r14 setContentOffset:rdx];
                            xmm0 = intrinsic_movsd(xmm0, var_170);
                            intrinsic_addsd(xmm0, r14->_reorderingTargetPosition);
                            xmm1 = intrinsic_movsd(xmm1, var_180);
                            intrinsic_addsd(xmm1, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
                            [r14 _updateReorderingTargetPosition:rdx];
                    }
            }
    }
    else {
            var_150 = intrinsic_movapd(var_150, xmm2);
            if ([r14 isPagingEnabled] != 0x0) {
                    var_158 = rbx;
                    [r14 contentSize];
                    var_1A8 = intrinsic_movsd(var_1A8, xmm0);
                    var_1A0 = intrinsic_movsd(var_1A0, xmm1);
                    [r14 contentOffset];
                    var_170 = intrinsic_movapd(var_170, xmm0);
                    var_180 = intrinsic_movapd(var_180, xmm1);
                    CGRectGetWidth(r14);
                    var_190 = intrinsic_movapd(var_190, xmm0);
                    CGRectGetHeight(r14);
                    xmm4 = intrinsic_xorpd(xmm4, xmm4);
                    xmm1 = intrinsic_movapd(xmm1, var_150);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                    if (xmm1 > 0x0) {
                            xmm5 = intrinsic_movapd(xmm5, var_190);
                            xmm1 = intrinsic_movapd(xmm1, xmm5);
                            xmm1 = intrinsic_addsd(xmm1, xmm1);
                            xmm3 = intrinsic_movapd(xmm3, var_170);
                            xmm1 = intrinsic_addsd(xmm1, xmm3);
                            xmm2 = intrinsic_movsd(xmm2, var_1A8);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                            COND = xmm1 <= 0x0;
                            xmm1 = intrinsic_movapd(xmm1, xmm2);
                            xmm4 = intrinsic_movapd(xmm4, xmm5);
                            xmm2 = intrinsic_movapd(xmm2, var_130);
                            if (!COND) {
                                    xmm1 = intrinsic_subsd(xmm1, xmm5);
                                    xmm1 = intrinsic_subsd(xmm1, xmm3);
                                    xmm4 = intrinsic_movapd(xmm4, xmm1);
                            }
                    }
                    else {
                            xmm4 = intrinsic_ucomisd(xmm4, xmm1);
                            xmm2 = intrinsic_movapd(xmm2, var_130);
                            xmm3 = intrinsic_movapd(xmm3, var_170);
                            xmm5 = intrinsic_movapd(xmm5, var_190);
                            if (xmm4 > 0x0) {
                                    xmm4 = intrinsic_movapd(xmm4, xmm3);
                                    xmm4 = intrinsic_subsd(xmm4, xmm5);
                                    xmm1 = intrinsic_xorpd(xmm1, xmm1);
                                    xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                                    if (xmm1 > 0x0) {
                                            xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                            xmm4 = intrinsic_xorpd(xmm4, xmm3);
                                    }
                                    else {
                                            xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                            xmm4 = intrinsic_xorpd(xmm4, xmm5);
                                    }
                            }
                    }
                    xmm5 = intrinsic_xorpd(xmm5, xmm5);
                    xmm2 = intrinsic_ucomisd(xmm2, xmm5);
                    if (xmm2 > 0x0) {
                            r13 = r15;
                            r15 = var_138;
                            xmm5 = intrinsic_movapd(xmm5, xmm0);
                            xmm5 = intrinsic_addsd(xmm5, xmm5);
                            xmm1 = intrinsic_movapd(xmm1, var_180);
                            xmm5 = intrinsic_addsd(xmm5, xmm1);
                            xmm2 = intrinsic_movsd(xmm2, var_1A0);
                            xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                            COND = xmm5 <= 0x0;
                            xmm5 = intrinsic_movapd(xmm5, xmm0);
                            if (!COND) {
                                    xmm5 = intrinsic_movapd(xmm5, intrinsic_subsd(intrinsic_subsd(xmm2, xmm0), xmm1));
                            }
                    }
                    else {
                            rax = @selector(contentInset);
                            r13 = r15;
                            r15 = var_138;
                            xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                            xmm1 = intrinsic_movapd(xmm1, var_180);
                            if (xmm5 > 0x0) {
                                    var_130 = intrinsic_movapd(var_130, xmm4);
                                    var_170 = intrinsic_movapd(var_170, xmm3);
                                    xmm1 = intrinsic_subsd(xmm1, xmm0);
                                    var_150 = intrinsic_movapd(var_150, xmm1);
                                    rbx = rax;
                                    var_190 = intrinsic_movapd(var_190, xmm0, rbx);
                                    objc_msgSend_stret(var_D0, r14, rbx);
                                    xmm0 = intrinsic_movsd(xmm0, var_D0);
                                    xmm0 = intrinsic_ucomisd(xmm0, var_150);
                                    if (xmm0 > 0x0) {
                                            xmm0 = intrinsic_movapd(xmm0, *(int128_t *)0xc4f600);
                                            xmm0 = intrinsic_xorpd(xmm0, var_180);
                                            var_150 = intrinsic_movapd(var_150, xmm0);
                                            objc_msgSend_stret(var_F0, r14, rbx);
                                            xmm5 = intrinsic_movapd(xmm5, var_150);
                                            xmm5 = intrinsic_subsd(xmm5, var_F0);
                                    }
                                    else {
                                            xmm5 = intrinsic_movapd(xmm5, *(int128_t *)0xc4f600);
                                            xmm5 = intrinsic_xorpd(xmm5, var_190);
                                    }
                                    xmm3 = intrinsic_movapd(xmm3, var_170);
                                    xmm1 = intrinsic_movapd(xmm1, var_180);
                                    xmm4 = intrinsic_movapd(xmm4, var_130);
                            }
                    }
                    var_170 = intrinsic_movapd(var_170, intrinsic_addsd(xmm3, xmm4));
                    xmm1 = intrinsic_addsd(xmm1, xmm5);
                    var_180 = intrinsic_movapd(var_180, xmm1);
                    [r14 _pinReorderedItemsWithPinningTest:var_118];
                    intrinsic_movapd(xmm0, var_170, 0x1);
                    intrinsic_movapd(xmm1, var_180);
                    [r14 setContentOffset:var_118 animated:rcx];
            }
            else {
                    [r14 contentOffset];
                    var_190 = intrinsic_movsd(var_190, xmm0);
                    var_180 = intrinsic_movsd(var_180, xmm1);
                    rdi = var_110;
                    [rdi contentInset];
                    xmm0 = intrinsic_movapd(xmm0, var_130);
                    xmm0 = intrinsic_addsd(xmm0, var_180);
                    var_130 = intrinsic_movapd(var_130, xmm0);
                    xmm0 = intrinsic_movsd(xmm0, var_110);
                    var_1A0 = intrinsic_movapd(var_1A0, xmm0);
                    xmm1 = intrinsic_movapd(xmm1, *(int128_t *)0xc4f600);
                    xmm1 = intrinsic_xorpd(xmm1, xmm0);
                    var_180 = intrinsic_movapd(var_180, xmm1);
                    xmm0 = intrinsic_movsd(xmm0, var_158);
                    xmm0 = intrinsic_addsd(xmm0, var_100);
                    var_158 = intrinsic_movsd(var_158, xmm0);
                    CGRectGetHeight(rdi);
                    xmm2 = intrinsic_movapd(xmm2, var_180);
                    xmm1 = intrinsic_movapd(xmm1, var_130);
                    xmm2 = intrinsic_ucomisd(xmm2, xmm1);
                    if (xmm2 > 0x0) {
                            xmm1 = intrinsic_movapd(xmm1, xmm2);
                            xmm0 = intrinsic_movsd(xmm0, var_170);
                            xmm2 = intrinsic_movapd(xmm2, var_150);
                            xmm3 = intrinsic_movsd(xmm3, var_190);
                    }
                    else {
                            xmm4 = intrinsic_movapd(xmm4, var_1A0);
                            xmm4 = intrinsic_addsd(xmm4, var_158);
                            xmm4 = intrinsic_subsd(xmm4, xmm0);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                            xmm0 = intrinsic_movsd(xmm0, var_170);
                            xmm2 = intrinsic_movapd(xmm2, var_150);
                            xmm3 = intrinsic_movsd(xmm3, var_190);
                            if (xmm1 > 0x0) {
                                    xmm1 = intrinsic_movapd(xmm1, xmm4);
                            }
                    }
                    var_130 = intrinsic_movapd(var_130, xmm1);
                    xmm2 = intrinsic_addsd(xmm2, xmm3);
                    var_150 = intrinsic_movapd(var_150, xmm2);
                    xmm1 = intrinsic_movsd(xmm1, var_108);
                    xmm0 = intrinsic_addsd(xmm0, xmm1);
                    xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
                    var_180 = intrinsic_movapd(var_180, xmm1);
                    xmm0 = intrinsic_addsd(xmm0, var_F8);
                    var_170 = intrinsic_movsd(var_170, xmm0);
                    CGRectGetWidth(rdi);
                    xmm2 = intrinsic_movapd(xmm2, var_180);
                    xmm1 = intrinsic_movapd(xmm1, var_150);
                    xmm2 = intrinsic_ucomisd(xmm2, xmm1);
                    if (xmm2 > 0x0) {
                            var_158 = rbx;
                            r13 = r15;
                            r15 = var_138;
                            xmm1 = intrinsic_movapd(xmm1, xmm2);
                    }
                    else {
                            var_158 = rbx;
                            r13 = r15;
                            r15 = var_138;
                            xmm2 = intrinsic_movsd(xmm2, var_170);
                            xmm2 = intrinsic_subsd(xmm2, xmm0);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                            xmm0 = intrinsic_movapd(xmm0, xmm2);
                            if (xmm1 > 0x0) {
                                    xmm1 = intrinsic_movapd(xmm1, xmm0);
                            }
                    }
                    var_150 = intrinsic_movapd(var_150, xmm1);
                    [r14 contentOffset];
                    xmm3 = intrinsic_movapd(xmm3, var_150);
                    xmm2 = intrinsic_movapd(xmm2, xmm3);
                    xmm2 = intrinsic_subsd(xmm2, xmm0);
                    var_170 = intrinsic_movsd(var_170, xmm2);
                    xmm2 = intrinsic_movapd(xmm2, var_130);
                    xmm0 = intrinsic_movapd(xmm0, xmm2);
                    xmm0 = intrinsic_subsd(xmm0, xmm1);
                    var_180 = intrinsic_movsd(var_180, xmm0);
                    xmm0 = intrinsic_movapd(xmm0, xmm3);
                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                    [r14 setContentOffset:rdx];
                    xmm0 = intrinsic_movsd(xmm0, var_170);
                    intrinsic_addsd(xmm0, r14->_reorderingTargetPosition);
                    xmm1 = intrinsic_movsd(xmm1, var_180);
                    intrinsic_addsd(xmm1, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
                    [r14 _updateReorderingTargetPosition:rdx];
            }
    }
    goto loc_992034;

loc_992034:
    [var_118 release];
    [var_158 release];
    [r13 release];
    [r15 release];
    [r12 release];
    return;

loc_991aa2:
    xmm2 = intrinsic_movsd(xmm2, *0xc4f418);
    var_118 = r13;
    goto loc_991ad0;

loc_991ad0:
    var_150 = intrinsic_movapd(var_150, xmm2);
    if ([r14 isPagingEnabled] != 0x0) {
            var_158 = rbx;
            [r14 contentSize];
            var_1A8 = intrinsic_movsd(var_1A8, xmm0);
            var_1A0 = intrinsic_movsd(var_1A0, xmm1);
            [r14 contentOffset];
            var_170 = intrinsic_movapd(var_170, xmm0);
            var_180 = intrinsic_movapd(var_180, xmm1);
            CGRectGetWidth(r14);
            var_190 = intrinsic_movapd(var_190, xmm0);
            CGRectGetHeight(r14);
            xmm4 = intrinsic_xorpd(xmm4, xmm4);
            xmm1 = intrinsic_movapd(xmm1, var_150);
            xmm1 = intrinsic_ucomisd(xmm1, xmm4);
            if (xmm1 > 0x0) {
                    xmm5 = intrinsic_movapd(xmm5, var_190);
                    xmm1 = intrinsic_movapd(xmm1, xmm5);
                    xmm1 = intrinsic_addsd(xmm1, xmm1);
                    xmm3 = intrinsic_movapd(xmm3, var_170);
                    xmm1 = intrinsic_addsd(xmm1, xmm3);
                    xmm2 = intrinsic_movsd(xmm2, var_1A8);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                    COND = xmm1 <= 0x0;
                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                    xmm4 = intrinsic_movapd(xmm4, xmm5);
                    xmm2 = intrinsic_movapd(xmm2, var_130);
                    if (!COND) {
                            xmm1 = intrinsic_subsd(xmm1, xmm5);
                            xmm1 = intrinsic_subsd(xmm1, xmm3);
                            xmm4 = intrinsic_movapd(xmm4, xmm1);
                    }
            }
            else {
                    xmm4 = intrinsic_ucomisd(xmm4, xmm1);
                    xmm2 = intrinsic_movapd(xmm2, var_130);
                    xmm3 = intrinsic_movapd(xmm3, var_170);
                    xmm5 = intrinsic_movapd(xmm5, var_190);
                    if (xmm4 > 0x0) {
                            xmm4 = intrinsic_movapd(xmm4, xmm3);
                            xmm4 = intrinsic_subsd(xmm4, xmm5);
                            xmm1 = intrinsic_xorpd(xmm1, xmm1);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                            if (xmm1 > 0x0) {
                                    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                    xmm4 = intrinsic_xorpd(xmm4, xmm3);
                            }
                            else {
                                    xmm4 = intrinsic_movapd(xmm4, *(int128_t *)0xc4f600);
                                    xmm4 = intrinsic_xorpd(xmm4, xmm5);
                            }
                    }
            }
            xmm5 = intrinsic_xorpd(xmm5, xmm5);
            xmm2 = intrinsic_ucomisd(xmm2, xmm5);
            if (xmm2 > 0x0) {
                    r13 = r15;
                    r15 = var_138;
                    xmm5 = intrinsic_movapd(xmm5, xmm0);
                    xmm5 = intrinsic_addsd(xmm5, xmm5);
                    xmm1 = intrinsic_movapd(xmm1, var_180);
                    xmm5 = intrinsic_addsd(xmm5, xmm1);
                    xmm2 = intrinsic_movsd(xmm2, var_1A0);
                    xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                    COND = xmm5 <= 0x0;
                    xmm5 = intrinsic_movapd(xmm5, xmm0);
                    if (!COND) {
                            xmm5 = intrinsic_movapd(xmm5, intrinsic_subsd(intrinsic_subsd(xmm2, xmm0), xmm1));
                    }
            }
            else {
                    rax = @selector(contentInset);
                    r13 = r15;
                    r15 = var_138;
                    xmm5 = intrinsic_ucomisd(xmm5, xmm2);
                    xmm1 = intrinsic_movapd(xmm1, var_180);
                    if (xmm5 > 0x0) {
                            var_130 = intrinsic_movapd(var_130, xmm4);
                            var_170 = intrinsic_movapd(var_170, xmm3);
                            xmm1 = intrinsic_subsd(xmm1, xmm0);
                            var_150 = intrinsic_movapd(var_150, xmm1);
                            rbx = rax;
                            var_190 = intrinsic_movapd(var_190, xmm0, rbx);
                            objc_msgSend_stret(var_D0, r14, rbx);
                            xmm0 = intrinsic_movsd(xmm0, var_D0);
                            xmm0 = intrinsic_ucomisd(xmm0, var_150);
                            if (xmm0 > 0x0) {
                                    xmm0 = intrinsic_movapd(xmm0, *(int128_t *)0xc4f600);
                                    xmm0 = intrinsic_xorpd(xmm0, var_180);
                                    var_150 = intrinsic_movapd(var_150, xmm0);
                                    objc_msgSend_stret(var_F0, r14, rbx);
                                    xmm5 = intrinsic_movapd(xmm5, var_150);
                                    xmm5 = intrinsic_subsd(xmm5, var_F0);
                            }
                            else {
                                    xmm5 = intrinsic_movapd(xmm5, *(int128_t *)0xc4f600);
                                    xmm5 = intrinsic_xorpd(xmm5, var_190);
                            }
                            xmm3 = intrinsic_movapd(xmm3, var_170);
                            xmm1 = intrinsic_movapd(xmm1, var_180);
                            xmm4 = intrinsic_movapd(xmm4, var_130);
                    }
            }
            var_170 = intrinsic_movapd(var_170, intrinsic_addsd(xmm3, xmm4));
            xmm1 = intrinsic_addsd(xmm1, xmm5);
            var_180 = intrinsic_movapd(var_180, xmm1);
            [r14 _pinReorderedItemsWithPinningTest:var_118];
            intrinsic_movapd(xmm0, var_170, 0x1);
            intrinsic_movapd(xmm1, var_180);
            [r14 setContentOffset:var_118 animated:rcx];
    }
    else {
            [r14 contentOffset];
            var_190 = intrinsic_movsd(var_190, xmm0);
            var_180 = intrinsic_movsd(var_180, xmm1);
            rdi = var_110;
            [rdi contentInset];
            xmm0 = intrinsic_movapd(xmm0, var_130);
            xmm0 = intrinsic_addsd(xmm0, var_180);
            var_130 = intrinsic_movapd(var_130, xmm0);
            xmm0 = intrinsic_movsd(xmm0, var_110);
            var_1A0 = intrinsic_movapd(var_1A0, xmm0);
            xmm1 = intrinsic_movapd(xmm1, *(int128_t *)0xc4f600);
            xmm1 = intrinsic_xorpd(xmm1, xmm0);
            var_180 = intrinsic_movapd(var_180, xmm1);
            xmm0 = intrinsic_movsd(xmm0, var_158);
            xmm0 = intrinsic_addsd(xmm0, var_100);
            var_158 = intrinsic_movsd(var_158, xmm0);
            CGRectGetHeight(rdi);
            xmm2 = intrinsic_movapd(xmm2, var_180);
            xmm1 = intrinsic_movapd(xmm1, var_130);
            xmm2 = intrinsic_ucomisd(xmm2, xmm1);
            if (xmm2 > 0x0) {
                    xmm1 = intrinsic_movapd(xmm1, xmm2);
                    xmm0 = intrinsic_movsd(xmm0, var_170);
                    xmm2 = intrinsic_movapd(xmm2, var_150);
                    xmm3 = intrinsic_movsd(xmm3, var_190);
            }
            else {
                    xmm4 = intrinsic_movapd(xmm4, var_1A0);
                    xmm4 = intrinsic_addsd(xmm4, var_158);
                    xmm4 = intrinsic_subsd(xmm4, xmm0);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm4);
                    xmm0 = intrinsic_movsd(xmm0, var_170);
                    xmm2 = intrinsic_movapd(xmm2, var_150);
                    xmm3 = intrinsic_movsd(xmm3, var_190);
                    if (xmm1 > 0x0) {
                            xmm1 = intrinsic_movapd(xmm1, xmm4);
                    }
            }
            var_130 = intrinsic_movapd(var_130, xmm1);
            xmm2 = intrinsic_addsd(xmm2, xmm3);
            var_150 = intrinsic_movapd(var_150, xmm2);
            xmm1 = intrinsic_movsd(xmm1, var_108);
            xmm0 = intrinsic_addsd(xmm0, xmm1);
            xmm1 = intrinsic_xorpd(xmm1, *(int128_t *)0xc4f600);
            var_180 = intrinsic_movapd(var_180, xmm1);
            xmm0 = intrinsic_addsd(xmm0, var_F8);
            var_170 = intrinsic_movsd(var_170, xmm0);
            CGRectGetWidth(rdi);
            xmm2 = intrinsic_movapd(xmm2, var_180);
            xmm1 = intrinsic_movapd(xmm1, var_150);
            xmm2 = intrinsic_ucomisd(xmm2, xmm1);
            if (xmm2 > 0x0) {
                    var_158 = rbx;
                    r13 = r15;
                    r15 = var_138;
                    xmm1 = intrinsic_movapd(xmm1, xmm2);
            }
            else {
                    var_158 = rbx;
                    r13 = r15;
                    r15 = var_138;
                    xmm2 = intrinsic_movsd(xmm2, var_170);
                    xmm2 = intrinsic_subsd(xmm2, xmm0);
                    xmm1 = intrinsic_ucomisd(xmm1, xmm2);
                    xmm0 = intrinsic_movapd(xmm0, xmm2);
                    if (xmm1 > 0x0) {
                            xmm1 = intrinsic_movapd(xmm1, xmm0);
                    }
            }
            var_150 = intrinsic_movapd(var_150, xmm1);
            [r14 contentOffset];
            xmm3 = intrinsic_movapd(xmm3, var_150);
            xmm2 = intrinsic_movapd(xmm2, xmm3);
            xmm2 = intrinsic_subsd(xmm2, xmm0);
            var_170 = intrinsic_movsd(var_170, xmm2);
            xmm2 = intrinsic_movapd(xmm2, var_130);
            xmm0 = intrinsic_movapd(xmm0, xmm2);
            xmm0 = intrinsic_subsd(xmm0, xmm1);
            var_180 = intrinsic_movsd(var_180, xmm0);
            xmm0 = intrinsic_movapd(xmm0, xmm3);
            xmm1 = intrinsic_movapd(xmm1, xmm2);
            [r14 setContentOffset:rdx];
            xmm0 = intrinsic_movsd(xmm0, var_170);
            intrinsic_addsd(xmm0, r14->_reorderingTargetPosition);
            xmm1 = intrinsic_movsd(xmm1, var_180);
            intrinsic_addsd(xmm1, *(r14 + *_OBJC_IVAR_$_UICollectionView._reorderingTargetPosition + 0x8));
            [r14 _updateReorderingTargetPosition:rdx];
    }
    goto loc_992034;

loc_9918a4:
    rdi = rbx;
    rax = (*(rbx + 0x10))(rdi);
    xmm2 = intrinsic_xorpd(xmm2, xmm2);
    if (rax == 0x0) goto loc_991a60;

loc_991909:
    CGRectGetMinX(rdi);
    xmm2 = intrinsic_xorpd(xmm2, xmm2);
    xmm0 = intrinsic_ucomisd(xmm0, xmm2);
    if (xmm0 <= 0x0) goto loc_991a60;

loc_99193f:
    var_150 = objc_retainBlock(rbx);
    rdi = var_118;
    [rdi release];
    CGRectGetMinX(rdi);
    var_118 = intrinsic_movsd(var_118, xmm0);
    CGRectGetMinX(rdi);
    xmm1 = intrinsic_movsd(xmm1, var_118);
    xmm1 = intrinsic_subsd(xmm1, xmm0);
    var_118 = intrinsic_movsd(var_118, xmm1);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    xmm0 = intrinsic_ucomisd(xmm0, xmm1);
    if (xmm0 <= 0x0) goto loc_991aba;

loc_9919e1:
    CGRectGetWidth(rdi);
    xmm0 = intrinsic_mulsd(xmm0, *0xc4f4a0);
    xmm1 = intrinsic_movsd(xmm1, var_118);
    xmm1 = intrinsic_divsd(xmm1, xmm0);
    xmm0 = intrinsic_movsd(xmm0, *0xc500e8);
    xmm0 = intrinsic_mulsd(xmm0, xmm1);
    xmm0 = intrinsic_mulsd(xmm0, xmm1);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f418);
    floor(xmm0);
    xmm2 = intrinsic_movapd(xmm2, xmm0);
    xmm2 = intrinsic_xorpd(xmm2, *(int128_t *)0xc4f600);
    var_118 = var_150;
    goto loc_991a60;

loc_991aba:
    xmm2 = intrinsic_movsd(xmm2, *0xc4f690);
    var_118 = var_150;
    goto loc_991ad0;
}

bool ___45-[UICollectionView _autoscrollForReordering:]_block_invoke(void * _block, struct CGRect arg1, struct CGRect arg2) {
    CGRectGetMaxY(_block);
    var_8 = intrinsic_movsd(var_8, xmm0);
    CGRectGetMaxY(_block);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
    xmm1 = intrinsic_movsd(xmm1, var_8);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    rax = xmm1 > 0x0 ? 0x1 : 0x0;
    return rax;
}

bool ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_2(void * _block, struct CGRect arg1, struct CGRect arg2) {
    CGRectGetMinY(_block);
    var_8 = intrinsic_movsd(var_8, xmm0);
    CGRectGetMinY(_block);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
    xmm0 = intrinsic_ucomisd(xmm0, var_8);
    rax = xmm0 > 0x0 ? 0x1 : 0x0;
    return rax;
}

bool ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_3(void * _block, struct CGRect arg1, struct CGRect arg2) {
    CGRectGetMaxX(_block);
    var_8 = intrinsic_movsd(var_8, xmm0);
    CGRectGetMaxX(_block);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f6a0);
    xmm1 = intrinsic_movsd(xmm1, var_8);
    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
    rax = xmm1 > 0x0 ? 0x1 : 0x0;
    return rax;
}

bool ___45-[UICollectionView _autoscrollForReordering:]_block_invoke_4(void * _block, struct CGRect arg1, struct CGRect arg2) {
    CGRectGetMinX(_block);
    var_8 = intrinsic_movsd(var_8, xmm0);
    CGRectGetMinX(_block);
    xmm0 = intrinsic_addsd(xmm0, *0xc4f408);
    xmm0 = intrinsic_ucomisd(xmm0, var_8);
    rax = xmm0 > 0x0 ? 0x1 : 0x0;
    return rax;
}

void -[UICollectionView _stopAutoscrollTimer](void * self, void * _cmd) {
    [self->_autoscrollTimer invalidate];
    self->_autoscrollTimer = 0x0;
    [self->_autoscrollTimer release];
    return;
}

void -[UICollectionView _endReordering](void * self, void * _cmd) {
    [self endInteractiveMovement];
    return;
}

void -[UICollectionView _cancelReordering](void * self, void * _cmd) {
    [self cancelInteractiveMovement];
    return;
}

void -[UICollectionView endInteractiveMovement](void * self, void * _cmd) {
    [self _completeInteractiveMovementWithDisposition:0x0];
    return;
}

void -[UICollectionView cancelInteractiveMovement](void * self, void * _cmd) {
    [self _completeInteractiveMovementWithDisposition:0x1];
    return;
}

void -[UICollectionView _completeInteractiveMovementWithDisposition:](void * self, void * _cmd, NSInteger arg2) {
    r12 = arg2;
    r15 = self;
    var_2B0 = r15;
    var_30 = *___stack_chk_guard;
    r15->_dataSourceToLayoutIndexPathMappingDict = 0x0;
    [r15->_dataSourceToLayoutIndexPathMappingDict release];
    if ([r15->_reorderedItems count] == 0x0) goto loc_992dcd;

loc_992332:
    if (r12 == 0x1) {
            [r15 _getOriginalReorderingIndexPaths:0x0 targetIndexPaths:0x0];
            var_328 = [0x0 retain];
            var_320 = [0x0 retain];
    }
    else {
            [r15 _getOriginalReorderingIndexPaths:0x0 targetIndexPaths:0x0];
            rax = [0x0 retain];
            rax = [rax retain];
            var_320 = rax;
            var_328 = rax;
    }
    rbx = [r15->_reorderedItems retain];
    r15->_reorderedItems = 0x0;
    [rbx release];
    [r15 _stopAutoscrollTimer];
    rdi = r15->_reorderFeedbackBehavior;
    var_2F8 = r12;
    if (r12 == 0x1) {
            rsi = @selector(userInteractionCancelled);
    }
    else {
            rsi = @selector(userInteractionEnded);
    }
    _objc_msgSend(rdi, rsi);
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_160, xmm0);
    intrinsic_movapd(var_170, xmm0);
    var_180 = intrinsic_movapd(var_180, xmm0);
    var_190 = intrinsic_movapd(var_190, xmm0);
    rax = [rbx retain];
    var_2E0 = rax;
    rbx = @selector(countByEnumeratingWithState:objects:count:);
    rax = _objc_msgSend(rax, rbx);
    var_2B8 = rax;
    if (rax == 0x0) goto loc_99268e;

loc_9924a3:
    var_2D8 = *var_180;
    goto loc_9924c9;

loc_9924c9:
    var_2F0 = *_OBJC_IVAR_$_UICollectionView._dataSource + r15;
    r13 = 0x0;
    goto loc_99253f;

loc_99253f:
    if (*var_180 != var_2D8) {
            objc_enumerationMutation(var_2E0);
    }
    var_2D0 = @selector(isEqual:);
    r12 = objc_unsafeClaimAutoreleasedReturnValue([*(var_188 + r13 * 0x8) originalIndexPath]);
    rbx = objc_unsafeClaimAutoreleasedReturnValue([*(var_188 + r13 * 0x8) targetIndexPath]);
    if (_objc_msgSend(r12, var_2D0, rbx) != 0x0) goto loc_992643;

loc_9925b1:
    if (BIT_TEST(r15->_collectionViewFlags, 0x25)) goto loc_9925e5;

loc_9925c0:
    if (var_2F8 == 0x1) goto loc_992643;

loc_9925ca:
    r15 = objc_loadWeakRetained(var_2F0);
    rdi = r15;
    rsi = @selector(_collectionView:moveItemAtIndexPath:toIndexPath:);
    goto loc_992620;

loc_992620:
    _objc_msgSend(rdi, rsi);
    rdi = r15;
    r15 = var_2B0;
    [rdi release];
    goto loc_992643;

loc_992643:
    r13 = r13 + 0x1;
    if (r13 < var_2B8) goto loc_99253f;

loc_992653:
    rbx = @selector(countByEnumeratingWithState:objects:count:);
    rax = _objc_msgSend(var_2E0, rbx);
    var_2B8 = rax;
    if (rax != 0x0) goto loc_9924c9;

loc_99268e:
    [var_2E0 release];
    xmm0 = intrinsic_xorpd(xmm0, xmm0);
    intrinsic_movapd(var_1A0, xmm0);
    intrinsic_movapd(var_1B0, xmm0);
    var_1C0 = intrinsic_movapd(var_1C0, xmm0);
    var_1D0 = intrinsic_movapd(var_1D0, xmm0);
    r12 = [var_2E0 retain];
    var_2F0 = r12;
    rax = _objc_msgSend(r12, rbx);
    var_2C0 = rax;
    if (rax != 0x0) {
            var_2E8 = *var_1C0;
            r13 = 0x1;
            do {
                    rax = r13;
                    r14 = 0x0;
                    do {
                            var_2B8 = rax;
                            if (*var_1C0 != var_2E8) {
                                    objc_enumerationMutation(var_2F0);
                            }
                            var_2D0 = @selector(allValues);
                            var_2D8 = @selector(cell);
                            r15 = [_objc_msgSend(r15->_visibleCellsDict, var_2D0) retain];
                            r12 = [_objc_msgSend(*(var_1C8 + r14 * 0x8), var_2D8) retain];
                            r13 = [r15 containsObject:r12];
                            [r12 release];
                            [r15 release];
                            if (r13 != 0x0) {
                                    r13 = var_2B8;
                            }
                            r14 = r14 + 0x1;
                            rax = r13;
                            r15 = var_2B0;
                    } while (r14 < var_2C0);
                    r12 = var_2F0;
                    rax = [r12 countByEnumeratingWithState:var_1D0 objects:var_130 count:0x10];
                    var_2C0 = rax;
            } while (rax != 0x0);
            [r12 release];
            r13 = r13 & 0x1;
            if (r13 == 0x0) {
                    var_2B8 = 0x0;
                    xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                    var_2C0 = intrinsic_movsd(var_2C0, xmm0);
            }
            else {
                    var_2B8 = r13;
                    if ([r12 count] == 0x1) {
                            var_2F0 = r12;
                            r13 = [[r12 firstObject] retain];
                            r12 = [[r13 targetIndexPath] retain];
                            rdx = r12;
                            rbx = [[r15->_layout layoutAttributesForItemAtIndexPath:rdx] retain];
                            [r12 release];
                            if (rbx != 0x0) {
                                    var_2C8 = rbx;
                                    var_2B0 = r15;
                                    rbx = [[r13 cell] retain];
                                    [rbx center];
                                    var_2D0 = intrinsic_movsd(var_2D0, xmm0);
                                    var_2D8 = intrinsic_movsd(var_2D8, xmm1);
                                    [rbx release];
                                    r15 = [[r13 cell] retain];
                                    if (r15 != 0x0) {
                                            [var_1F0 frame];
                                    }
                                    else {
                                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                            var_1E0 = intrinsic_movapd(var_1E0, xmm0);
                                            var_1F0 = intrinsic_movapd(var_1F0, xmm0);
                                    }
                                    [r15 release];
                                    CGRectGetWidth(r15);
                                    var_2C0 = intrinsic_movsd(var_2C0, xmm0);
                                    stack[1941] = var_1F0;
                                    CGRectGetHeight(r15);
                                    xmm1 = intrinsic_movsd(xmm1, var_2C0);
                                    xmm1 = intrinsic_minsd(xmm1, xmm0);
                                    var_2C0 = intrinsic_movsd(var_2C0, xmm1);
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                                    if (xmm1 > 0x0) {
                                            [var_2C8 center];
                                            intrinsic_movapd(xmm2, xmm0);
                                            intrinsic_movapd(xmm3, xmm1);
                                            xmm0 = intrinsic_movsd(xmm0, var_2D0);
                                            xmm1 = intrinsic_movsd(xmm1, var_2D8);
                                            _UIDistanceBetweenPoints();
                                            xmm1 = intrinsic_movsd(xmm1, var_2C0);
                                            xmm1 = intrinsic_mulsd(xmm1, *0xc4f4a0);
                                            xmm0 = intrinsic_divsd(xmm0, xmm1);
                                            xmm1 = intrinsic_movsd(xmm1, *0xc4f410);
                                            xmm1 = intrinsic_minsd(xmm1, xmm0);
                                            xmm1 = intrinsic_mulsd(xmm1, *0xc4f4c0);
                                    }
                                    else {
                                            xmm1 = intrinsic_movsd(xmm1, *0xc4f4c0);
                                    }
                                    r15 = var_2B0;
                                    var_2C0 = intrinsic_movsd(var_2C0, xmm1);
                                    rbx = var_2C8;
                            }
                            else {
                                    xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                                    var_2C0 = intrinsic_movsd(var_2C0, xmm0);
                            }
                            [rbx release];
                            [r13 release];
                            r12 = var_2F0;
                    }
                    else {
                            xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                            var_2C0 = intrinsic_movsd(var_2C0, xmm0);
                    }
            }
    }
    else {
            [r12 release];
            r13 = 0x1;
            var_2B8 = r13;
            if ([r12 count] == 0x1) {
                    var_2F0 = r12;
                    r13 = [[r12 firstObject] retain];
                    r12 = [[r13 targetIndexPath] retain];
                    rdx = r12;
                    rbx = [[r15->_layout layoutAttributesForItemAtIndexPath:rdx] retain];
                    [r12 release];
                    if (rbx != 0x0) {
                            var_2C8 = rbx;
                            var_2B0 = r15;
                            rbx = [[r13 cell] retain];
                            [rbx center];
                            var_2D0 = intrinsic_movsd(var_2D0, xmm0);
                            var_2D8 = intrinsic_movsd(var_2D8, xmm1);
                            [rbx release];
                            r15 = [[r13 cell] retain];
                            if (r15 != 0x0) {
                                    [var_1F0 frame];
                            }
                            else {
                                    xmm0 = intrinsic_xorpd(xmm0, xmm0);
                                    var_1E0 = intrinsic_movapd(var_1E0, xmm0);
                                    var_1F0 = intrinsic_movapd(var_1F0, xmm0);
                            }
                            [r15 release];
                            CGRectGetWidth(r15);
                            var_2C0 = intrinsic_movsd(var_2C0, xmm0);
                            stack[1941] = var_1F0;
                            CGRectGetHeight(r15);
                            xmm1 = intrinsic_movsd(xmm1, var_2C0);
                            xmm1 = intrinsic_minsd(xmm1, xmm0);
                            var_2C0 = intrinsic_movsd(var_2C0, xmm1);
                            xmm0 = intrinsic_xorpd(xmm0, xmm0);
                            xmm1 = intrinsic_ucomisd(xmm1, xmm0);
                            if (xmm1 > 0x0) {
                                    [var_2C8 center];
                                    intrinsic_movapd(xmm2, xmm0);
                                    intrinsic_movapd(xmm3, xmm1);
                                    xmm0 = intrinsic_movsd(xmm0, var_2D0);
                                    xmm1 = intrinsic_movsd(xmm1, var_2D8);
                                    _UIDistanceBetweenPoints();
                                    xmm1 = intrinsic_movsd(xmm1, var_2C0);
                                    xmm1 = intrinsic_mulsd(xmm1, *0xc4f4a0);
                                    xmm0 = intrinsic_divsd(xmm0, xmm1);
                                    xmm1 = intrinsic_movsd(xmm1, *0xc4f410);
                                    xmm1 = intrinsic_minsd(xmm1, xmm0);
                                    xmm1 = intrinsic_mulsd(xmm1, *0xc4f4c0);
                            }
                            else {
                                    xmm1 = intrinsic_movsd(xmm1, *0xc4f4c0);
                            }
                            r15 = var_2B0;
                            var_2C0 = intrinsic_movsd(var_2C0, xmm1);
                            rbx = var_2C8;
                    }
                    else {
                            xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                            var_2C0 = intrinsic_movsd(var_2C0, xmm0);
                    }
                    [rbx release];
                    [r13 release];
                    r12 = var_2F0;
            }
            else {
                    xmm0 = intrinsic_movsd(xmm0, *0xc4f4c0);
                    var_2C0 = intrinsic_movsd(var_2C0, xmm0);
            }
    }
    var_2B0 = r15;
    r15 = [r15 retain];
    var_218 = r15;
    rax = [var_328 retain];
    var_2C8 = rax;
    var_210 = rax;
    r13 = [var_320 retain];
    var_208 = r13;
    r12 = [r12 retain];
    var_200 = r12;
    rbx = objc_retainBlock(__NSConcreteStackBlock);
    rax = [r15 retain];
    var_2D0 = rax;
    var_260 = rax;
    rax = [var_2C8 retain];
    var_2B8 = rax;
    var_258 = rax;
    rax = [r13 retain];
    var_2C8 = rax;
    var_250 = rax;
    r14 = rbx;
    r12 = [r12 retain];
    var_248 = r12;
    r15 = objc_retainBlock(__NSConcreteStackBlock);
    intrinsic_xorpd(xmm1, xmm1);
    rdx = 0x4;
    xmm0 = intrinsic_movsd(xmm0, var_2C0);
    rcx = r14;
    [UIView animateWithDuration:rdx delay:rcx options:r15 animations:r9 completion:stack[1941]];
    if (var_2F8 != 0x1) {
            var_288 = [var_2D0 retain];
            r12 = r12;
            intrinsic_movsd(xmm0, var_2C0, __NSConcreteStackBlock);
            [var_2B0->_reorderFeedbackBehavior performFeedbackWithDelay:rdx insideBlock:rcx];
            [var_288 release];
    }
    [r15 release];
    [var_248 release];
    [var_250 release];
    [var_258 release];
    [var_260 release];
    [r14 release];
    [var_200 release];
    [var_208 release];
    [var_210 release];
    [var_218 release];
    [r12 release];
    [var_2C8 release];
    [var_2B8 release];
    goto loc_992dcd;

loc_992dcd:
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;

loc_9925e5:
    if (var_2F8 != 0x1) goto loc_992607;

loc_9925ef:
    [r15 moveItemAtIndexPath:rbx toIndexPath:r12];
    goto loc_992643;

loc_992607:
    r15 = objc_loadWeakRetained(var_2F0);
    rdi = r15;
    rsi = @selector(collectionView:moveItemAtIndexPath:toIndexPath:);
    goto loc_992620;
}

int ___64-[UICollectionView _completeInteractiveMovementWithDisposition:]_block_invoke(int arg0) {
    var_F8 = arg0;
    rax = *(int16_t *)(arg0 + 0x40);
    if (rax != 0x0) {
            rcx = *(var_F8 + 0x30);
            r8 = ((rax & 0xffff) > 0xff ? 0x1 : 0x0) & 0xff;
            r15 = [[*(var_F8 + 0x20)->_layout _invalidationContextForEndingReorderingItemToFinalIndexPaths:*(var_F8 + 0x28) previousIndexPaths:rcx reorderingCancelled:r8] retain];
            rdx = r15;
            [*(var_F8 + 0x20)->_layout invalidateLayoutWithContext:rdx];
            [r15 release];
            rdi = *(var_F8 + 0x20);
            if (*___stack_chk_guard == *___stack_chk_guard) {
                    rax = [rdi layoutIfNeeded];
            }
            else {
                    rax = __stack_chk_fail();
            }
    }
    else {
            intrinsic_movaps(var_C0, 0x0);
            intrinsic_movaps(var_D0, 0x0);
            var_E0 = intrinsic_movaps(var_E0, 0x0);
            var_F0 = intrinsic_movaps(var_F0, 0x0);
            rax = [*(var_F8 + 0x38) retain];
            var_140 = rax;
            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            var_110 = rax;
            if (rax != 0x0) {
                    var_130 = *var_E0;
                    do {
                            r12 = 0x0;
                            do {
                                    if (*var_E0 != var_130) {
                                            objc_enumerationMutation(var_140);
                                    }
                                    var_108 = *(var_E8 + r12 * 0x8);
                                    r13 = [[*(var_F8 + 0x20)->_visibleCellsDict allValues] retain];
                                    r15 = [[*(var_E8 + r12 * 0x8) cell] retain];
                                    r14 = [r13 containsObject:r15];
                                    [r15 release];
                                    [r13 release];
                                    if (r14 == 0x0) {
                                            if (*(int8_t *)(var_F8 + 0x41) != 0x0) {
                                                    r13 = var_108;
                                                    rdi = r13;
                                                    rsi = @selector(originalIndexPath);
                                            }
                                            else {
                                                    r13 = var_108;
                                                    rdi = r13;
                                                    rsi = @selector(targetIndexPath);
                                            }
                                            rax = _objc_msgSend(rdi, rsi);
                                            rax = [rax retain];
                                            var_138 = rax;
                                            r15 = [[*(var_F8 + 0x20)->_layout layoutAttributesForItemAtIndexPath:rax] retain];
                                            r13 = [[r13 cell] retain];
                                            [*(var_F8 + 0x20) _applyLayoutAttributes:r15 toView:r13];
                                            [r13 release];
                                            [r15 release];
                                            [var_138 release];
                                    }
                                    r12 = r12 + 0x1;
                            } while (r12 < var_110);
                            rax = [var_140 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_110 = rax;
                    } while (rax != 0x0);
            }
            [var_140 release];
            rax = *___stack_chk_guard;
            if (rax != *___stack_chk_guard) {
                    rax = __stack_chk_fail();
            }
    }
    return rax;
}

int ___64-[UICollectionView _completeInteractiveMovementWithDisposition:]_block_invoke.2346(int arg0) {
    rbx = arg0;
    var_128 = rbx;
    var_30 = *___stack_chk_guard;
    rax = *(int16_t *)(rbx + 0x40);
    if (rax == 0x0) {
            r15 = [[*(rbx + 0x20)->_layout _invalidationContextForEndingReorderingItemToFinalIndexPaths:*(rbx + 0x28) previousIndexPaths:*(rbx + 0x30) reorderingCancelled:((rax & 0xffff) > 0xff ? 0x1 : 0x0) & 0xff] retain];
            [*(rbx + 0x20)->_layout invalidateLayoutWithContext:r15];
            [r15 release];
            [*(rbx + 0x20) layoutIfNeeded];
            intrinsic_movaps(var_C0, 0x0);
            intrinsic_movaps(var_D0, 0x0);
            var_E0 = intrinsic_movaps(var_E0, 0x0);
            var_F0 = intrinsic_movaps(var_F0, 0x0);
            rax = [*(rbx + 0x38) retain];
            var_138 = rax;
            rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
            var_108 = rax;
            if (rax != 0x0) {
                    var_130 = *var_E0;
                    do {
                            r15 = 0x0;
                            do {
                                    if (*var_E0 != var_130) {
                                            objc_enumerationMutation(var_138);
                                    }
                                    var_100 = *(var_E8 + r15 * 0x8);
                                    rdi = *(rbx + 0x20)->_visibleCellsDict;
                                    r12 = [[rdi allValues] retain];
                                    r13 = [[*(var_E8 + r15 * 0x8) cell] retain];
                                    r14 = [r12 containsObject:r13];
                                    [r13 release];
                                    [r12 release];
                                    if (r14 == 0x0) {
                                            r14 = [[var_100 cell] retain];
                                            [r14 removeFromSuperview];
                                            [r14 release];
                                    }
                                    r15 = r15 + 0x1;
                                    rbx = var_128;
                            } while (r15 < var_108);
                            rax = [var_138 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                            var_108 = rax;
                    } while (rax != 0x0);
            }
            rax = [var_138 release];
    }
    if (*___stack_chk_guard != var_30) {
            rax = __stack_chk_fail();
    }
    return rax;
}

int ___64-[UICollectionView _completeInteractiveMovementWithDisposition:]_block_invoke.2350(int arg0) {
    rax = [*(arg0 + 0x20)->_reorderFeedbackBehavior draggedObjectLanded];
    return rax;
}

void -[UICollectionView _getOriginalReorderingIndexPaths:targetIndexPaths:](void * self, void * _cmd, void * * arg2, void * * arg3) {
    r12 = arg3;
    var_148 = arg2;
    r14 = self;
    r13 = *_OBJC_IVAR_$_UICollectionView._reorderedItems;
    r15 = [*(r14 + r13) count];
    var_118 = 0x0;
    if (arg2 != 0x0) {
            rax = [NSMutableArray alloc];
            rax = [rax initWithCapacity:r15];
            r13 = *_OBJC_IVAR_$_UICollectionView._reorderedItems;
            var_118 = rax;
    }
    rax = 0x0;
    var_140 = r12;
    if (r12 != 0x0) {
            rax = [NSMutableArray alloc];
            rax = [rax initWithCapacity:r15];
    }
    var_120 = rax;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [*(r14 + r13) retain];
    var_130 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_100 = rax;
    if (rax != 0x0) {
            var_128 = *var_E0;
            do {
                    r12 = 0x0;
                    do {
                            if (*var_E0 != var_128) {
                                    objc_enumerationMutation(var_130);
                            }
                            r13 = [[*(var_E8 + r12 * 0x8) originalIndexPath] retain];
                            [var_118 addObject:r13];
                            [r13 release];
                            rbx = [[*(var_E8 + r12 * 0x8) targetIndexPath] retain];
                            [var_120 addObject:rbx];
                            [rbx release];
                            r12 = r12 + 0x1;
                    } while (r12 < var_100);
                    rax = [var_130 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
                    var_100 = rax;
            } while (rax != 0x0);
    }
    [var_130 release];
    rbx = var_148;
    if (rbx != 0x0) {
            *rbx = objc_retainAutorelease(var_118);
    }
    rbx = var_140;
    r14 = var_120;
    if (rbx != 0x0) {
            *rbx = objc_retainAutorelease(r14);
    }
    [r14 release];
    [var_118 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;
}

void -[UICollectionView _cellDidBecomeFocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [[self indexPathForCell:arg2] retain];
    rax = rbx->_collectionViewFlags;
    if ((rax & 0x80000) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            [r15 _collectionView:rbx didFocusItemAtIndexPath:r14];
            [r15 release];
            rax = rbx->_collectionViewFlags;
    }
    if ((rax & 0x200000) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            [r15 collectionView:rbx didFocusItemAtIndexPath:r14];
            [r15 release];
    }
    rdi = r14;
    [rdi release];
    return;
}

void -[UICollectionView _cellDidBecomeUnfocused:](void * self, void * _cmd, void * arg2) {
    rbx = self;
    r14 = [[self indexPathForCell:arg2] retain];
    if ((rbx->_collectionViewFlags & 0x400000) != 0x0) {
            r15 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + rbx);
            [r15 collectionView:rbx didUnfocusItemAtIndexPath:r14];
            [r15 release];
    }
    rdi = r14;
    [rdi release];
    return;
}

bool -[UICollectionView _shouldUpdateFocusInContext:](void * self, void * _cmd, void * arg2) {
    r15 = self;
    r14 = [arg2 retain];
    r13 = [[r15 super] _shouldUpdateFocusInContext:r14];
    rax = r15->_collectionViewFlags;
    if ((rax & 0x8000000) != 0x0) goto loc_993acb;

loc_993a00:
    if ((rax & 0x2000000) != 0x0) goto loc_993b34;

loc_993a0b:
    if ((rax & 0x800000) == 0x0) goto loc_993bfc;

loc_993a16:
    rbx = [[UICollectionViewFocusUpdateContext _contextWithContext:r14 collectionView:r15] retain];
    var_40 = rbx;
    r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r15);
    var_48 = r13;
    var_50 = [[rbx nextFocusedView] retain];
    r12 = [[rbx previouslyFocusedIndexPath] retain];
    rsi = @selector(collectionView:shouldChangeFocusedItem:fromItemAtIndexPath:);
    rdx = r15;
    rcx = var_50;
    r8 = r12;
    r13 = _objc_msgSend(r13, rsi);
    [r12 release];
    [var_50 release];
    rdi = var_48;
    goto loc_993bf2;

loc_993bf2:
    [rdi release];
    rdi = var_40;
    goto loc_993bf9;

loc_993bf9:
    [rdi release];
    goto loc_993bfc;

loc_993bfc:
    [r14 release];
    rax = r13;
    return rax;

loc_993b34:
    r12 = [[UICollectionViewFocusUpdateContext _contextWithContext:r14 collectionView:r15] retain];
    var_40 = r12;
    r13 = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r15);
    var_50 = r13;
    var_48 = [[r12 previouslyFocusedIndexPath] retain];
    rbx = [[r12 nextFocusedView] retain];
    rsi = @selector(collectionView:shouldUpdateFocusFromItemAtIndexPath:toView:heading:);
    rdx = r15;
    rcx = var_48;
    r8 = rbx;
    [r12 focusHeading];
    r13 = _objc_msgSend(r13, rsi);
    [rbx release];
    [var_48 release];
    rdi = var_50;
    goto loc_993bf2;

loc_993acb:
    r12 = [[UICollectionViewFocusUpdateContext _contextWithContext:r14 collectionView:r15] retain];
    rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r15);
    rsi = @selector(collectionView:shouldUpdateFocusInContext:);
    rdx = r15;
    rcx = r12;
    r13 = _objc_msgSend(rbx, rsi);
    [rbx release];
    rdi = r12;
    goto loc_993bf9;
}

void * -[UICollectionView _managedSubviewForView:](void * self, void * _cmd, void * arg2) {
    r12 = self;
    rbx = [arg2 retain];
    r14 = 0x0;
    if (rbx == r12) goto loc_993d28;

loc_993c43:
    r14 = 0x0;
    if ([rbx isDescendantOfView:r12] == 0x0) goto loc_993d28;

loc_993c61:
    var_38 = rbx;
    r14 = [rbx retain];
    var_30 = 0x0;
    if (r14 == 0x0) goto loc_993cdc;

loc_993c7c:
    var_30 = 0x0;
    goto loc_993c89;

loc_993c89:
    r15 = [[r14 superview] retain];
    [r15 release];
    if (r15 == r12) goto loc_993cd8;

loc_993cae:
    rbx = [[r14 superview] retain];
    [r14 release];
    r14 = rbx;
    if (rbx != 0x0) goto loc_993c89;

loc_993cdc:
    rbx = var_30;
    r14 = 0x0;
    if ([rbx isKindOfClass:[UICollectionReusableView class]] != 0x0) {
            r14 = [rbx retain];
    }
    [rbx release];
    rbx = var_38;
    goto loc_993d28;

loc_993d28:
    [rbx release];
    rdi = r14;
    rax = [rdi autorelease];
    return rax;

loc_993cd8:
    var_30 = r14;
    goto loc_993cdc;
}

void -[UICollectionView _reusePreviouslyFocusedManagedSubviewIfNeeded:](void * self, void * _cmd, void * arg2) {
    r14 = self;
    var_30 = *___stack_chk_guard;
    rbx = [arg2 retain];
    if ((((rbx == 0x0) || (r14->_focusedCell == rbx)) || ([rbx _isInUpdateAnimation] != 0x0)) || ([r14 _isViewInReuseQueue:rbx] != 0x0)) goto loc_993fd5;

loc_993dc6:
    r15 = [[r14 _visibleViews] retain];
    r13 = [r15 containsObject:rbx];
    [r15 release];
    var_10C = r13 ^ 0x1;
    intrinsic_movaps(var_C0, 0x0);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rdi = r14->_prefetchCacheItems;
    var_108 = r14;
    rax = [rdi objectEnumerator];
    rax = [rax retain];
    var_100 = rax;
    r13 = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (r13 == 0x0) goto loc_993f49;

loc_993e8d:
    var_F8 = *var_E0;
    goto loc_993eac;

loc_993eac:
    r12 = 0x0;
    goto loc_993eb6;

loc_993eb6:
    if (*var_E0 != var_F8) {
            objc_enumerationMutation(var_100);
    }
    r14 = [[*(var_E8 + r12 * 0x8) view] retain];
    [r14 release];
    if (r14 == rbx) goto loc_993f52;

loc_993f02:
    r12 = r12 + 0x1;
    if (r12 < r13) goto loc_993eb6;

loc_993f0a:
    r13 = [var_100 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    if (r13 != 0x0) goto loc_993eac;

loc_993f49:
    r14 = var_10C;
    goto loc_993f60;

loc_993f60:
    [var_100 release];
    r13 = var_108;
    if (r14 != 0x0) {
            r14 = [[rbx _layoutAttributes] retain];
            r15 = [r14 _isCell];
            [r14 release];
            if (r15 != 0x0) {
                    rsi = @selector(_reuseCell:);
            }
            else {
                    rsi = @selector(_reuseSupplementaryView:);
            }
            _objc_msgSend(r13, rsi);
    }
    goto loc_993fd5;

loc_993fd5:
    [rbx release];
    if (*___stack_chk_guard != var_30) {
            __stack_chk_fail();
    }
    return;

loc_993f52:
    r14 = 0x0;
    goto loc_993f60;
}

void -[UICollectionView _didUpdateFocusInContext:withAnimationCoordinator:](void * self, void * _cmd, void * arg2, void * arg3) {
    rcx = arg3;
    r13 = self;
    r12 = [arg2 retain];
    var_40 = [rcx retain];
    r14 = [[r13 _focusedCell] retain];
    var_60 = [[r13 _focusedCellIndexPath] retain];
    rbx = [[r12 previouslyFocusedView] retain];
    var_50 = [[r13 _managedSubviewForView:rbx] retain];
    [rbx release];
    if (r14 != 0x0) {
            rbx = [[r13 indexPathForCell:r14, rcx] retain];
            [r13 _unhighlightItemAtIndexPath:rbx animated:0x0 notifyDelegate:0x1];
            [rbx release];
    }
    var_48 = r14;
    r14 = [[r12 nextFocusedView] retain];
    if (r14 != r13) {
            var_58 = r12;
            rbx = [[r12 nextFocusedView] retain];
            rdx = r13;
            r12 = [rbx isDescendantOfView:rdx];
            rdi = rbx;
            [rdi release];
            [r14 release];
            if (r12 != 0x0) {
                    rbx = [[var_58 nextFocusedView] retain];
                    rdx = rbx;
                    r14 = [[r13 _managedSubviewForView:rdx] retain];
                    [rbx release];
                    r12 = _objc_msgSend;
                    if (r14 != 0x0) {
                            r15 = r13;
                            rax = (r12)(r14, @selector(_layoutAttributes), rdx);
                            rax = [rax retain];
                            var_70 = rax;
                            rax = (r12)(rax, @selector(_isCell), rdx);
                            if (rax != 0x0) {
                                    r15->_focusedViewType = 0x1;
                                    rbx = [(r12)(r15, @selector(indexPathForCell:), r14, *_OBJC_IVAR_$_UICollectionView._focusedViewType) retain];
                                    (r12)(r15, @selector(_setFocusedCellIndexPath:), rbx, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    [rbx release];
                                    var_68 = r14;
                                    (r12)(r15, @selector(_setFocusedCell:), r14, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    (r12)(r15, @selector(_setFocusedCellElementKind:), 0x0, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    r14 = r12;
                            }
                            else {
                                    r15->_focusedViewType = 0x2;
                                    rbx = [(r12)(r15, @selector(indexPathForSupplementaryView:), r14, *_OBJC_IVAR_$_UICollectionView._focusedViewType) retain];
                                    (r12)(r15, @selector(_setFocusedCellIndexPath:), rbx, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    [rbx release];
                                    var_68 = r14;
                                    (r12)(r15, @selector(_setFocusedCell:), r14, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    rbx = [(r12)(var_70, @selector(representedElementKind)) retain];
                                    (r12)(r15, @selector(_setFocusedCellElementKind:), rbx, *_OBJC_IVAR_$_UICollectionView._focusedViewType);
                                    r14 = r12;
                                    [rbx release];
                            }
                            r12 = var_48;
                            [var_70 release];
                    }
                    else {
                            var_68 = r14;
                            r13->_focusedViewType = 0x0;
                            (r12)(r13, @selector(_setFocusedCellIndexPath:), 0x0);
                            (r12)(r13, @selector(_setFocusedCell:), 0x0);
                            (r12)(r13, @selector(_setFocusedCellElementKind:), 0x0);
                            r14 = r12;
                            r12 = var_48;
                            r15 = r13;
                    }
                    rbx = var_50;
                    r13 = var_58;
                    [var_68 release];
            }
            else {
                    r13->_focusedViewType = 0x0;
                    [r13 _setFocusedCell:0x0];
                    [r13 _setFocusedCellElementKind:0x0];
                    rax = [r13 remembersLastFocusedIndexPath];
                    r12 = var_48;
                    r14 = _objc_msgSend;
                    r15 = r13;
                    r13 = var_58;
                    rbx = var_50;
                    if (rax == 0x0) {
                            [r15 _setFocusedCellIndexPath:0x0];
                    }
            }
    }
    else {
            var_58 = r12;
            [r14 release];
            r13->_focusedViewType = 0x0;
            [r13 _setFocusedCell:0x0];
            [r13 _setFocusedCellElementKind:0x0];
            rax = [r13 remembersLastFocusedIndexPath];
            r12 = var_48;
            r14 = _objc_msgSend;
            r15 = r13;
            r13 = var_58;
            rbx = var_50;
            if (rax == 0x0) {
                    [r15 _setFocusedCellIndexPath:0x0];
            }
    }
    (r14)(r15, @selector(_setCurrentPromiseFulfillmentCell:), 0x0);
    [[r15 super] _didUpdateFocusInContext:r13 withAnimationCoordinator:var_40];
    (r14)(r15, @selector(_reusePreviouslyFocusedManagedSubviewIfNeeded:), r12);
    if ((rbx != 0x0) && (rbx != r12)) {
            [r15 _reusePreviouslyFocusedManagedSubviewIfNeeded:rbx];
    }
    rbx = [[r15 _endOfContentFocusContainerGuide] retain];
    [rbx release];
    if (rbx != 0x0) {
            r12 = [[r15 _endOfContentFocusContainerGuide] retain];
            r14 = [[r15 _focusedCell] retain];
            [r12 setEnabled:(r14 != 0x0 ? 0x1 : 0x0) & 0xff];
            [r14 release];
            [r12 release];
            r12 = var_48;
    }
    if ((r15->_collectionViewFlags & 0x10000000) != 0x0) {
            rbx = [[r13 previouslyFocusedView] retain];
            [rbx release];
            r14 = 0x0;
            if (r12 == rbx) {
                    r14 = [var_60 retain];
            }
            rax = [UICollectionViewFocusUpdateContext _contextWithContext:r13 collectionView:r15 cachedPreviouslyFocusedIndexPath:r14];
            r13 = r15;
            r12 = [rax retain];
            rbx = objc_loadWeakRetained(*_OBJC_IVAR_$_UIScrollView._delegate + r13);
            [rbx collectionView:r13 didUpdateFocusInContext:r12 withAnimationCoordinator:var_40];
            [rbx release];
            r13 = var_58;
            [r12 release];
            [r14 release];
            r12 = var_48;
    }
    [var_50 release];
    [var_60 release];
    [r12 release];
    [var_40 release];
    [r13 release];
    return;
}

void -[UICollectionView _setKeepsFirstResponderVisibleOnBoundsChange:](void * self, void * _cmd, bool arg2) {
    self->_collectionViewFlags = self->_collectionViewFlags;
    *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) = arg2 & 0xff | *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff & 0xfe;
    return;
}

bool -[UICollectionView _keepsFirstResponderVisibleOnBoundsChange](void * self, void * _cmd) {
    rax = *(int8_t *)(self + *_OBJC_IVAR_$_UICollectionView._collectionViewFlags + 0x8) & 0xff;
    rax = rax & 0x1;
    return rax;
}


void -[UICollectionView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:](void * self, void * _cmd, void * arg2, bool arg3, double * arg4) {
    r15 = arg4;
    r12 = arg3;
    rbx = self;
    r14 = [arg2 retain];
    if ([rbx _isFirstResponderKeyboardAvoidanceEnabled] != 0x0) {
            [[rbx super] _adjustForAutomaticKeyboardInfo:r14 animated:r12 & 0xff lastAdjustment:r15];
            xmm0 = intrinsic_movsd(xmm0, *r15);
            xmm0 = intrinsic_ucomisd(xmm0, 0x0);
            if ((xmm0 != 0x0) || (!CPU_FLAGS & NP)) {
                    [rbx _scrollFirstResponderCellToVisible:0x1];
            }
    }
    [r14 release];
    return;
}

void -[UICollectionView _scrollFirstResponderCellToVisible:](void * self, void * _cmd, bool arg2) {
    var_12C = arg2;
    r15 = self;
    intrinsic_movaps(var_C0, 0x0, arg2);
    intrinsic_movaps(var_D0, 0x0);
    var_E0 = intrinsic_movaps(var_E0, 0x0);
    var_F0 = intrinsic_movaps(var_F0, 0x0);
    rax = [r15->_visibleCellsDict objectEnumerator];
    rax = [rax retain];
    var_108 = rax;
    rax = [rax countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_100 = rax;
    if (rax == 0x0) goto loc_994854;

loc_994720:
    r12 = *var_E0;
    var_120 = r12;
    goto loc_99473f;

loc_99473f:
    r13 = 0x0;
    goto loc_99476c;

loc_99476c:
    if (*var_E0 != r12) {
            objc_enumerationMutation(var_108);
    }
    rbx = *(var_E8 + r13 * 0x8);
    if ([rbx _isAncestorOfFirstResponder] == 0x0) goto loc_9947e2;

loc_9947a3:
    r12 = [[r15 indexPathForCell:rbx] retain];
    if ([r15 _indexPathIsValid:r12] != 0x0) goto loc_99482c;

loc_9947d2:
    [r12 release];
    r12 = var_120;
    goto loc_9947e2;

loc_9947e2:
    r13 = r13 + 0x1;
    if (r13 < var_100) goto loc_99476c;

loc_9947f2:
    rax = [var_108 countByEnumeratingWithState:var_F0 objects:var_B0 count:0x10];
    var_100 = rax;
    if (rax != 0x0) goto loc_99473f;

loc_994854:
    [var_108 release];
    if (*___stack_chk_guard != *___stack_chk_guard) {
            __stack_chk_fail();
    }
    return;

loc_99482c:
    [r15 scrollToItemAtIndexPath:r12 atScrollPosition:0x0 animated:var_12C & 0xff];
    [r12 release];
    goto loc_994854;
}

bool -[UICollectionView _dataSourceSupportsReordering](void * self, void * _cmd) {
    rax = (self->_collectionViewFlags & 0x2800000000) != 0x0 ? 0x1 : 0x0;
    return rax;
}

void * -[UICollectionView collectionViewLayout](void * self, void * _cmd) {
    rax = self->_layout;
    return rax;
}

void * -[UICollectionView dataSource](void * self, void * _cmd) {
    rax = objc_loadWeakRetained(self + *_OBJC_IVAR_$_UICollectionView._dataSource);
    rax = [rax autorelease];
    return rax;
}

void * -[UICollectionView backgroundView](void * self, void * _cmd) {
    rax = self->_backgroundView;
    return rax;
}

void * -[UICollectionView _currentTouch](void * self, void * _cmd) {
    rax = self->_currentTouch;
    return rax;
}

void -[UICollectionView _setCurrentTouch:](void * self, void * _cmd, void * arg2) {
    self->_currentTouch = [arg2 retain];
    [self->_currentTouch release];
    return;
}

bool -[UICollectionView isPrefetchingEnabled](void * self, void * _cmd) {
    rax = self->_prefetchingEnabled;
    return rax;
}

void -[UICollectionView setPrefetchingEnabled:](void * self, void * _cmd, bool arg2) {
    self->_prefetchingEnabled = arg2;
    return;
}

void * -[UICollectionView _focusedCellIndexPath](void * self, void * _cmd) {
    rax = objc_getProperty(self, _cmd, *_OBJC_IVAR_$_UICollectionView._focusedCellIndexPath, 0x0);
    return rax;
}

void * -[UICollectionView _focusedCell](void * self, void * _cmd) {
    rax = self->_focusedCell;
    return rax;
}

void -[UICollectionView _setFocusedCell:](void * self, void * _cmd, void * arg2) {
    self->_focusedCell = [arg2 retain];
    [self->_focusedCell release];
    return;
}

void * -[UICollectionView _focusedCellElementKind](void * self, void * _cmd) {
    rax = objc_getProperty(self, _cmd, *_OBJC_IVAR_$_UICollectionView._focusedCellElementKind, 0x0);
    return rax;
}

void -[UICollectionView _setFocusedCellElementKind:](void * self, void * _cmd, void * arg2) {
    objc_setProperty_nonatomic_copy(self, _cmd, arg2, *_OBJC_IVAR_$_UICollectionView._focusedCellElementKind);
    return;
}

struct UIEdgeInsets -[UICollectionView _defaultLayoutMargins](void * self, void * _cmd) {
    *(self + 0x18) = *(_cmd + *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins + 0x18);
    *(self + 0x10) = *(_cmd + *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins + 0x10);
    *(self + 0x8) = *(_cmd + *_OBJC_IVAR_$_UICollectionView._defaultLayoutMargins + 0x8);
    *self = _cmd->_defaultLayoutMargins;
    rax = self;
    return rax;
}

void * -[UICollectionView _navigationCompletion](void * self, void * _cmd) {
    rax = objc_getProperty(self, _cmd, *_OBJC_IVAR_$_UICollectionView._navigationCompletion, 0x0);
    return rax;
}

void * -[UICollectionView _navigationCompletion](void * self, void * _cmd) {
    rax = objc_getProperty(self, _cmd, *_OBJC_IVAR_$_UICollectionView._navigationCompletion, 0x0);
    return rax;
}

void * -[UICollectionView _endOfContentFocusContainerGuide](void * self, void * _cmd) {
    rax = self->_endOfContentFocusContainerGuide;
    return rax;
}

void * -[UICollectionView _currentPromiseFulfillmentCell](void * self, void * _cmd) {
    rax = self->_currentPromiseFulfillmentCell;
    return rax;
}

void -[UICollectionView _setCurrentPromiseFulfillmentCell:](void * self, void * _cmd, void * arg2) {
    self->_currentPromiseFulfillmentCell = [arg2 retain];
    [self->_currentPromiseFulfillmentCell release];
    return;
}

void -[UICollectionView .cxx_destruct](void * self, void * _cmd) {
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._currentPromiseFulfillmentCell + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._endOfContentFocusContainerGuide + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._navigationCompletion + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._focusedCellElementKind + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._focusedCell + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._focusedCellIndexPath + self, 0x0);
    objc_destroyWeak(*_OBJC_IVAR_$_UICollectionView._prefetchDataSource + self);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._prefetchVelocityIntegrator + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._prefetchCacheItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._currentPrefetchingContext + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._contentFocusContainerGuide + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._dataSourceToLayoutIndexPathMappingDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._autoscrollTimer + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._reorderedItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._invalidationBlock + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._invalidatedDecorationIndexPaths + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._invalidatedSupplementaryIndexPaths + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._invalidatedItemIndexPaths + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._trackedValuesKeys + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._interactiveTransitionValueTrackingDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._reorderFeedbackBehavior + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._nextLayoutForInteractiveTranstion + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._endInteractiveTransitionAnimationGroup + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._interactiveCompletionHandler + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._interactiveTransitionInfos + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._transitionLayoutAttributes + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._supplementaryViewRegisteredKinds + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._supplementaryViewNibExternalObjectsTables + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._cellNibExternalObjectsTables + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._supplementaryViewNibDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._supplementaryViewClassDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._cellNibDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._cellClassDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._postUpdateBlock + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._updateCompletionHandler + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._currentTouch + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._originalDeleteItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._originalInsertItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._moveItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._reloadItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._deleteItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._insertItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._currentUpdate + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._collectionViewData + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._pendingDeselectionIndexPaths + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._pendingSelectionIndexPath + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._templateLayoutCells + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._clonedDecorationViewsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._clonedSupplementaryViewsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._clonedCellsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._visibleDecorationViewsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._visibleSupplementaryViewsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._visibleCellsDict + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._firstResponderIndexPath + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._firstResponderViewKind + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._newContentView + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._firstResponderView + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._indexPathsForHighlightedItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._supplementaryViewReuseQueues + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._cellReuseQueues + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._indexPathsForSelectedItems + self, 0x0);
    objc_storeStrong(*_OBJC_IVAR_$_UICollectionView._backgroundView + self, 0x0);
    objc_destroyWeak(*_OBJC_IVAR_$_UICollectionView._dataSource + self);
    objc_storeStrong(self + *_OBJC_IVAR_$_UICollectionView._layout, 0x0);
    return;
}

void * -[UICollectionView _visibleCellForIndexPath:](void * self, void * _cmd, void * arg2) {
    rax = [self->_visibleCellsDict objectForKeyedSubscript:arg2];
    return rax;
}

void * -[UICollectionView _visibleViewForLayoutAttributes:](void * self, void * _cmd, void * arg2) {
    r14 = arg2;
    rbx = self;
    rax = [r14 representedElementCategory];
    if (rax == 0x1) goto loc_a8525d;

loc_a8522d:
    if (rax != 0x0) goto loc_a85266;

loc_a85232:
    rbx = rbx->_visibleCellsDict;
    rax = [r14 __indexPath];
    rsi = @selector(objectForKeyedSubscript:);
    goto loc_a852af;

loc_a852af:
    rax = _objc_msgSend(rbx, rsi, rax);
    return rax;

loc_a85266:
    rax = _OBJC_IVAR_$_UICollectionView._visibleDecorationViewsDict;
    goto loc_a8526d;

loc_a8526d:
    rbx = [*(rbx + *rax) objectForKeyedSubscript:[r14 __elementKind]];
    rax = [r14 __indexPath];
    rsi = @selector(objectForKey:);
    goto loc_a852af;

loc_a8525d:
    rax = _OBJC_IVAR_$_UICollectionView._visibleSupplementaryViewsDict;
    goto loc_a8526d;
}



